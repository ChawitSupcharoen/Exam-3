
Exam3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004560  08004560  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004568  08004568  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800456c  0800456c  0001456c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000005c  080045cc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080045cc  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f245  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002107  00000000  00000000  0002f314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00031420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095a  00000000  00000000  00032040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025428  00000000  00000000  0003299a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f39f  00000000  00000000  00057dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eba6b  00000000  00000000  00067161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000368c  00000000  00000000  00152bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00156258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080044bc 	.word	0x080044bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080044bc 	.word	0x080044bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fb4c 	bl	8000c5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f825 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f8f7 	bl	80007bc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005ce:	f000 f86d 	bl	80006ac <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005d2:	f000 f8b5 	bl	8000740 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  SPITxRx_Setup();
 80005d6:	f000 f981 	bl	80008dc <SPITxRx_Setup>

  reload();
 80005da:	f000 f9b1 	bl	8000940 <reload>
  uint8_t TXstr[30];
  memset(TXstr, 0,30);
 80005de:	463b      	mov	r3, r7
 80005e0:	221e      	movs	r2, #30
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 fae5 	bl	8003bb4 <memset>
  sprintf((char*)TXstr, "Magazine value is %d.", magazine);
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <main+0x4c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	463b      	mov	r3, r7
 80005f2:	4906      	ldr	r1, [pc, #24]	; (800060c <main+0x50>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 fabd 	bl	8003b74 <siprintf>

  HAL_UART_Transmit(&hlpuart1, TXstr, sizeof(TXstr), 100);
 80005fa:	4639      	mov	r1, r7
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	221e      	movs	r2, #30
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <main+0x54>)
 8000602:	f002 fc0b 	bl	8002e1c <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000606:	e7fe      	b.n	8000606 <main+0x4a>
 8000608:	20000170 	.word	0x20000170
 800060c:	080044d4 	.word	0x080044d4
 8000610:	20000078 	.word	0x20000078

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2238      	movs	r2, #56	; 0x38
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fac6 	bl	8003bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000636:	2000      	movs	r0, #0
 8000638:	f000 fed8 	bl	80013ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2340      	movs	r3, #64	; 0x40
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000652:	2304      	movs	r3, #4
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000656:	2355      	movs	r3, #85	; 0x55
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	4618      	mov	r0, r3
 800066c:	f000 ff72 	bl	8001554 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000676:	f000 f977 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2303      	movs	r3, #3
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2104      	movs	r1, #4
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fa70 	bl	8001b78 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800069e:	f000 f963 	bl	8000968 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006b2:	4a22      	ldr	r2, [pc, #136]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80006bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	f002 fb44 	bl	8002d7c <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f935 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006fe:	2100      	movs	r1, #0
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 8000702:	f003 f96d 	bl	80039e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800070c:	f000 f92c 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	f003 f9a2 	bl	8003a5c <HAL_UARTEx_SetRxFifoThreshold>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800071e:	f000 f923 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 8000724:	f003 f923 	bl	800396e <HAL_UARTEx_DisableFifoMode>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800072e:	f000 f91b 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000078 	.word	0x20000078
 800073c:	40008000 	.word	0x40008000

08000740 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <MX_SPI3_Init+0x78>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_SPI3_Init+0x74>)
 800074c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI3_Init+0x74>)
 800075a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800075e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI3_Init+0x74>)
 800076e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000772:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000776:	2238      	movs	r2, #56	; 0x38
 8000778:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI3_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI3_Init+0x74>)
 800078e:	2207      	movs	r2, #7
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI3_Init+0x74>)
 800079a:	2208      	movs	r2, #8
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_SPI3_Init+0x74>)
 80007a0:	f001 fe54 	bl	800244c <HAL_SPI_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007aa:	f000 f8dd 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000010c 	.word	0x2000010c
 80007b8:	40003c00 	.word	0x40003c00

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b3f      	ldr	r3, [pc, #252]	; (80008d0 <MX_GPIO_Init+0x114>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a3e      	ldr	r2, [pc, #248]	; (80008d0 <MX_GPIO_Init+0x114>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b3c      	ldr	r3, [pc, #240]	; (80008d0 <MX_GPIO_Init+0x114>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ea:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <MX_GPIO_Init+0x114>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a38      	ldr	r2, [pc, #224]	; (80008d0 <MX_GPIO_Init+0x114>)
 80007f0:	f043 0320 	orr.w	r3, r3, #32
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b36      	ldr	r3, [pc, #216]	; (80008d0 <MX_GPIO_Init+0x114>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0320 	and.w	r3, r3, #32
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b33      	ldr	r3, [pc, #204]	; (80008d0 <MX_GPIO_Init+0x114>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a32      	ldr	r2, [pc, #200]	; (80008d0 <MX_GPIO_Init+0x114>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <MX_GPIO_Init+0x114>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <MX_GPIO_Init+0x114>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a2c      	ldr	r2, [pc, #176]	; (80008d0 <MX_GPIO_Init+0x114>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <MX_GPIO_Init+0x114>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <MX_GPIO_Init+0x114>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <MX_GPIO_Init+0x114>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_GPIO_Init+0x114>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f000 fd8f 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2104      	movs	r1, #4
 800085a:	481e      	ldr	r0, [pc, #120]	; (80008d4 <MX_GPIO_Init+0x118>)
 800085c:	f000 fd8a 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4818      	ldr	r0, [pc, #96]	; (80008d8 <MX_GPIO_Init+0x11c>)
 8000878:	f000 fbfa 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800087c:	2320      	movs	r3, #32
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fbeb 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800089a:	2304      	movs	r3, #4
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <MX_GPIO_Init+0x118>)
 80008b2:	f000 fbdd 	bl	8001070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2028      	movs	r0, #40	; 0x28
 80008bc:	f000 fb3d 	bl	8000f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008c0:	2028      	movs	r0, #40	; 0x28
 80008c2:	f000 fb54 	bl	8000f6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000c00 	.word	0x48000c00
 80008d8:	48000800 	.word	0x48000800

080008dc <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */
void SPITxRx_Setup(){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	uint8_t buffer[4];

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2104      	movs	r1, #4
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <SPITxRx_Setup+0x5c>)
 80008e8:	f000 fd44 	bl	8001374 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f000 fa27 	bl	8000d40 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2104      	movs	r1, #4
 80008f6:	4810      	ldr	r0, [pc, #64]	; (8000938 <SPITxRx_Setup+0x5c>)
 80008f8:	f000 fd3c 	bl	8001374 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f000 fa1f 	bl	8000d40 <HAL_Delay>

	HAL_Delay(200);
 8000902:	20c8      	movs	r0, #200	; 0xc8
 8000904:	f000 fa1c 	bl	8000d40 <HAL_Delay>
	buffer[0] = 0b01000000;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0x00;
 800090c:	2300      	movs	r3, #0
 800090e:	717b      	strb	r3, [r7, #5]
	buffer[2] = 0x00;
 8000910:	2300      	movs	r3, #0
 8000912:	71bb      	strb	r3, [r7, #6]
	buffer[3] = 0x00;
 8000914:	2300      	movs	r3, #0
 8000916:	71fb      	strb	r3, [r7, #7]
	buffer[4] = 0x00;
 8000918:	2300      	movs	r3, #0
 800091a:	723b      	strb	r3, [r7, #8]
	HAL_SPI_Transmit(&hspi3, buffer, 4, 100);
 800091c:	1d39      	adds	r1, r7, #4
 800091e:	2364      	movs	r3, #100	; 0x64
 8000920:	2204      	movs	r2, #4
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <SPITxRx_Setup+0x60>)
 8000924:	f001 fe3d 	bl	80025a2 <HAL_SPI_Transmit>
	HAL_Delay(200);
 8000928:	20c8      	movs	r0, #200	; 0xc8
 800092a:	f000 fa09 	bl	8000d40 <HAL_Delay>
//	buffer[2] = 0xFF;
//	buffer[3] = 0x00;
//	buffer[4] = 0x00;
//	HAL_SPI_Transmit(&hspi3, buffer, 4, 100);
//	HAL_Delay(200);
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	48000c00 	.word	0x48000c00
 800093c:	2000010c 	.word	0x2000010c

08000940 <reload>:
	HAL_SPI_TransmitReceive(&hspi3, buffer, RXbuffer, 4, 100);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
	return 0;
}

void reload(){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

    magazine = HAL_GetTick() % 64;
 8000944:	f000 f9f0 	bl	8000d28 <HAL_GetTick>
 8000948:	4603      	mov	r3, r0
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b03      	ldr	r3, [pc, #12]	; (8000960 <reload+0x20>)
 8000954:	701a      	strb	r2, [r3, #0]
    magcap = 6;
 8000956:	4b03      	ldr	r3, [pc, #12]	; (8000964 <reload+0x24>)
 8000958:	2206      	movs	r2, #6
 800095a:	701a      	strb	r2, [r3, #0]
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000170 	.word	0x20000170
 8000964:	20000171 	.word	0x20000171

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009aa:	f000 fdc3 	bl	8001534 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b09e      	sub	sp, #120	; 0x78
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	2254      	movs	r2, #84	; 0x54
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 f8e9 	bl	8003bb4 <memset>
  if(huart->Instance==LPUART1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a1f      	ldr	r2, [pc, #124]	; (8000a64 <HAL_UART_MspInit+0xa8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d136      	bne.n	8000a5a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009ec:	2320      	movs	r3, #32
 80009ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fad9 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a04:	f7ff ffb0 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0xac>)
 8000a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a0c:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <HAL_UART_MspInit+0xac>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_UART_MspInit+0xac>)
 8000a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_UART_MspInit+0xac>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_UART_MspInit+0xac>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_UART_MspInit+0xac>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a48:	230c      	movs	r3, #12
 8000a4a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a50:	4619      	mov	r1, r3
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f000 fb0b 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3778      	adds	r7, #120	; 0x78
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40008000 	.word	0x40008000
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <HAL_SPI_MspInit+0x8c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d130      	bne.n	8000af0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_SPI_MspInit+0x90>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <HAL_SPI_MspInit+0x90>)
 8000a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_SPI_MspInit+0x90>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_SPI_MspInit+0x90>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a14      	ldr	r2, [pc, #80]	; (8000afc <HAL_SPI_MspInit+0x90>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_SPI_MspInit+0x90>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000abe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad0:	2306      	movs	r3, #6
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4809      	ldr	r0, [pc, #36]	; (8000b00 <HAL_SPI_MspInit+0x94>)
 8000adc:	f000 fac8 	bl	8001070 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2033      	movs	r0, #51	; 0x33
 8000ae6:	f000 fa28 	bl	8000f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000aea:	2033      	movs	r0, #51	; 0x33
 8000aec:	f000 fa3f 	bl	8000f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40003c00 	.word	0x40003c00
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000800 	.word	0x48000800

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 f8d8 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b60:	f000 fc20 	bl	80013a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <SPI3_IRQHandler+0x10>)
 8000b6e:	f001 fe8d 	bl	800288c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000010c 	.word	0x2000010c

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f003 f80a 	bl	8003bc4 <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20020000 	.word	0x20020000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	20000174 	.word	0x20000174
 8000be4:	200002c8 	.word	0x200002c8

08000be8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c10:	f7ff ffea 	bl	8000be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	; (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	; (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f002 ffc9 	bl	8003bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3e:	f7ff fcbd 	bl	80005bc <main>

08000c42 <LoopForever>:

LoopForever:
    b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   r0, =_estack
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c50:	08004570 	.word	0x08004570
  ldr r2, =_sbss
 8000c54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c58:	200002c4 	.word	0x200002c4

08000c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_2_IRQHandler>

08000c5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f95b 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 f80e 	bl	8000c90 <HAL_InitTick>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	e001      	b.n	8000c84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c80:	f7ff fe78 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c84:	79fb      	ldrb	r3, [r7, #7]

}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_InitTick+0x68>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d022      	beq.n	8000cea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_InitTick+0x6c>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_InitTick+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f966 	bl	8000f8a <HAL_SYSTICK_Config>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10f      	bne.n	8000ce4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b0f      	cmp	r3, #15
 8000cc8:	d809      	bhi.n	8000cde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd2:	f000 f932 	bl	8000f3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_InitTick+0x70>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	e007      	b.n	8000cee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e004      	b.n	8000cee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e001      	b.n	8000cee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x1c>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <HAL_IncTick+0x1c>)
 8000d14:	6013      	str	r3, [r2, #0]
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	20000178 	.word	0x20000178
 8000d24:	20000008 	.word	0x20000008

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000178 	.word	0x20000178

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d004      	beq.n	8000d64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_Delay+0x40>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	4413      	add	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d64:	bf00      	nop
 8000d66:	f7ff ffdf 	bl	8000d28 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d8f7      	bhi.n	8000d66 <HAL_Delay+0x26>
  {
  }
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000008 	.word	0x20000008

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef0:	d301      	bcc.n	8000ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00f      	b.n	8000f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <SysTick_Config+0x40>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efe:	210f      	movs	r1, #15
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f7ff ff8e 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <SysTick_Config+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <SysTick_Config+0x40>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff29 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f48:	f7ff ff40 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	f7ff ff90 	bl	8000e78 <NVIC_EncodePriority>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff5f 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff33 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffa4 	bl	8000ee0 <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d00d      	beq.n	8000fd6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e047      	b.n	8001066 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 020e 	bic.w	r2, r2, #14
 8000fe4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0201 	bic.w	r2, r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f003 021f 	and.w	r2, r3, #31
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	2101      	movs	r1, #1
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001022:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00c      	beq.n	8001046 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001036:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800103a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001044:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	4798      	blx	r3
    }
  }
  return status;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800107e:	e15a      	b.n	8001336 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 814c 	beq.w	8001330 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d005      	beq.n	80010b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d130      	bne.n	8001112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010e6:	2201      	movs	r2, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	f003 0201 	and.w	r2, r3, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b03      	cmp	r3, #3
 800111c:	d017      	beq.n	800114e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d123      	bne.n	80011a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	691a      	ldr	r2, [r3, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	6939      	ldr	r1, [r7, #16]
 800119e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0203 	and.w	r2, r3, #3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 80a6 	beq.w	8001330 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <HAL_GPIO_Init+0x2e4>)
 80011e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e8:	4a5a      	ldr	r2, [pc, #360]	; (8001354 <HAL_GPIO_Init+0x2e4>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6613      	str	r3, [r2, #96]	; 0x60
 80011f0:	4b58      	ldr	r3, [pc, #352]	; (8001354 <HAL_GPIO_Init+0x2e4>)
 80011f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fc:	4a56      	ldr	r2, [pc, #344]	; (8001358 <HAL_GPIO_Init+0x2e8>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001226:	d01f      	beq.n	8001268 <HAL_GPIO_Init+0x1f8>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x2ec>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d019      	beq.n	8001264 <HAL_GPIO_Init+0x1f4>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d013      	beq.n	8001260 <HAL_GPIO_Init+0x1f0>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a4a      	ldr	r2, [pc, #296]	; (8001364 <HAL_GPIO_Init+0x2f4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00d      	beq.n	800125c <HAL_GPIO_Init+0x1ec>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a49      	ldr	r2, [pc, #292]	; (8001368 <HAL_GPIO_Init+0x2f8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d007      	beq.n	8001258 <HAL_GPIO_Init+0x1e8>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a48      	ldr	r2, [pc, #288]	; (800136c <HAL_GPIO_Init+0x2fc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d101      	bne.n	8001254 <HAL_GPIO_Init+0x1e4>
 8001250:	2305      	movs	r3, #5
 8001252:	e00a      	b.n	800126a <HAL_GPIO_Init+0x1fa>
 8001254:	2306      	movs	r3, #6
 8001256:	e008      	b.n	800126a <HAL_GPIO_Init+0x1fa>
 8001258:	2304      	movs	r3, #4
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x1fa>
 800125c:	2303      	movs	r3, #3
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x1fa>
 8001260:	2302      	movs	r3, #2
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x1fa>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x1fa>
 8001268:	2300      	movs	r3, #0
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800127a:	4937      	ldr	r1, [pc, #220]	; (8001358 <HAL_GPIO_Init+0x2e8>)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001288:	4b39      	ldr	r3, [pc, #228]	; (8001370 <HAL_GPIO_Init+0x300>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ac:	4a30      	ldr	r2, [pc, #192]	; (8001370 <HAL_GPIO_Init+0x300>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_GPIO_Init+0x300>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012d6:	4a26      	ldr	r2, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x300>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_GPIO_Init+0x300>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001300:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <HAL_GPIO_Init+0x300>)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_GPIO_Init+0x300>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_GPIO_Init+0x300>)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	f47f ae9d 	bne.w	8001080 <HAL_GPIO_Init+0x10>
  }
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000
 800135c:	48000400 	.word	0x48000400
 8001360:	48000800 	.word	0x48000800
 8001364:	48000c00 	.word	0x48000c00
 8001368:	48001000 	.word	0x48001000
 800136c:	48001400 	.word	0x48001400
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001390:	e002      	b.n	8001398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f806 	bl	80013d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010400 	.word	0x40010400

080013d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d141      	bne.n	800147e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fa:	4b4b      	ldr	r3, [pc, #300]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001406:	d131      	bne.n	800146c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001408:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800140e:	4a46      	ldr	r2, [pc, #280]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001414:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001420:	4a41      	ldr	r2, [pc, #260]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001426:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001428:	4b40      	ldr	r3, [pc, #256]	; (800152c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2232      	movs	r2, #50	; 0x32
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	4a3f      	ldr	r2, [pc, #252]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001434:	fba2 2303 	umull	r2, r3, r2, r3
 8001438:	0c9b      	lsrs	r3, r3, #18
 800143a:	3301      	adds	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800143e:	e002      	b.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3b01      	subs	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001446:	4b38      	ldr	r3, [pc, #224]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001452:	d102      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f2      	bne.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001466:	d158      	bne.n	800151a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e057      	b.n	800151c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001472:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001478:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800147c:	e04d      	b.n	800151a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001484:	d141      	bne.n	800150a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800148e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001492:	d131      	bne.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800149a:	4a23      	ldr	r2, [pc, #140]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ac:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2232      	movs	r2, #50	; 0x32
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	0c9b      	lsrs	r3, r3, #18
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ca:	e002      	b.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014de:	d102      	bne.n	80014e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f2      	bne.n	80014cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f2:	d112      	bne.n	800151a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e011      	b.n	800151c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001504:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001508:	e007      	b.n	800151a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001514:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001518:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40007000 	.word	0x40007000
 800152c:	20000000 	.word	0x20000000
 8001530:	431bde83 	.word	0x431bde83

08001534 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800153e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001542:	6093      	str	r3, [r2, #8]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40007000 	.word	0x40007000

08001554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e2fe      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d075      	beq.n	800165e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001572:	4b97      	ldr	r3, [pc, #604]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800157c:	4b94      	ldr	r3, [pc, #592]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b0c      	cmp	r3, #12
 800158a:	d102      	bne.n	8001592 <HAL_RCC_OscConfig+0x3e>
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d002      	beq.n	8001598 <HAL_RCC_OscConfig+0x44>
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b08      	cmp	r3, #8
 8001596:	d10b      	bne.n	80015b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	4b8d      	ldr	r3, [pc, #564]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d05b      	beq.n	800165c <HAL_RCC_OscConfig+0x108>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d157      	bne.n	800165c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e2d9      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b8:	d106      	bne.n	80015c8 <HAL_RCC_OscConfig+0x74>
 80015ba:	4b85      	ldr	r3, [pc, #532]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a84      	ldr	r2, [pc, #528]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0xb0>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0x98>
 80015d2:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7e      	ldr	r2, [pc, #504]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7b      	ldr	r2, [pc, #492]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xb0>
 80015ec:	4b78      	ldr	r3, [pc, #480]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a77      	ldr	r2, [pc, #476]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b75      	ldr	r3, [pc, #468]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a74      	ldr	r2, [pc, #464]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fb8c 	bl	8000d28 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fb88 	bl	8000d28 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e29e      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001626:	4b6a      	ldr	r3, [pc, #424]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0xc0>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fb78 	bl	8000d28 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fb74 	bl	8000d28 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e28a      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164e:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0xe8>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d075      	beq.n	8001756 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166a:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001674:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b0c      	cmp	r3, #12
 8001682:	d102      	bne.n	800168a <HAL_RCC_OscConfig+0x136>
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d002      	beq.n	8001690 <HAL_RCC_OscConfig+0x13c>
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d11f      	bne.n	80016d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001690:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x154>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e25d      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	4946      	ldr	r1, [pc, #280]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016bc:	4b45      	ldr	r3, [pc, #276]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fae5 	bl	8000c90 <HAL_InitTick>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d043      	beq.n	8001754 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e249      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d023      	beq.n	8001720 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d8:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a3c      	ldr	r2, [pc, #240]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80016de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb20 	bl	8000d28 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fb1c 	bl	8000d28 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e232      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	061b      	lsls	r3, r3, #24
 8001718:	492d      	ldr	r1, [pc, #180]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
 800171e:	e01a      	b.n	8001756 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a2a      	ldr	r2, [pc, #168]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fafc 	bl	8000d28 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff faf8 	bl	8000d28 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e20e      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x1e0>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d041      	beq.n	80017e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01c      	beq.n	80017a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800176c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff fad5 	bl	8000d28 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001782:	f7ff fad1 	bl	8000d28 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e1e7      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0ef      	beq.n	8001782 <HAL_RCC_OscConfig+0x22e>
 80017a2:	e020      	b.n	80017e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017aa:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff fab8 	bl	8000d28 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ba:	e00d      	b.n	80017d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fab4 	bl	8000d28 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d906      	bls.n	80017d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1ca      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d8:	4b8c      	ldr	r3, [pc, #560]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ea      	bne.n	80017bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80a6 	beq.w	8001940 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017f8:	4b84      	ldr	r3, [pc, #528]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_OscConfig+0x2b4>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x2b6>
 8001808:	2300      	movs	r3, #0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00d      	beq.n	800182a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b7f      	ldr	r3, [pc, #508]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a7e      	ldr	r2, [pc, #504]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
 800181a:	4b7c      	ldr	r3, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001826:	2301      	movs	r3, #1
 8001828:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182a:	4b79      	ldr	r3, [pc, #484]	; (8001a10 <HAL_RCC_OscConfig+0x4bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d118      	bne.n	8001868 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001836:	4b76      	ldr	r3, [pc, #472]	; (8001a10 <HAL_RCC_OscConfig+0x4bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a75      	ldr	r2, [pc, #468]	; (8001a10 <HAL_RCC_OscConfig+0x4bc>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001842:	f7ff fa71 	bl	8000d28 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184a:	f7ff fa6d 	bl	8000d28 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e183      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <HAL_RCC_OscConfig+0x4bc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d108      	bne.n	8001882 <HAL_RCC_OscConfig+0x32e>
 8001870:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	4a65      	ldr	r2, [pc, #404]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001880:	e024      	b.n	80018cc <HAL_RCC_OscConfig+0x378>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b05      	cmp	r3, #5
 8001888:	d110      	bne.n	80018ac <HAL_RCC_OscConfig+0x358>
 800188a:	4b60      	ldr	r3, [pc, #384]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001890:	4a5e      	ldr	r2, [pc, #376]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189a:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a0:	4a5a      	ldr	r2, [pc, #360]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018aa:	e00f      	b.n	80018cc <HAL_RCC_OscConfig+0x378>
 80018ac:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b2:	4a56      	ldr	r2, [pc, #344]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c2:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d016      	beq.n	8001902 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff fa28 	bl	8000d28 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7ff fa24 	bl	8000d28 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e138      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f2:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ed      	beq.n	80018dc <HAL_RCC_OscConfig+0x388>
 8001900:	e015      	b.n	800192e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001902:	f7ff fa11 	bl	8000d28 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff fa0d 	bl	8000d28 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	; 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e121      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ed      	bne.n	800190a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800192e:	7ffb      	ldrb	r3, [r7, #31]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	4a34      	ldr	r2, [pc, #208]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 800193a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	2b00      	cmp	r3, #0
 800194a:	d03c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01c      	beq.n	800198e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001956:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800195a:	4a2c      	ldr	r2, [pc, #176]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001964:	f7ff f9e0 	bl	8000d28 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800196c:	f7ff f9dc 	bl	8000d28 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0f2      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0ef      	beq.n	800196c <HAL_RCC_OscConfig+0x418>
 800198c:	e01b      	b.n	80019c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001994:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff f9c3 	bl	8000d28 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a6:	f7ff f9bf 	bl	8000d28 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0d5      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80019ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ef      	bne.n	80019a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 80c9 	beq.w	8001b62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	f000 8083 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d15e      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80019ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff f999 	bl	8000d28 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	e00c      	b.n	8001a14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff f995 	bl	8000d28 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d905      	bls.n	8001a14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0ab      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a14:	4b55      	ldr	r3, [pc, #340]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1ec      	bne.n	80019fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a20:	4b52      	ldr	r3, [pc, #328]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	4b52      	ldr	r3, [pc, #328]	; (8001b70 <HAL_RCC_OscConfig+0x61c>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6a11      	ldr	r1, [r2, #32]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a30:	3a01      	subs	r2, #1
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	4311      	orrs	r1, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a3a:	0212      	lsls	r2, r2, #8
 8001a3c:	4311      	orrs	r1, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a42:	0852      	lsrs	r2, r2, #1
 8001a44:	3a01      	subs	r2, #1
 8001a46:	0552      	lsls	r2, r2, #21
 8001a48:	4311      	orrs	r1, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a4e:	0852      	lsrs	r2, r2, #1
 8001a50:	3a01      	subs	r2, #1
 8001a52:	0652      	lsls	r2, r2, #25
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a5a:	06d2      	lsls	r2, r2, #27
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	4943      	ldr	r1, [pc, #268]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a64:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a40      	ldr	r2, [pc, #256]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a70:	4b3e      	ldr	r3, [pc, #248]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4a3d      	ldr	r2, [pc, #244]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f954 	bl	8000d28 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f950 	bl	8000d28 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e066      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x530>
 8001aa2:	e05e      	b.n	8001b62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa4:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a30      	ldr	r2, [pc, #192]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f93a 	bl	8000d28 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff f936 	bl	8000d28 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e04c      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aca:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	4924      	ldr	r1, [pc, #144]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <HAL_RCC_OscConfig+0x620>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60cb      	str	r3, [r1, #12]
 8001ae2:	e03e      	b.n	8001b62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e039      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_RCC_OscConfig+0x618>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d12c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d123      	bne.n	8001b5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d11b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d113      	bne.n	8001b5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b54:	085b      	lsrs	r3, r3, #1
 8001b56:	3b01      	subs	r3, #1
 8001b58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	019f800c 	.word	0x019f800c
 8001b74:	feeefffc 	.word	0xfeeefffc

08001b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e11e      	b.n	8001dce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b90:	4b91      	ldr	r3, [pc, #580]	; (8001dd8 <HAL_RCC_ClockConfig+0x260>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d910      	bls.n	8001bc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b8e      	ldr	r3, [pc, #568]	; (8001dd8 <HAL_RCC_ClockConfig+0x260>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 020f 	bic.w	r2, r3, #15
 8001ba6:	498c      	ldr	r1, [pc, #560]	; (8001dd8 <HAL_RCC_ClockConfig+0x260>)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b8a      	ldr	r3, [pc, #552]	; (8001dd8 <HAL_RCC_ClockConfig+0x260>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e106      	b.n	8001dce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d073      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d129      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd4:	4b81      	ldr	r3, [pc, #516]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0f4      	b.n	8001dce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001be4:	f000 f99e 	bl	8001f24 <RCC_GetSysClockFreqFromPLLSource>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4a7c      	ldr	r2, [pc, #496]	; (8001de0 <HAL_RCC_ClockConfig+0x268>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d93f      	bls.n	8001c72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bf2:	4b7a      	ldr	r3, [pc, #488]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d033      	beq.n	8001c72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d12f      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c12:	4b72      	ldr	r3, [pc, #456]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c1a:	4a70      	ldr	r2, [pc, #448]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e024      	b.n	8001c72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c30:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0c6      	b.n	8001dce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c40:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0be      	b.n	8001dce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c50:	f000 f8ce 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4a61      	ldr	r2, [pc, #388]	; (8001de0 <HAL_RCC_ClockConfig+0x268>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d909      	bls.n	8001c72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c5e:	4b5f      	ldr	r3, [pc, #380]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c66:	4a5d      	ldr	r2, [pc, #372]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4957      	ldr	r1, [pc, #348]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c84:	f7ff f850 	bl	8000d28 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff f84c 	bl	8000d28 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e095      	b.n	8001dce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b4e      	ldr	r3, [pc, #312]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d023      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ccc:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a42      	ldr	r2, [pc, #264]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001cd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cd6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d007      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ce4:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001cec:	4a3b      	ldr	r2, [pc, #236]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001cee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf4:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4936      	ldr	r1, [pc, #216]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2b80      	cmp	r3, #128	; 0x80
 8001d0c:	d105      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4a32      	ldr	r2, [pc, #200]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_RCC_ClockConfig+0x260>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d21d      	bcs.n	8001d64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 020f 	bic.w	r2, r3, #15
 8001d30:	4929      	ldr	r1, [pc, #164]	; (8001dd8 <HAL_RCC_ClockConfig+0x260>)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d38:	f7fe fff6 	bl	8000d28 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7fe fff2 	bl	8000d28 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e03b      	b.n	8001dce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_ClockConfig+0x260>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d1ed      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4917      	ldr	r1, [pc, #92]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	490f      	ldr	r1, [pc, #60]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001da2:	f000 f825 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_RCC_ClockConfig+0x264>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	490c      	ldr	r1, [pc, #48]	; (8001de4 <HAL_RCC_ClockConfig+0x26c>)
 8001db4:	5ccb      	ldrb	r3, [r1, r3]
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_RCC_ClockConfig+0x270>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_RCC_ClockConfig+0x274>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe ff62 	bl	8000c90 <HAL_InitTick>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	04c4b400 	.word	0x04c4b400
 8001de4:	080044ec 	.word	0x080044ec
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d102      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e02:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	e047      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d102      	bne.n	8001e1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	e03e      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e1a:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b0c      	cmp	r3, #12
 8001e24:	d136      	bne.n	8001e94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e44:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4e:	68d2      	ldr	r2, [r2, #12]
 8001e50:	0a12      	lsrs	r2, r2, #8
 8001e52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	617b      	str	r3, [r7, #20]
      break;
 8001e5c:	e00c      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e5e:	4a13      	ldr	r2, [pc, #76]	; (8001eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e68:	68d2      	ldr	r2, [r2, #12]
 8001e6a:	0a12      	lsrs	r2, r2, #8
 8001e6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e70:	fb02 f303 	mul.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
      break;
 8001e76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0e5b      	lsrs	r3, r3, #25
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	3301      	adds	r3, #1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	e001      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e98:	693b      	ldr	r3, [r7, #16]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	00f42400 	.word	0x00f42400
 8001eb0:	016e3600 	.word	0x016e3600

08001eb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000000 	.word	0x20000000

08001ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ed0:	f7ff fff0 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4904      	ldr	r1, [pc, #16]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	080044fc 	.word	0x080044fc

08001ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001efc:	f7ff ffda 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0adb      	lsrs	r3, r3, #11
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4904      	ldr	r1, [pc, #16]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	080044fc 	.word	0x080044fc

08001f24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d10c      	bne.n	8001f62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f52:	68d2      	ldr	r2, [r2, #12]
 8001f54:	0a12      	lsrs	r2, r2, #8
 8001f56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
    break;
 8001f60:	e00c      	b.n	8001f7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6c:	68d2      	ldr	r2, [r2, #12]
 8001f6e:	0a12      	lsrs	r2, r2, #8
 8001f70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
    break;
 8001f7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0e5b      	lsrs	r3, r3, #25
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	3301      	adds	r3, #1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f96:	687b      	ldr	r3, [r7, #4]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	016e3600 	.word	0x016e3600
 8001fac:	00f42400 	.word	0x00f42400

08001fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 8098 	beq.w	80020fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	4a3f      	ldr	r2, [pc, #252]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a39      	ldr	r2, [pc, #228]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002006:	f7fe fe8f 	bl	8000d28 <HAL_GetTick>
 800200a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800200c:	e009      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7fe fe8b 	bl	8000d28 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d902      	bls.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	74fb      	strb	r3, [r7, #19]
        break;
 8002020:	e005      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ef      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d159      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01e      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	d019      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800207c:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7fe fe4b 	bl	8000d28 <HAL_GetTick>
 8002092:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002094:	e00b      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe fe47 	bl	8000d28 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d902      	bls.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	74fb      	strb	r3, [r7, #19]
            break;
 80020ac:	e006      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ec      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10b      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d0:	4903      	ldr	r1, [pc, #12]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020d8:	e008      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	74bb      	strb	r3, [r7, #18]
 80020de:	e005      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ec:	7c7b      	ldrb	r3, [r7, #17]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d105      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f2:	4ba7      	ldr	r3, [pc, #668]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f6:	4aa6      	ldr	r2, [pc, #664]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800210a:	4ba1      	ldr	r3, [pc, #644]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002110:	f023 0203 	bic.w	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	499d      	ldr	r1, [pc, #628]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800212c:	4b98      	ldr	r3, [pc, #608]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f023 020c 	bic.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4995      	ldr	r1, [pc, #596]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800214e:	4b90      	ldr	r3, [pc, #576]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002154:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	498c      	ldr	r1, [pc, #560]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002170:	4b87      	ldr	r3, [pc, #540]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	4984      	ldr	r1, [pc, #528]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002192:	4b7f      	ldr	r3, [pc, #508]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	497b      	ldr	r1, [pc, #492]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021b4:	4b76      	ldr	r3, [pc, #472]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4973      	ldr	r1, [pc, #460]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d6:	4b6e      	ldr	r3, [pc, #440]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	496a      	ldr	r1, [pc, #424]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021f8:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4962      	ldr	r1, [pc, #392]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800221a:	4b5d      	ldr	r3, [pc, #372]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	4959      	ldr	r1, [pc, #356]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800223c:	4b54      	ldr	r3, [pc, #336]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002242:	f023 0203 	bic.w	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	4951      	ldr	r1, [pc, #324]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800225e:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	4948      	ldr	r1, [pc, #288]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002280:	4b43      	ldr	r3, [pc, #268]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4940      	ldr	r1, [pc, #256]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800229e:	d105      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a0:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022b8:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	4932      	ldr	r1, [pc, #200]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d6:	d105      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d8:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a2c      	ldr	r2, [pc, #176]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d015      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	4924      	ldr	r1, [pc, #144]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230e:	d105      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a1e      	ldr	r2, [pc, #120]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800231a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	4916      	ldr	r1, [pc, #88]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002346:	d105      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a10      	ldr	r2, [pc, #64]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002352:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d019      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4908      	ldr	r1, [pc, #32]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800237e:	d109      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a02      	ldr	r2, [pc, #8]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800238a:	60d3      	str	r3, [r2, #12]
 800238c:	e002      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d015      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4926      	ldr	r1, [pc, #152]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023be:	d105      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d015      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e6:	4918      	ldr	r1, [pc, #96]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f6:	d105      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a12      	ldr	r2, [pc, #72]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002402:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d015      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002416:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	490a      	ldr	r1, [pc, #40]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800242e:	d105      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800243c:	7cbb      	ldrb	r3, [r7, #18]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000

0800244c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e09d      	b.n	800259a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	2b00      	cmp	r3, #0
 8002464:	d108      	bne.n	8002478 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800246e:	d009      	beq.n	8002484 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	61da      	str	r2, [r3, #28]
 8002476:	e005      	b.n	8002484 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fae4 	bl	8000a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024c4:	d902      	bls.n	80024cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	e002      	b.n	80024d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80024da:	d007      	beq.n	80024ec <HAL_SPI_Init+0xa0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024e4:	d002      	beq.n	80024ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	ea42 0103 	orr.w	r1, r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	0c1b      	lsrs	r3, r3, #16
 8002548:	f003 0204 	and.w	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002568:	ea42 0103 	orr.w	r1, r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69da      	ldr	r2, [r3, #28]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002588:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b088      	sub	sp, #32
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_SPI_Transmit+0x22>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e15f      	b.n	8002884 <HAL_SPI_Transmit+0x2e2>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025cc:	f7fe fbac 	bl	8000d28 <HAL_GetTick>
 80025d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d002      	beq.n	80025e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025e6:	e148      	b.n	800287a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_SPI_Transmit+0x52>
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025f8:	e13f      	b.n	800287a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2203      	movs	r2, #3
 80025fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	88fa      	ldrh	r2, [r7, #6]
 8002612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	88fa      	ldrh	r2, [r7, #6]
 8002618:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002644:	d10f      	bne.n	8002666 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002664:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d007      	beq.n	8002684 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800268c:	d94f      	bls.n	800272e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_SPI_Transmit+0xfa>
 8002696:	8afb      	ldrh	r3, [r7, #22]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d142      	bne.n	8002722 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	881a      	ldrh	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	1c9a      	adds	r2, r3, #2
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026c0:	e02f      	b.n	8002722 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d112      	bne.n	80026f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	881a      	ldrh	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	1c9a      	adds	r2, r3, #2
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026f4:	e015      	b.n	8002722 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f6:	f7fe fb17 	bl	8000d28 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d803      	bhi.n	800270e <HAL_SPI_Transmit+0x16c>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d102      	bne.n	8002714 <HAL_SPI_Transmit+0x172>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d106      	bne.n	8002722 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002720:	e0ab      	b.n	800287a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ca      	bne.n	80026c2 <HAL_SPI_Transmit+0x120>
 800272c:	e080      	b.n	8002830 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <HAL_SPI_Transmit+0x19a>
 8002736:	8afb      	ldrh	r3, [r7, #22]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d174      	bne.n	8002826 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d912      	bls.n	800276c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	881a      	ldrh	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	1c9a      	adds	r2, r3, #2
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b02      	subs	r3, #2
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	87da      	strh	r2, [r3, #62]	; 0x3e
 800276a:	e05c      	b.n	8002826 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	7812      	ldrb	r2, [r2, #0]
 8002778:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002792:	e048      	b.n	8002826 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d12b      	bne.n	80027fa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d912      	bls.n	80027d2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	1c9a      	adds	r2, r3, #2
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b02      	subs	r3, #2
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027d0:	e029      	b.n	8002826 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027f8:	e015      	b.n	8002826 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027fa:	f7fe fa95 	bl	8000d28 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d803      	bhi.n	8002812 <HAL_SPI_Transmit+0x270>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d102      	bne.n	8002818 <HAL_SPI_Transmit+0x276>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d106      	bne.n	8002826 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002824:	e029      	b.n	800287a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1b1      	bne.n	8002794 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	6839      	ldr	r1, [r7, #0]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fa5b 	bl	8002cf0 <SPI_EndRxTxTransaction>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10a      	bne.n	8002864 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	77fb      	strb	r3, [r7, #31]
 8002870:	e003      	b.n	800287a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002882:	7ffb      	ldrb	r3, [r7, #31]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10e      	bne.n	80028cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d009      	beq.n	80028cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d004      	beq.n	80028cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
    return;
 80028ca:	e0ce      	b.n	8002a6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_SPI_IRQHandler+0x5e>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
    return;
 80028e8:	e0bf      	b.n	8002a6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <HAL_SPI_IRQHandler+0x7e>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80b0 	beq.w	8002a6a <HAL_SPI_IRQHandler+0x1de>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80aa 	beq.w	8002a6a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d023      	beq.n	8002968 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b03      	cmp	r3, #3
 800292a:	d011      	beq.n	8002950 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002930:	f043 0204 	orr.w	r2, r3, #4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	e00b      	b.n	8002968 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
        return;
 8002966:	e080      	b.n	8002a6a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d014      	beq.n	800299c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	f043 0201 	orr.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	f043 0208 	orr.w	r2, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d04f      	beq.n	8002a68 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d104      	bne.n	80029f4 <HAL_SPI_IRQHandler+0x168>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d034      	beq.n	8002a5e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0203 	bic.w	r2, r2, #3
 8002a02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d011      	beq.n	8002a30 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_SPI_IRQHandler+0x1e4>)
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe fac2 	bl	8000fa2 <HAL_DMA_Abort_IT>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d016      	beq.n	8002a66 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3c:	4a0c      	ldr	r2, [pc, #48]	; (8002a70 <HAL_SPI_IRQHandler+0x1e4>)
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe faac 	bl	8000fa2 <HAL_DMA_Abort_IT>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002a5c:	e003      	b.n	8002a66 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f808 	bl	8002a74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002a64:	e000      	b.n	8002a68 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002a66:	bf00      	nop
    return;
 8002a68:	bf00      	nop
  }
}
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	08002a89 	.word	0x08002a89

08002a74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff ffe5 	bl	8002a74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ac4:	f7fe f930 	bl	8000d28 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ad4:	f7fe f928 	bl	8000d28 <HAL_GetTick>
 8002ad8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	015b      	lsls	r3, r3, #5
 8002ae0:	0d1b      	lsrs	r3, r3, #20
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aea:	e054      	b.n	8002b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af2:	d050      	beq.n	8002b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002af4:	f7fe f918 	bl	8000d28 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d902      	bls.n	8002b0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d13d      	bne.n	8002b86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b22:	d111      	bne.n	8002b48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2c:	d004      	beq.n	8002b38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b36:	d107      	bne.n	8002b48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b50:	d10f      	bne.n	8002b72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e017      	b.n	8002bb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	bf0c      	ite	eq
 8002ba6:	2301      	moveq	r3, #1
 8002ba8:	2300      	movne	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d19b      	bne.n	8002aec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002bd6:	f7fe f8a7 	bl	8000d28 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002be6:	f7fe f89f 	bl	8000d28 <HAL_GetTick>
 8002bea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002bf4:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00da      	lsls	r2, r3, #3
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	0d1b      	lsrs	r3, r3, #20
 8002c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c0c:	e060      	b.n	8002cd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c14:	d107      	bne.n	8002c26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d050      	beq.n	8002cd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c2e:	f7fe f87b 	bl	8000d28 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d902      	bls.n	8002c44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d13d      	bne.n	8002cc0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c5c:	d111      	bne.n	8002c82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c66:	d004      	beq.n	8002c72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	d107      	bne.n	8002c82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8a:	d10f      	bne.n	8002cac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002caa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e010      	b.n	8002ce2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d196      	bne.n	8002c0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3728      	adds	r7, #40	; 0x28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000000 	.word	0x20000000

08002cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f7ff ff5b 	bl	8002bc4 <SPI_WaitFifoStateUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e027      	b.n	8002d74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7ff fec0 	bl	8002ab4 <SPI_WaitFlagStateUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3e:	f043 0220 	orr.w	r2, r3, #32
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e014      	b.n	8002d74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff ff34 	bl	8002bc4 <SPI_WaitFifoStateUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d66:	f043 0220 	orr.w	r2, r3, #32
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e000      	b.n	8002d74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e042      	b.n	8002e14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fd fe0b 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2224      	movs	r2, #36	; 0x24
 8002daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fbb2 	bl	8003530 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f8b3 	bl	8002f38 <UART_SetConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e01b      	b.n	8002e14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fc31 	bl	8003674 <UART_CheckIdleState>
 8002e12:	4603      	mov	r3, r0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d17b      	bne.n	8002f2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_UART_Transmit+0x26>
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e074      	b.n	8002f30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e56:	f7fd ff67 	bl	8000d28 <HAL_GetTick>
 8002e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e74:	d108      	bne.n	8002e88 <HAL_UART_Transmit+0x6c>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e003      	b.n	8002e90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e90:	e030      	b.n	8002ef4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fc93 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e03d      	b.n	8002f30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	3302      	adds	r3, #2
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e007      	b.n	8002ee2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1c8      	bne.n	8002e92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2200      	movs	r2, #0
 8002f08:	2140      	movs	r1, #64	; 0x40
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fc5c 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e006      	b.n	8002f30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e000      	b.n	8002f30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
  }
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f3c:	b08c      	sub	sp, #48	; 0x30
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4baa      	ldr	r3, [pc, #680]	; (8003210 <UART_SetConfig+0x2d8>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a9f      	ldr	r2, [pc, #636]	; (8003214 <UART_SetConfig+0x2dc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002fae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	f023 010f 	bic.w	r1, r3, #15
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a90      	ldr	r2, [pc, #576]	; (8003218 <UART_SetConfig+0x2e0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d125      	bne.n	8003028 <UART_SetConfig+0xf0>
 8002fdc:	4b8f      	ldr	r3, [pc, #572]	; (800321c <UART_SetConfig+0x2e4>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d81a      	bhi.n	8003020 <UART_SetConfig+0xe8>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <UART_SetConfig+0xb8>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	08003001 	.word	0x08003001
 8002ff4:	08003011 	.word	0x08003011
 8002ff8:	08003009 	.word	0x08003009
 8002ffc:	08003019 	.word	0x08003019
 8003000:	2301      	movs	r3, #1
 8003002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003006:	e116      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003008:	2302      	movs	r3, #2
 800300a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800300e:	e112      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003010:	2304      	movs	r3, #4
 8003012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003016:	e10e      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003018:	2308      	movs	r3, #8
 800301a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800301e:	e10a      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003020:	2310      	movs	r3, #16
 8003022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003026:	e106      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a7c      	ldr	r2, [pc, #496]	; (8003220 <UART_SetConfig+0x2e8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d138      	bne.n	80030a4 <UART_SetConfig+0x16c>
 8003032:	4b7a      	ldr	r3, [pc, #488]	; (800321c <UART_SetConfig+0x2e4>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d82d      	bhi.n	800309c <UART_SetConfig+0x164>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x110>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800307d 	.word	0x0800307d
 800304c:	0800309d 	.word	0x0800309d
 8003050:	0800309d 	.word	0x0800309d
 8003054:	0800309d 	.word	0x0800309d
 8003058:	0800308d 	.word	0x0800308d
 800305c:	0800309d 	.word	0x0800309d
 8003060:	0800309d 	.word	0x0800309d
 8003064:	0800309d 	.word	0x0800309d
 8003068:	08003085 	.word	0x08003085
 800306c:	0800309d 	.word	0x0800309d
 8003070:	0800309d 	.word	0x0800309d
 8003074:	0800309d 	.word	0x0800309d
 8003078:	08003095 	.word	0x08003095
 800307c:	2300      	movs	r3, #0
 800307e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003082:	e0d8      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003084:	2302      	movs	r3, #2
 8003086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800308a:	e0d4      	b.n	8003236 <UART_SetConfig+0x2fe>
 800308c:	2304      	movs	r3, #4
 800308e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003092:	e0d0      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003094:	2308      	movs	r3, #8
 8003096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800309a:	e0cc      	b.n	8003236 <UART_SetConfig+0x2fe>
 800309c:	2310      	movs	r3, #16
 800309e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030a2:	e0c8      	b.n	8003236 <UART_SetConfig+0x2fe>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a5e      	ldr	r2, [pc, #376]	; (8003224 <UART_SetConfig+0x2ec>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d125      	bne.n	80030fa <UART_SetConfig+0x1c2>
 80030ae:	4b5b      	ldr	r3, [pc, #364]	; (800321c <UART_SetConfig+0x2e4>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030b8:	2b30      	cmp	r3, #48	; 0x30
 80030ba:	d016      	beq.n	80030ea <UART_SetConfig+0x1b2>
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d818      	bhi.n	80030f2 <UART_SetConfig+0x1ba>
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d00a      	beq.n	80030da <UART_SetConfig+0x1a2>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d814      	bhi.n	80030f2 <UART_SetConfig+0x1ba>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <UART_SetConfig+0x19a>
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d008      	beq.n	80030e2 <UART_SetConfig+0x1aa>
 80030d0:	e00f      	b.n	80030f2 <UART_SetConfig+0x1ba>
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d8:	e0ad      	b.n	8003236 <UART_SetConfig+0x2fe>
 80030da:	2302      	movs	r3, #2
 80030dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e0:	e0a9      	b.n	8003236 <UART_SetConfig+0x2fe>
 80030e2:	2304      	movs	r3, #4
 80030e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e8:	e0a5      	b.n	8003236 <UART_SetConfig+0x2fe>
 80030ea:	2308      	movs	r3, #8
 80030ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f0:	e0a1      	b.n	8003236 <UART_SetConfig+0x2fe>
 80030f2:	2310      	movs	r3, #16
 80030f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f8:	e09d      	b.n	8003236 <UART_SetConfig+0x2fe>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <UART_SetConfig+0x2f0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d125      	bne.n	8003150 <UART_SetConfig+0x218>
 8003104:	4b45      	ldr	r3, [pc, #276]	; (800321c <UART_SetConfig+0x2e4>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800310e:	2bc0      	cmp	r3, #192	; 0xc0
 8003110:	d016      	beq.n	8003140 <UART_SetConfig+0x208>
 8003112:	2bc0      	cmp	r3, #192	; 0xc0
 8003114:	d818      	bhi.n	8003148 <UART_SetConfig+0x210>
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	d00a      	beq.n	8003130 <UART_SetConfig+0x1f8>
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d814      	bhi.n	8003148 <UART_SetConfig+0x210>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <UART_SetConfig+0x1f0>
 8003122:	2b40      	cmp	r3, #64	; 0x40
 8003124:	d008      	beq.n	8003138 <UART_SetConfig+0x200>
 8003126:	e00f      	b.n	8003148 <UART_SetConfig+0x210>
 8003128:	2300      	movs	r3, #0
 800312a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800312e:	e082      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003130:	2302      	movs	r3, #2
 8003132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003136:	e07e      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003138:	2304      	movs	r3, #4
 800313a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800313e:	e07a      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003140:	2308      	movs	r3, #8
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003146:	e076      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003148:	2310      	movs	r3, #16
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314e:	e072      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a35      	ldr	r2, [pc, #212]	; (800322c <UART_SetConfig+0x2f4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d12a      	bne.n	80031b0 <UART_SetConfig+0x278>
 800315a:	4b30      	ldr	r3, [pc, #192]	; (800321c <UART_SetConfig+0x2e4>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003168:	d01a      	beq.n	80031a0 <UART_SetConfig+0x268>
 800316a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800316e:	d81b      	bhi.n	80031a8 <UART_SetConfig+0x270>
 8003170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003174:	d00c      	beq.n	8003190 <UART_SetConfig+0x258>
 8003176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317a:	d815      	bhi.n	80031a8 <UART_SetConfig+0x270>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <UART_SetConfig+0x250>
 8003180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003184:	d008      	beq.n	8003198 <UART_SetConfig+0x260>
 8003186:	e00f      	b.n	80031a8 <UART_SetConfig+0x270>
 8003188:	2300      	movs	r3, #0
 800318a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318e:	e052      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003190:	2302      	movs	r3, #2
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003196:	e04e      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003198:	2304      	movs	r3, #4
 800319a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800319e:	e04a      	b.n	8003236 <UART_SetConfig+0x2fe>
 80031a0:	2308      	movs	r3, #8
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031a6:	e046      	b.n	8003236 <UART_SetConfig+0x2fe>
 80031a8:	2310      	movs	r3, #16
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ae:	e042      	b.n	8003236 <UART_SetConfig+0x2fe>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a17      	ldr	r2, [pc, #92]	; (8003214 <UART_SetConfig+0x2dc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d13a      	bne.n	8003230 <UART_SetConfig+0x2f8>
 80031ba:	4b18      	ldr	r3, [pc, #96]	; (800321c <UART_SetConfig+0x2e4>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031c8:	d01a      	beq.n	8003200 <UART_SetConfig+0x2c8>
 80031ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031ce:	d81b      	bhi.n	8003208 <UART_SetConfig+0x2d0>
 80031d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d4:	d00c      	beq.n	80031f0 <UART_SetConfig+0x2b8>
 80031d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031da:	d815      	bhi.n	8003208 <UART_SetConfig+0x2d0>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <UART_SetConfig+0x2b0>
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e4:	d008      	beq.n	80031f8 <UART_SetConfig+0x2c0>
 80031e6:	e00f      	b.n	8003208 <UART_SetConfig+0x2d0>
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ee:	e022      	b.n	8003236 <UART_SetConfig+0x2fe>
 80031f0:	2302      	movs	r3, #2
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031f6:	e01e      	b.n	8003236 <UART_SetConfig+0x2fe>
 80031f8:	2304      	movs	r3, #4
 80031fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031fe:	e01a      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003200:	2308      	movs	r3, #8
 8003202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003206:	e016      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003208:	2310      	movs	r3, #16
 800320a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800320e:	e012      	b.n	8003236 <UART_SetConfig+0x2fe>
 8003210:	cfff69f3 	.word	0xcfff69f3
 8003214:	40008000 	.word	0x40008000
 8003218:	40013800 	.word	0x40013800
 800321c:	40021000 	.word	0x40021000
 8003220:	40004400 	.word	0x40004400
 8003224:	40004800 	.word	0x40004800
 8003228:	40004c00 	.word	0x40004c00
 800322c:	40005000 	.word	0x40005000
 8003230:	2310      	movs	r3, #16
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4aae      	ldr	r2, [pc, #696]	; (80034f4 <UART_SetConfig+0x5bc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	f040 8097 	bne.w	8003370 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003242:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003246:	2b08      	cmp	r3, #8
 8003248:	d823      	bhi.n	8003292 <UART_SetConfig+0x35a>
 800324a:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <UART_SetConfig+0x318>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	08003275 	.word	0x08003275
 8003254:	08003293 	.word	0x08003293
 8003258:	0800327d 	.word	0x0800327d
 800325c:	08003293 	.word	0x08003293
 8003260:	08003283 	.word	0x08003283
 8003264:	08003293 	.word	0x08003293
 8003268:	08003293 	.word	0x08003293
 800326c:	08003293 	.word	0x08003293
 8003270:	0800328b 	.word	0x0800328b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003274:	f7fe fe2a 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8003278:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800327a:	e010      	b.n	800329e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800327c:	4b9e      	ldr	r3, [pc, #632]	; (80034f8 <UART_SetConfig+0x5c0>)
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003280:	e00d      	b.n	800329e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003282:	f7fe fdb5 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8003286:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003288:	e009      	b.n	800329e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800328a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003290:	e005      	b.n	800329e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800329c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8130 	beq.w	8003506 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	4a94      	ldr	r2, [pc, #592]	; (80034fc <UART_SetConfig+0x5c4>)
 80032ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032b0:	461a      	mov	r2, r3
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d305      	bcc.n	80032d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d903      	bls.n	80032de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80032dc:	e113      	b.n	8003506 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	2200      	movs	r2, #0
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	60fa      	str	r2, [r7, #12]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	4a84      	ldr	r2, [pc, #528]	; (80034fc <UART_SetConfig+0x5c4>)
 80032ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2200      	movs	r2, #0
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003300:	f7fc ffde 	bl	80002c0 <__aeabi_uldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	020b      	lsls	r3, r1, #8
 8003316:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800331a:	0202      	lsls	r2, r0, #8
 800331c:	6979      	ldr	r1, [r7, #20]
 800331e:	6849      	ldr	r1, [r1, #4]
 8003320:	0849      	lsrs	r1, r1, #1
 8003322:	2000      	movs	r0, #0
 8003324:	460c      	mov	r4, r1
 8003326:	4605      	mov	r5, r0
 8003328:	eb12 0804 	adds.w	r8, r2, r4
 800332c:	eb43 0905 	adc.w	r9, r3, r5
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	469a      	mov	sl, r3
 8003338:	4693      	mov	fp, r2
 800333a:	4652      	mov	r2, sl
 800333c:	465b      	mov	r3, fp
 800333e:	4640      	mov	r0, r8
 8003340:	4649      	mov	r1, r9
 8003342:	f7fc ffbd 	bl	80002c0 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4613      	mov	r3, r2
 800334c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003354:	d308      	bcc.n	8003368 <UART_SetConfig+0x430>
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800335c:	d204      	bcs.n	8003368 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a3a      	ldr	r2, [r7, #32]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	e0ce      	b.n	8003506 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800336e:	e0ca      	b.n	8003506 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003378:	d166      	bne.n	8003448 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800337a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800337e:	2b08      	cmp	r3, #8
 8003380:	d827      	bhi.n	80033d2 <UART_SetConfig+0x49a>
 8003382:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <UART_SetConfig+0x450>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080033b5 	.word	0x080033b5
 8003390:	080033bd 	.word	0x080033bd
 8003394:	080033d3 	.word	0x080033d3
 8003398:	080033c3 	.word	0x080033c3
 800339c:	080033d3 	.word	0x080033d3
 80033a0:	080033d3 	.word	0x080033d3
 80033a4:	080033d3 	.word	0x080033d3
 80033a8:	080033cb 	.word	0x080033cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ac:	f7fe fd8e 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 80033b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033b2:	e014      	b.n	80033de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b4:	f7fe fda0 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 80033b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033ba:	e010      	b.n	80033de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033bc:	4b4e      	ldr	r3, [pc, #312]	; (80034f8 <UART_SetConfig+0x5c0>)
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033c0:	e00d      	b.n	80033de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c2:	f7fe fd15 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 80033c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033c8:	e009      	b.n	80033de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033d0:	e005      	b.n	80033de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8090 	beq.w	8003506 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	4a44      	ldr	r2, [pc, #272]	; (80034fc <UART_SetConfig+0x5c4>)
 80033ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f0:	461a      	mov	r2, r3
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80033f8:	005a      	lsls	r2, r3, #1
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	441a      	add	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	d916      	bls.n	8003440 <UART_SetConfig+0x508>
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d212      	bcs.n	8003440 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	b29b      	uxth	r3, r3
 800341e:	f023 030f 	bic.w	r3, r3, #15
 8003422:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	b29b      	uxth	r3, r3
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	b29a      	uxth	r2, r3
 8003430:	8bfb      	ldrh	r3, [r7, #30]
 8003432:	4313      	orrs	r3, r2
 8003434:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	8bfa      	ldrh	r2, [r7, #30]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	e062      	b.n	8003506 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003446:	e05e      	b.n	8003506 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003448:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800344c:	2b08      	cmp	r3, #8
 800344e:	d828      	bhi.n	80034a2 <UART_SetConfig+0x56a>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <UART_SetConfig+0x520>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	0800347d 	.word	0x0800347d
 800345c:	08003485 	.word	0x08003485
 8003460:	0800348d 	.word	0x0800348d
 8003464:	080034a3 	.word	0x080034a3
 8003468:	08003493 	.word	0x08003493
 800346c:	080034a3 	.word	0x080034a3
 8003470:	080034a3 	.word	0x080034a3
 8003474:	080034a3 	.word	0x080034a3
 8003478:	0800349b 	.word	0x0800349b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800347c:	f7fe fd26 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8003480:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003482:	e014      	b.n	80034ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003484:	f7fe fd38 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800348a:	e010      	b.n	80034ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <UART_SetConfig+0x5c0>)
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003490:	e00d      	b.n	80034ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003492:	f7fe fcad 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8003496:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003498:	e009      	b.n	80034ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800349a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034a0:	e005      	b.n	80034ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034ac:	bf00      	nop
    }

    if (pclk != 0U)
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d028      	beq.n	8003506 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	4a10      	ldr	r2, [pc, #64]	; (80034fc <UART_SetConfig+0x5c4>)
 80034ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034be:	461a      	mov	r2, r3
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	441a      	add	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2b0f      	cmp	r3, #15
 80034dc:	d910      	bls.n	8003500 <UART_SetConfig+0x5c8>
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e4:	d20c      	bcs.n	8003500 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60da      	str	r2, [r3, #12]
 80034f0:	e009      	b.n	8003506 <UART_SetConfig+0x5ce>
 80034f2:	bf00      	nop
 80034f4:	40008000 	.word	0x40008000
 80034f8:	00f42400 	.word	0x00f42400
 80034fc:	08004504 	.word	0x08004504
      }
      else
      {
        ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2201      	movs	r2, #1
 800350a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2201      	movs	r2, #1
 8003512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003522:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003526:	4618      	mov	r0, r3
 8003528:	3730      	adds	r7, #48	; 0x30
 800352a:	46bd      	mov	sp, r7
 800352c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01a      	beq.n	8003646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362e:	d10a      	bne.n	8003646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b098      	sub	sp, #96	; 0x60
 8003678:	af02      	add	r7, sp, #8
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003684:	f7fd fb50 	bl	8000d28 <HAL_GetTick>
 8003688:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d12f      	bne.n	80036f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003698:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a0:	2200      	movs	r2, #0
 80036a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f88e 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d022      	beq.n	80036f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c6:	653b      	str	r3, [r7, #80]	; 0x50
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d0:	647b      	str	r3, [r7, #68]	; 0x44
 80036d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e6      	bne.n	80036b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e063      	b.n	80037c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d149      	bne.n	800379a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003706:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800370e:	2200      	movs	r2, #0
 8003710:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f857 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d03c      	beq.n	800379a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	623b      	str	r3, [r7, #32]
   return(result);
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
 8003740:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e6      	bne.n	8003720 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3308      	adds	r3, #8
 8003758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	60fb      	str	r3, [r7, #12]
   return(result);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	64bb      	str	r3, [r7, #72]	; 0x48
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3308      	adds	r3, #8
 8003770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003772:	61fa      	str	r2, [r7, #28]
 8003774:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	69b9      	ldr	r1, [r7, #24]
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	617b      	str	r3, [r7, #20]
   return(result);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e5      	bne.n	8003752 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e012      	b.n	80037c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3758      	adds	r7, #88	; 0x58
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d8:	e04f      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d04b      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fd faa1 	bl	8000d28 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e04e      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d037      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d034      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b40      	cmp	r3, #64	; 0x40
 8003814:	d031      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d110      	bne.n	8003846 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2208      	movs	r2, #8
 800382a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f838 	bl	80038a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2208      	movs	r2, #8
 8003836:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e029      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003854:	d111      	bne.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800385e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f81e 	bl	80038a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e00f      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d0a0      	beq.n	80037da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b095      	sub	sp, #84	; 0x54
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c8:	643b      	str	r3, [r7, #64]	; 0x40
 80038ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e6      	bne.n	80038aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3308      	adds	r3, #8
 80038fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003900:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e3      	bne.n	80038dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d118      	bne.n	800394e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	60bb      	str	r3, [r7, #8]
   return(result);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f023 0310 	bic.w	r3, r3, #16
 8003930:	647b      	str	r3, [r7, #68]	; 0x44
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	6979      	ldr	r1, [r7, #20]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	613b      	str	r3, [r7, #16]
   return(result);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e6      	bne.n	800391c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003962:	bf00      	nop
 8003964:	3754      	adds	r7, #84	; 0x54
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_UARTEx_DisableFifoMode+0x16>
 8003980:	2302      	movs	r3, #2
 8003982:	e027      	b.n	80039d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80039b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e02d      	b.n	8003a54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	; 0x24
 8003a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f84f 	bl	8003ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e02d      	b.n	8003ad0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f811 	bl	8003ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d108      	bne.n	8003afa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003af8:	e031      	b.n	8003b5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003afa:	2308      	movs	r3, #8
 8003afc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003afe:	2308      	movs	r3, #8
 8003b00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	0e5b      	lsrs	r3, r3, #25
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	0f5b      	lsrs	r3, r3, #29
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b22:	7bbb      	ldrb	r3, [r7, #14]
 8003b24:	7b3a      	ldrb	r2, [r7, #12]
 8003b26:	4911      	ldr	r1, [pc, #68]	; (8003b6c <UARTEx_SetNbDataToProcess+0x94>)
 8003b28:	5c8a      	ldrb	r2, [r1, r2]
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b2e:	7b3a      	ldrb	r2, [r7, #12]
 8003b30:	490f      	ldr	r1, [pc, #60]	; (8003b70 <UARTEx_SetNbDataToProcess+0x98>)
 8003b32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	7b7a      	ldrb	r2, [r7, #13]
 8003b44:	4909      	ldr	r1, [pc, #36]	; (8003b6c <UARTEx_SetNbDataToProcess+0x94>)
 8003b46:	5c8a      	ldrb	r2, [r1, r2]
 8003b48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b4c:	7b7a      	ldrb	r2, [r7, #13]
 8003b4e:	4908      	ldr	r1, [pc, #32]	; (8003b70 <UARTEx_SetNbDataToProcess+0x98>)
 8003b50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	0800451c 	.word	0x0800451c
 8003b70:	08004524 	.word	0x08004524

08003b74 <siprintf>:
 8003b74:	b40e      	push	{r1, r2, r3}
 8003b76:	b500      	push	{lr}
 8003b78:	b09c      	sub	sp, #112	; 0x70
 8003b7a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b7c:	9002      	str	r0, [sp, #8]
 8003b7e:	9006      	str	r0, [sp, #24]
 8003b80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b84:	4809      	ldr	r0, [pc, #36]	; (8003bac <siprintf+0x38>)
 8003b86:	9107      	str	r1, [sp, #28]
 8003b88:	9104      	str	r1, [sp, #16]
 8003b8a:	4909      	ldr	r1, [pc, #36]	; (8003bb0 <siprintf+0x3c>)
 8003b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b90:	9105      	str	r1, [sp, #20]
 8003b92:	6800      	ldr	r0, [r0, #0]
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	a902      	add	r1, sp, #8
 8003b98:	f000 f992 	bl	8003ec0 <_svfiprintf_r>
 8003b9c:	9b02      	ldr	r3, [sp, #8]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	b01c      	add	sp, #112	; 0x70
 8003ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ba8:	b003      	add	sp, #12
 8003baa:	4770      	bx	lr
 8003bac:	20000058 	.word	0x20000058
 8003bb0:	ffff0208 	.word	0xffff0208

08003bb4 <memset>:
 8003bb4:	4402      	add	r2, r0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <__errno>:
 8003bc4:	4b01      	ldr	r3, [pc, #4]	; (8003bcc <__errno+0x8>)
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000058 	.word	0x20000058

08003bd0 <__libc_init_array>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	4d0d      	ldr	r5, [pc, #52]	; (8003c08 <__libc_init_array+0x38>)
 8003bd4:	4c0d      	ldr	r4, [pc, #52]	; (8003c0c <__libc_init_array+0x3c>)
 8003bd6:	1b64      	subs	r4, r4, r5
 8003bd8:	10a4      	asrs	r4, r4, #2
 8003bda:	2600      	movs	r6, #0
 8003bdc:	42a6      	cmp	r6, r4
 8003bde:	d109      	bne.n	8003bf4 <__libc_init_array+0x24>
 8003be0:	4d0b      	ldr	r5, [pc, #44]	; (8003c10 <__libc_init_array+0x40>)
 8003be2:	4c0c      	ldr	r4, [pc, #48]	; (8003c14 <__libc_init_array+0x44>)
 8003be4:	f000 fc6a 	bl	80044bc <_init>
 8003be8:	1b64      	subs	r4, r4, r5
 8003bea:	10a4      	asrs	r4, r4, #2
 8003bec:	2600      	movs	r6, #0
 8003bee:	42a6      	cmp	r6, r4
 8003bf0:	d105      	bne.n	8003bfe <__libc_init_array+0x2e>
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
 8003bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf8:	4798      	blx	r3
 8003bfa:	3601      	adds	r6, #1
 8003bfc:	e7ee      	b.n	8003bdc <__libc_init_array+0xc>
 8003bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c02:	4798      	blx	r3
 8003c04:	3601      	adds	r6, #1
 8003c06:	e7f2      	b.n	8003bee <__libc_init_array+0x1e>
 8003c08:	08004568 	.word	0x08004568
 8003c0c:	08004568 	.word	0x08004568
 8003c10:	08004568 	.word	0x08004568
 8003c14:	0800456c 	.word	0x0800456c

08003c18 <__retarget_lock_acquire_recursive>:
 8003c18:	4770      	bx	lr

08003c1a <__retarget_lock_release_recursive>:
 8003c1a:	4770      	bx	lr

08003c1c <_free_r>:
 8003c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c1e:	2900      	cmp	r1, #0
 8003c20:	d044      	beq.n	8003cac <_free_r+0x90>
 8003c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c26:	9001      	str	r0, [sp, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8003c2e:	bfb8      	it	lt
 8003c30:	18e4      	addlt	r4, r4, r3
 8003c32:	f000 f8df 	bl	8003df4 <__malloc_lock>
 8003c36:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <_free_r+0x94>)
 8003c38:	9801      	ldr	r0, [sp, #4]
 8003c3a:	6813      	ldr	r3, [r2, #0]
 8003c3c:	b933      	cbnz	r3, 8003c4c <_free_r+0x30>
 8003c3e:	6063      	str	r3, [r4, #4]
 8003c40:	6014      	str	r4, [r2, #0]
 8003c42:	b003      	add	sp, #12
 8003c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c48:	f000 b8da 	b.w	8003e00 <__malloc_unlock>
 8003c4c:	42a3      	cmp	r3, r4
 8003c4e:	d908      	bls.n	8003c62 <_free_r+0x46>
 8003c50:	6825      	ldr	r5, [r4, #0]
 8003c52:	1961      	adds	r1, r4, r5
 8003c54:	428b      	cmp	r3, r1
 8003c56:	bf01      	itttt	eq
 8003c58:	6819      	ldreq	r1, [r3, #0]
 8003c5a:	685b      	ldreq	r3, [r3, #4]
 8003c5c:	1949      	addeq	r1, r1, r5
 8003c5e:	6021      	streq	r1, [r4, #0]
 8003c60:	e7ed      	b.n	8003c3e <_free_r+0x22>
 8003c62:	461a      	mov	r2, r3
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	b10b      	cbz	r3, 8003c6c <_free_r+0x50>
 8003c68:	42a3      	cmp	r3, r4
 8003c6a:	d9fa      	bls.n	8003c62 <_free_r+0x46>
 8003c6c:	6811      	ldr	r1, [r2, #0]
 8003c6e:	1855      	adds	r5, r2, r1
 8003c70:	42a5      	cmp	r5, r4
 8003c72:	d10b      	bne.n	8003c8c <_free_r+0x70>
 8003c74:	6824      	ldr	r4, [r4, #0]
 8003c76:	4421      	add	r1, r4
 8003c78:	1854      	adds	r4, r2, r1
 8003c7a:	42a3      	cmp	r3, r4
 8003c7c:	6011      	str	r1, [r2, #0]
 8003c7e:	d1e0      	bne.n	8003c42 <_free_r+0x26>
 8003c80:	681c      	ldr	r4, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	6053      	str	r3, [r2, #4]
 8003c86:	440c      	add	r4, r1
 8003c88:	6014      	str	r4, [r2, #0]
 8003c8a:	e7da      	b.n	8003c42 <_free_r+0x26>
 8003c8c:	d902      	bls.n	8003c94 <_free_r+0x78>
 8003c8e:	230c      	movs	r3, #12
 8003c90:	6003      	str	r3, [r0, #0]
 8003c92:	e7d6      	b.n	8003c42 <_free_r+0x26>
 8003c94:	6825      	ldr	r5, [r4, #0]
 8003c96:	1961      	adds	r1, r4, r5
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	bf04      	itt	eq
 8003c9c:	6819      	ldreq	r1, [r3, #0]
 8003c9e:	685b      	ldreq	r3, [r3, #4]
 8003ca0:	6063      	str	r3, [r4, #4]
 8003ca2:	bf04      	itt	eq
 8003ca4:	1949      	addeq	r1, r1, r5
 8003ca6:	6021      	streq	r1, [r4, #0]
 8003ca8:	6054      	str	r4, [r2, #4]
 8003caa:	e7ca      	b.n	8003c42 <_free_r+0x26>
 8003cac:	b003      	add	sp, #12
 8003cae:	bd30      	pop	{r4, r5, pc}
 8003cb0:	200002bc 	.word	0x200002bc

08003cb4 <sbrk_aligned>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	4e0e      	ldr	r6, [pc, #56]	; (8003cf0 <sbrk_aligned+0x3c>)
 8003cb8:	460c      	mov	r4, r1
 8003cba:	6831      	ldr	r1, [r6, #0]
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	b911      	cbnz	r1, 8003cc6 <sbrk_aligned+0x12>
 8003cc0:	f000 fba6 	bl	8004410 <_sbrk_r>
 8003cc4:	6030      	str	r0, [r6, #0]
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 fba1 	bl	8004410 <_sbrk_r>
 8003cce:	1c43      	adds	r3, r0, #1
 8003cd0:	d00a      	beq.n	8003ce8 <sbrk_aligned+0x34>
 8003cd2:	1cc4      	adds	r4, r0, #3
 8003cd4:	f024 0403 	bic.w	r4, r4, #3
 8003cd8:	42a0      	cmp	r0, r4
 8003cda:	d007      	beq.n	8003cec <sbrk_aligned+0x38>
 8003cdc:	1a21      	subs	r1, r4, r0
 8003cde:	4628      	mov	r0, r5
 8003ce0:	f000 fb96 	bl	8004410 <_sbrk_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d101      	bne.n	8003cec <sbrk_aligned+0x38>
 8003ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8003cec:	4620      	mov	r0, r4
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	200002c0 	.word	0x200002c0

08003cf4 <_malloc_r>:
 8003cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cf8:	1ccd      	adds	r5, r1, #3
 8003cfa:	f025 0503 	bic.w	r5, r5, #3
 8003cfe:	3508      	adds	r5, #8
 8003d00:	2d0c      	cmp	r5, #12
 8003d02:	bf38      	it	cc
 8003d04:	250c      	movcc	r5, #12
 8003d06:	2d00      	cmp	r5, #0
 8003d08:	4607      	mov	r7, r0
 8003d0a:	db01      	blt.n	8003d10 <_malloc_r+0x1c>
 8003d0c:	42a9      	cmp	r1, r5
 8003d0e:	d905      	bls.n	8003d1c <_malloc_r+0x28>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	2600      	movs	r6, #0
 8003d16:	4630      	mov	r0, r6
 8003d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003df0 <_malloc_r+0xfc>
 8003d20:	f000 f868 	bl	8003df4 <__malloc_lock>
 8003d24:	f8d8 3000 	ldr.w	r3, [r8]
 8003d28:	461c      	mov	r4, r3
 8003d2a:	bb5c      	cbnz	r4, 8003d84 <_malloc_r+0x90>
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	4638      	mov	r0, r7
 8003d30:	f7ff ffc0 	bl	8003cb4 <sbrk_aligned>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	4604      	mov	r4, r0
 8003d38:	d155      	bne.n	8003de6 <_malloc_r+0xf2>
 8003d3a:	f8d8 4000 	ldr.w	r4, [r8]
 8003d3e:	4626      	mov	r6, r4
 8003d40:	2e00      	cmp	r6, #0
 8003d42:	d145      	bne.n	8003dd0 <_malloc_r+0xdc>
 8003d44:	2c00      	cmp	r4, #0
 8003d46:	d048      	beq.n	8003dda <_malloc_r+0xe6>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	eb04 0903 	add.w	r9, r4, r3
 8003d52:	f000 fb5d 	bl	8004410 <_sbrk_r>
 8003d56:	4581      	cmp	r9, r0
 8003d58:	d13f      	bne.n	8003dda <_malloc_r+0xe6>
 8003d5a:	6821      	ldr	r1, [r4, #0]
 8003d5c:	1a6d      	subs	r5, r5, r1
 8003d5e:	4629      	mov	r1, r5
 8003d60:	4638      	mov	r0, r7
 8003d62:	f7ff ffa7 	bl	8003cb4 <sbrk_aligned>
 8003d66:	3001      	adds	r0, #1
 8003d68:	d037      	beq.n	8003dda <_malloc_r+0xe6>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	442b      	add	r3, r5
 8003d6e:	6023      	str	r3, [r4, #0]
 8003d70:	f8d8 3000 	ldr.w	r3, [r8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d038      	beq.n	8003dea <_malloc_r+0xf6>
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	42a2      	cmp	r2, r4
 8003d7c:	d12b      	bne.n	8003dd6 <_malloc_r+0xe2>
 8003d7e:	2200      	movs	r2, #0
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	e00f      	b.n	8003da4 <_malloc_r+0xb0>
 8003d84:	6822      	ldr	r2, [r4, #0]
 8003d86:	1b52      	subs	r2, r2, r5
 8003d88:	d41f      	bmi.n	8003dca <_malloc_r+0xd6>
 8003d8a:	2a0b      	cmp	r2, #11
 8003d8c:	d917      	bls.n	8003dbe <_malloc_r+0xca>
 8003d8e:	1961      	adds	r1, r4, r5
 8003d90:	42a3      	cmp	r3, r4
 8003d92:	6025      	str	r5, [r4, #0]
 8003d94:	bf18      	it	ne
 8003d96:	6059      	strne	r1, [r3, #4]
 8003d98:	6863      	ldr	r3, [r4, #4]
 8003d9a:	bf08      	it	eq
 8003d9c:	f8c8 1000 	streq.w	r1, [r8]
 8003da0:	5162      	str	r2, [r4, r5]
 8003da2:	604b      	str	r3, [r1, #4]
 8003da4:	4638      	mov	r0, r7
 8003da6:	f104 060b 	add.w	r6, r4, #11
 8003daa:	f000 f829 	bl	8003e00 <__malloc_unlock>
 8003dae:	f026 0607 	bic.w	r6, r6, #7
 8003db2:	1d23      	adds	r3, r4, #4
 8003db4:	1af2      	subs	r2, r6, r3
 8003db6:	d0ae      	beq.n	8003d16 <_malloc_r+0x22>
 8003db8:	1b9b      	subs	r3, r3, r6
 8003dba:	50a3      	str	r3, [r4, r2]
 8003dbc:	e7ab      	b.n	8003d16 <_malloc_r+0x22>
 8003dbe:	42a3      	cmp	r3, r4
 8003dc0:	6862      	ldr	r2, [r4, #4]
 8003dc2:	d1dd      	bne.n	8003d80 <_malloc_r+0x8c>
 8003dc4:	f8c8 2000 	str.w	r2, [r8]
 8003dc8:	e7ec      	b.n	8003da4 <_malloc_r+0xb0>
 8003dca:	4623      	mov	r3, r4
 8003dcc:	6864      	ldr	r4, [r4, #4]
 8003dce:	e7ac      	b.n	8003d2a <_malloc_r+0x36>
 8003dd0:	4634      	mov	r4, r6
 8003dd2:	6876      	ldr	r6, [r6, #4]
 8003dd4:	e7b4      	b.n	8003d40 <_malloc_r+0x4c>
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	e7cc      	b.n	8003d74 <_malloc_r+0x80>
 8003dda:	230c      	movs	r3, #12
 8003ddc:	603b      	str	r3, [r7, #0]
 8003dde:	4638      	mov	r0, r7
 8003de0:	f000 f80e 	bl	8003e00 <__malloc_unlock>
 8003de4:	e797      	b.n	8003d16 <_malloc_r+0x22>
 8003de6:	6025      	str	r5, [r4, #0]
 8003de8:	e7dc      	b.n	8003da4 <_malloc_r+0xb0>
 8003dea:	605b      	str	r3, [r3, #4]
 8003dec:	deff      	udf	#255	; 0xff
 8003dee:	bf00      	nop
 8003df0:	200002bc 	.word	0x200002bc

08003df4 <__malloc_lock>:
 8003df4:	4801      	ldr	r0, [pc, #4]	; (8003dfc <__malloc_lock+0x8>)
 8003df6:	f7ff bf0f 	b.w	8003c18 <__retarget_lock_acquire_recursive>
 8003dfa:	bf00      	nop
 8003dfc:	200002b8 	.word	0x200002b8

08003e00 <__malloc_unlock>:
 8003e00:	4801      	ldr	r0, [pc, #4]	; (8003e08 <__malloc_unlock+0x8>)
 8003e02:	f7ff bf0a 	b.w	8003c1a <__retarget_lock_release_recursive>
 8003e06:	bf00      	nop
 8003e08:	200002b8 	.word	0x200002b8

08003e0c <__ssputs_r>:
 8003e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e10:	688e      	ldr	r6, [r1, #8]
 8003e12:	461f      	mov	r7, r3
 8003e14:	42be      	cmp	r6, r7
 8003e16:	680b      	ldr	r3, [r1, #0]
 8003e18:	4682      	mov	sl, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	4690      	mov	r8, r2
 8003e1e:	d82c      	bhi.n	8003e7a <__ssputs_r+0x6e>
 8003e20:	898a      	ldrh	r2, [r1, #12]
 8003e22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e26:	d026      	beq.n	8003e76 <__ssputs_r+0x6a>
 8003e28:	6965      	ldr	r5, [r4, #20]
 8003e2a:	6909      	ldr	r1, [r1, #16]
 8003e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e30:	eba3 0901 	sub.w	r9, r3, r1
 8003e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e38:	1c7b      	adds	r3, r7, #1
 8003e3a:	444b      	add	r3, r9
 8003e3c:	106d      	asrs	r5, r5, #1
 8003e3e:	429d      	cmp	r5, r3
 8003e40:	bf38      	it	cc
 8003e42:	461d      	movcc	r5, r3
 8003e44:	0553      	lsls	r3, r2, #21
 8003e46:	d527      	bpl.n	8003e98 <__ssputs_r+0x8c>
 8003e48:	4629      	mov	r1, r5
 8003e4a:	f7ff ff53 	bl	8003cf4 <_malloc_r>
 8003e4e:	4606      	mov	r6, r0
 8003e50:	b360      	cbz	r0, 8003eac <__ssputs_r+0xa0>
 8003e52:	6921      	ldr	r1, [r4, #16]
 8003e54:	464a      	mov	r2, r9
 8003e56:	f000 faeb 	bl	8004430 <memcpy>
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e64:	81a3      	strh	r3, [r4, #12]
 8003e66:	6126      	str	r6, [r4, #16]
 8003e68:	6165      	str	r5, [r4, #20]
 8003e6a:	444e      	add	r6, r9
 8003e6c:	eba5 0509 	sub.w	r5, r5, r9
 8003e70:	6026      	str	r6, [r4, #0]
 8003e72:	60a5      	str	r5, [r4, #8]
 8003e74:	463e      	mov	r6, r7
 8003e76:	42be      	cmp	r6, r7
 8003e78:	d900      	bls.n	8003e7c <__ssputs_r+0x70>
 8003e7a:	463e      	mov	r6, r7
 8003e7c:	6820      	ldr	r0, [r4, #0]
 8003e7e:	4632      	mov	r2, r6
 8003e80:	4641      	mov	r1, r8
 8003e82:	f000 faab 	bl	80043dc <memmove>
 8003e86:	68a3      	ldr	r3, [r4, #8]
 8003e88:	1b9b      	subs	r3, r3, r6
 8003e8a:	60a3      	str	r3, [r4, #8]
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	4433      	add	r3, r6
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	2000      	movs	r0, #0
 8003e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e98:	462a      	mov	r2, r5
 8003e9a:	f000 fad7 	bl	800444c <_realloc_r>
 8003e9e:	4606      	mov	r6, r0
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d1e0      	bne.n	8003e66 <__ssputs_r+0x5a>
 8003ea4:	6921      	ldr	r1, [r4, #16]
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	f7ff feb8 	bl	8003c1c <_free_r>
 8003eac:	230c      	movs	r3, #12
 8003eae:	f8ca 3000 	str.w	r3, [sl]
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb8:	81a3      	strh	r3, [r4, #12]
 8003eba:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebe:	e7e9      	b.n	8003e94 <__ssputs_r+0x88>

08003ec0 <_svfiprintf_r>:
 8003ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec4:	4698      	mov	r8, r3
 8003ec6:	898b      	ldrh	r3, [r1, #12]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	b09d      	sub	sp, #116	; 0x74
 8003ecc:	4607      	mov	r7, r0
 8003ece:	460d      	mov	r5, r1
 8003ed0:	4614      	mov	r4, r2
 8003ed2:	d50e      	bpl.n	8003ef2 <_svfiprintf_r+0x32>
 8003ed4:	690b      	ldr	r3, [r1, #16]
 8003ed6:	b963      	cbnz	r3, 8003ef2 <_svfiprintf_r+0x32>
 8003ed8:	2140      	movs	r1, #64	; 0x40
 8003eda:	f7ff ff0b 	bl	8003cf4 <_malloc_r>
 8003ede:	6028      	str	r0, [r5, #0]
 8003ee0:	6128      	str	r0, [r5, #16]
 8003ee2:	b920      	cbnz	r0, 8003eee <_svfiprintf_r+0x2e>
 8003ee4:	230c      	movs	r3, #12
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	e0d0      	b.n	8004090 <_svfiprintf_r+0x1d0>
 8003eee:	2340      	movs	r3, #64	; 0x40
 8003ef0:	616b      	str	r3, [r5, #20]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef6:	2320      	movs	r3, #32
 8003ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003efc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f00:	2330      	movs	r3, #48	; 0x30
 8003f02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80040a8 <_svfiprintf_r+0x1e8>
 8003f06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f0a:	f04f 0901 	mov.w	r9, #1
 8003f0e:	4623      	mov	r3, r4
 8003f10:	469a      	mov	sl, r3
 8003f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f16:	b10a      	cbz	r2, 8003f1c <_svfiprintf_r+0x5c>
 8003f18:	2a25      	cmp	r2, #37	; 0x25
 8003f1a:	d1f9      	bne.n	8003f10 <_svfiprintf_r+0x50>
 8003f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f20:	d00b      	beq.n	8003f3a <_svfiprintf_r+0x7a>
 8003f22:	465b      	mov	r3, fp
 8003f24:	4622      	mov	r2, r4
 8003f26:	4629      	mov	r1, r5
 8003f28:	4638      	mov	r0, r7
 8003f2a:	f7ff ff6f 	bl	8003e0c <__ssputs_r>
 8003f2e:	3001      	adds	r0, #1
 8003f30:	f000 80a9 	beq.w	8004086 <_svfiprintf_r+0x1c6>
 8003f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f36:	445a      	add	r2, fp
 8003f38:	9209      	str	r2, [sp, #36]	; 0x24
 8003f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 80a1 	beq.w	8004086 <_svfiprintf_r+0x1c6>
 8003f44:	2300      	movs	r3, #0
 8003f46:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f4e:	f10a 0a01 	add.w	sl, sl, #1
 8003f52:	9304      	str	r3, [sp, #16]
 8003f54:	9307      	str	r3, [sp, #28]
 8003f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f5c:	4654      	mov	r4, sl
 8003f5e:	2205      	movs	r2, #5
 8003f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f64:	4850      	ldr	r0, [pc, #320]	; (80040a8 <_svfiprintf_r+0x1e8>)
 8003f66:	f7fc f95b 	bl	8000220 <memchr>
 8003f6a:	9a04      	ldr	r2, [sp, #16]
 8003f6c:	b9d8      	cbnz	r0, 8003fa6 <_svfiprintf_r+0xe6>
 8003f6e:	06d0      	lsls	r0, r2, #27
 8003f70:	bf44      	itt	mi
 8003f72:	2320      	movmi	r3, #32
 8003f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f78:	0711      	lsls	r1, r2, #28
 8003f7a:	bf44      	itt	mi
 8003f7c:	232b      	movmi	r3, #43	; 0x2b
 8003f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f82:	f89a 3000 	ldrb.w	r3, [sl]
 8003f86:	2b2a      	cmp	r3, #42	; 0x2a
 8003f88:	d015      	beq.n	8003fb6 <_svfiprintf_r+0xf6>
 8003f8a:	9a07      	ldr	r2, [sp, #28]
 8003f8c:	4654      	mov	r4, sl
 8003f8e:	2000      	movs	r0, #0
 8003f90:	f04f 0c0a 	mov.w	ip, #10
 8003f94:	4621      	mov	r1, r4
 8003f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f9a:	3b30      	subs	r3, #48	; 0x30
 8003f9c:	2b09      	cmp	r3, #9
 8003f9e:	d94d      	bls.n	800403c <_svfiprintf_r+0x17c>
 8003fa0:	b1b0      	cbz	r0, 8003fd0 <_svfiprintf_r+0x110>
 8003fa2:	9207      	str	r2, [sp, #28]
 8003fa4:	e014      	b.n	8003fd0 <_svfiprintf_r+0x110>
 8003fa6:	eba0 0308 	sub.w	r3, r0, r8
 8003faa:	fa09 f303 	lsl.w	r3, r9, r3
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	9304      	str	r3, [sp, #16]
 8003fb2:	46a2      	mov	sl, r4
 8003fb4:	e7d2      	b.n	8003f5c <_svfiprintf_r+0x9c>
 8003fb6:	9b03      	ldr	r3, [sp, #12]
 8003fb8:	1d19      	adds	r1, r3, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	9103      	str	r1, [sp, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bfbb      	ittet	lt
 8003fc2:	425b      	neglt	r3, r3
 8003fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8003fc8:	9307      	strge	r3, [sp, #28]
 8003fca:	9307      	strlt	r3, [sp, #28]
 8003fcc:	bfb8      	it	lt
 8003fce:	9204      	strlt	r2, [sp, #16]
 8003fd0:	7823      	ldrb	r3, [r4, #0]
 8003fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8003fd4:	d10c      	bne.n	8003ff0 <_svfiprintf_r+0x130>
 8003fd6:	7863      	ldrb	r3, [r4, #1]
 8003fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8003fda:	d134      	bne.n	8004046 <_svfiprintf_r+0x186>
 8003fdc:	9b03      	ldr	r3, [sp, #12]
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	9203      	str	r2, [sp, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bfb8      	it	lt
 8003fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fec:	3402      	adds	r4, #2
 8003fee:	9305      	str	r3, [sp, #20]
 8003ff0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80040b8 <_svfiprintf_r+0x1f8>
 8003ff4:	7821      	ldrb	r1, [r4, #0]
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	4650      	mov	r0, sl
 8003ffa:	f7fc f911 	bl	8000220 <memchr>
 8003ffe:	b138      	cbz	r0, 8004010 <_svfiprintf_r+0x150>
 8004000:	9b04      	ldr	r3, [sp, #16]
 8004002:	eba0 000a 	sub.w	r0, r0, sl
 8004006:	2240      	movs	r2, #64	; 0x40
 8004008:	4082      	lsls	r2, r0
 800400a:	4313      	orrs	r3, r2
 800400c:	3401      	adds	r4, #1
 800400e:	9304      	str	r3, [sp, #16]
 8004010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004014:	4825      	ldr	r0, [pc, #148]	; (80040ac <_svfiprintf_r+0x1ec>)
 8004016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800401a:	2206      	movs	r2, #6
 800401c:	f7fc f900 	bl	8000220 <memchr>
 8004020:	2800      	cmp	r0, #0
 8004022:	d038      	beq.n	8004096 <_svfiprintf_r+0x1d6>
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <_svfiprintf_r+0x1f0>)
 8004026:	bb1b      	cbnz	r3, 8004070 <_svfiprintf_r+0x1b0>
 8004028:	9b03      	ldr	r3, [sp, #12]
 800402a:	3307      	adds	r3, #7
 800402c:	f023 0307 	bic.w	r3, r3, #7
 8004030:	3308      	adds	r3, #8
 8004032:	9303      	str	r3, [sp, #12]
 8004034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004036:	4433      	add	r3, r6
 8004038:	9309      	str	r3, [sp, #36]	; 0x24
 800403a:	e768      	b.n	8003f0e <_svfiprintf_r+0x4e>
 800403c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004040:	460c      	mov	r4, r1
 8004042:	2001      	movs	r0, #1
 8004044:	e7a6      	b.n	8003f94 <_svfiprintf_r+0xd4>
 8004046:	2300      	movs	r3, #0
 8004048:	3401      	adds	r4, #1
 800404a:	9305      	str	r3, [sp, #20]
 800404c:	4619      	mov	r1, r3
 800404e:	f04f 0c0a 	mov.w	ip, #10
 8004052:	4620      	mov	r0, r4
 8004054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004058:	3a30      	subs	r2, #48	; 0x30
 800405a:	2a09      	cmp	r2, #9
 800405c:	d903      	bls.n	8004066 <_svfiprintf_r+0x1a6>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0c6      	beq.n	8003ff0 <_svfiprintf_r+0x130>
 8004062:	9105      	str	r1, [sp, #20]
 8004064:	e7c4      	b.n	8003ff0 <_svfiprintf_r+0x130>
 8004066:	fb0c 2101 	mla	r1, ip, r1, r2
 800406a:	4604      	mov	r4, r0
 800406c:	2301      	movs	r3, #1
 800406e:	e7f0      	b.n	8004052 <_svfiprintf_r+0x192>
 8004070:	ab03      	add	r3, sp, #12
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	462a      	mov	r2, r5
 8004076:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <_svfiprintf_r+0x1f4>)
 8004078:	a904      	add	r1, sp, #16
 800407a:	4638      	mov	r0, r7
 800407c:	f3af 8000 	nop.w
 8004080:	1c42      	adds	r2, r0, #1
 8004082:	4606      	mov	r6, r0
 8004084:	d1d6      	bne.n	8004034 <_svfiprintf_r+0x174>
 8004086:	89ab      	ldrh	r3, [r5, #12]
 8004088:	065b      	lsls	r3, r3, #25
 800408a:	f53f af2d 	bmi.w	8003ee8 <_svfiprintf_r+0x28>
 800408e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004090:	b01d      	add	sp, #116	; 0x74
 8004092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004096:	ab03      	add	r3, sp, #12
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	462a      	mov	r2, r5
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <_svfiprintf_r+0x1f4>)
 800409e:	a904      	add	r1, sp, #16
 80040a0:	4638      	mov	r0, r7
 80040a2:	f000 f879 	bl	8004198 <_printf_i>
 80040a6:	e7eb      	b.n	8004080 <_svfiprintf_r+0x1c0>
 80040a8:	0800452c 	.word	0x0800452c
 80040ac:	08004536 	.word	0x08004536
 80040b0:	00000000 	.word	0x00000000
 80040b4:	08003e0d 	.word	0x08003e0d
 80040b8:	08004532 	.word	0x08004532

080040bc <_printf_common>:
 80040bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c0:	4616      	mov	r6, r2
 80040c2:	4699      	mov	r9, r3
 80040c4:	688a      	ldr	r2, [r1, #8]
 80040c6:	690b      	ldr	r3, [r1, #16]
 80040c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040cc:	4293      	cmp	r3, r2
 80040ce:	bfb8      	it	lt
 80040d0:	4613      	movlt	r3, r2
 80040d2:	6033      	str	r3, [r6, #0]
 80040d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040d8:	4607      	mov	r7, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	b10a      	cbz	r2, 80040e2 <_printf_common+0x26>
 80040de:	3301      	adds	r3, #1
 80040e0:	6033      	str	r3, [r6, #0]
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	0699      	lsls	r1, r3, #26
 80040e6:	bf42      	ittt	mi
 80040e8:	6833      	ldrmi	r3, [r6, #0]
 80040ea:	3302      	addmi	r3, #2
 80040ec:	6033      	strmi	r3, [r6, #0]
 80040ee:	6825      	ldr	r5, [r4, #0]
 80040f0:	f015 0506 	ands.w	r5, r5, #6
 80040f4:	d106      	bne.n	8004104 <_printf_common+0x48>
 80040f6:	f104 0a19 	add.w	sl, r4, #25
 80040fa:	68e3      	ldr	r3, [r4, #12]
 80040fc:	6832      	ldr	r2, [r6, #0]
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	42ab      	cmp	r3, r5
 8004102:	dc26      	bgt.n	8004152 <_printf_common+0x96>
 8004104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004108:	1e13      	subs	r3, r2, #0
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	bf18      	it	ne
 800410e:	2301      	movne	r3, #1
 8004110:	0692      	lsls	r2, r2, #26
 8004112:	d42b      	bmi.n	800416c <_printf_common+0xb0>
 8004114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004118:	4649      	mov	r1, r9
 800411a:	4638      	mov	r0, r7
 800411c:	47c0      	blx	r8
 800411e:	3001      	adds	r0, #1
 8004120:	d01e      	beq.n	8004160 <_printf_common+0xa4>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	6922      	ldr	r2, [r4, #16]
 8004126:	f003 0306 	and.w	r3, r3, #6
 800412a:	2b04      	cmp	r3, #4
 800412c:	bf02      	ittt	eq
 800412e:	68e5      	ldreq	r5, [r4, #12]
 8004130:	6833      	ldreq	r3, [r6, #0]
 8004132:	1aed      	subeq	r5, r5, r3
 8004134:	68a3      	ldr	r3, [r4, #8]
 8004136:	bf0c      	ite	eq
 8004138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800413c:	2500      	movne	r5, #0
 800413e:	4293      	cmp	r3, r2
 8004140:	bfc4      	itt	gt
 8004142:	1a9b      	subgt	r3, r3, r2
 8004144:	18ed      	addgt	r5, r5, r3
 8004146:	2600      	movs	r6, #0
 8004148:	341a      	adds	r4, #26
 800414a:	42b5      	cmp	r5, r6
 800414c:	d11a      	bne.n	8004184 <_printf_common+0xc8>
 800414e:	2000      	movs	r0, #0
 8004150:	e008      	b.n	8004164 <_printf_common+0xa8>
 8004152:	2301      	movs	r3, #1
 8004154:	4652      	mov	r2, sl
 8004156:	4649      	mov	r1, r9
 8004158:	4638      	mov	r0, r7
 800415a:	47c0      	blx	r8
 800415c:	3001      	adds	r0, #1
 800415e:	d103      	bne.n	8004168 <_printf_common+0xac>
 8004160:	f04f 30ff 	mov.w	r0, #4294967295
 8004164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004168:	3501      	adds	r5, #1
 800416a:	e7c6      	b.n	80040fa <_printf_common+0x3e>
 800416c:	18e1      	adds	r1, r4, r3
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	2030      	movs	r0, #48	; 0x30
 8004172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004176:	4422      	add	r2, r4
 8004178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800417c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004180:	3302      	adds	r3, #2
 8004182:	e7c7      	b.n	8004114 <_printf_common+0x58>
 8004184:	2301      	movs	r3, #1
 8004186:	4622      	mov	r2, r4
 8004188:	4649      	mov	r1, r9
 800418a:	4638      	mov	r0, r7
 800418c:	47c0      	blx	r8
 800418e:	3001      	adds	r0, #1
 8004190:	d0e6      	beq.n	8004160 <_printf_common+0xa4>
 8004192:	3601      	adds	r6, #1
 8004194:	e7d9      	b.n	800414a <_printf_common+0x8e>
	...

08004198 <_printf_i>:
 8004198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800419c:	7e0f      	ldrb	r7, [r1, #24]
 800419e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041a0:	2f78      	cmp	r7, #120	; 0x78
 80041a2:	4691      	mov	r9, r2
 80041a4:	4680      	mov	r8, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	469a      	mov	sl, r3
 80041aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041ae:	d807      	bhi.n	80041c0 <_printf_i+0x28>
 80041b0:	2f62      	cmp	r7, #98	; 0x62
 80041b2:	d80a      	bhi.n	80041ca <_printf_i+0x32>
 80041b4:	2f00      	cmp	r7, #0
 80041b6:	f000 80d4 	beq.w	8004362 <_printf_i+0x1ca>
 80041ba:	2f58      	cmp	r7, #88	; 0x58
 80041bc:	f000 80c0 	beq.w	8004340 <_printf_i+0x1a8>
 80041c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041c8:	e03a      	b.n	8004240 <_printf_i+0xa8>
 80041ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ce:	2b15      	cmp	r3, #21
 80041d0:	d8f6      	bhi.n	80041c0 <_printf_i+0x28>
 80041d2:	a101      	add	r1, pc, #4	; (adr r1, 80041d8 <_printf_i+0x40>)
 80041d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041d8:	08004231 	.word	0x08004231
 80041dc:	08004245 	.word	0x08004245
 80041e0:	080041c1 	.word	0x080041c1
 80041e4:	080041c1 	.word	0x080041c1
 80041e8:	080041c1 	.word	0x080041c1
 80041ec:	080041c1 	.word	0x080041c1
 80041f0:	08004245 	.word	0x08004245
 80041f4:	080041c1 	.word	0x080041c1
 80041f8:	080041c1 	.word	0x080041c1
 80041fc:	080041c1 	.word	0x080041c1
 8004200:	080041c1 	.word	0x080041c1
 8004204:	08004349 	.word	0x08004349
 8004208:	08004271 	.word	0x08004271
 800420c:	08004303 	.word	0x08004303
 8004210:	080041c1 	.word	0x080041c1
 8004214:	080041c1 	.word	0x080041c1
 8004218:	0800436b 	.word	0x0800436b
 800421c:	080041c1 	.word	0x080041c1
 8004220:	08004271 	.word	0x08004271
 8004224:	080041c1 	.word	0x080041c1
 8004228:	080041c1 	.word	0x080041c1
 800422c:	0800430b 	.word	0x0800430b
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	1d1a      	adds	r2, r3, #4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	602a      	str	r2, [r5, #0]
 8004238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800423c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004240:	2301      	movs	r3, #1
 8004242:	e09f      	b.n	8004384 <_printf_i+0x1ec>
 8004244:	6820      	ldr	r0, [r4, #0]
 8004246:	682b      	ldr	r3, [r5, #0]
 8004248:	0607      	lsls	r7, r0, #24
 800424a:	f103 0104 	add.w	r1, r3, #4
 800424e:	6029      	str	r1, [r5, #0]
 8004250:	d501      	bpl.n	8004256 <_printf_i+0xbe>
 8004252:	681e      	ldr	r6, [r3, #0]
 8004254:	e003      	b.n	800425e <_printf_i+0xc6>
 8004256:	0646      	lsls	r6, r0, #25
 8004258:	d5fb      	bpl.n	8004252 <_printf_i+0xba>
 800425a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800425e:	2e00      	cmp	r6, #0
 8004260:	da03      	bge.n	800426a <_printf_i+0xd2>
 8004262:	232d      	movs	r3, #45	; 0x2d
 8004264:	4276      	negs	r6, r6
 8004266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800426a:	485a      	ldr	r0, [pc, #360]	; (80043d4 <_printf_i+0x23c>)
 800426c:	230a      	movs	r3, #10
 800426e:	e012      	b.n	8004296 <_printf_i+0xfe>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	1d19      	adds	r1, r3, #4
 8004276:	6029      	str	r1, [r5, #0]
 8004278:	0605      	lsls	r5, r0, #24
 800427a:	d501      	bpl.n	8004280 <_printf_i+0xe8>
 800427c:	681e      	ldr	r6, [r3, #0]
 800427e:	e002      	b.n	8004286 <_printf_i+0xee>
 8004280:	0641      	lsls	r1, r0, #25
 8004282:	d5fb      	bpl.n	800427c <_printf_i+0xe4>
 8004284:	881e      	ldrh	r6, [r3, #0]
 8004286:	4853      	ldr	r0, [pc, #332]	; (80043d4 <_printf_i+0x23c>)
 8004288:	2f6f      	cmp	r7, #111	; 0x6f
 800428a:	bf0c      	ite	eq
 800428c:	2308      	moveq	r3, #8
 800428e:	230a      	movne	r3, #10
 8004290:	2100      	movs	r1, #0
 8004292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004296:	6865      	ldr	r5, [r4, #4]
 8004298:	60a5      	str	r5, [r4, #8]
 800429a:	2d00      	cmp	r5, #0
 800429c:	bfa2      	ittt	ge
 800429e:	6821      	ldrge	r1, [r4, #0]
 80042a0:	f021 0104 	bicge.w	r1, r1, #4
 80042a4:	6021      	strge	r1, [r4, #0]
 80042a6:	b90e      	cbnz	r6, 80042ac <_printf_i+0x114>
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	d04b      	beq.n	8004344 <_printf_i+0x1ac>
 80042ac:	4615      	mov	r5, r2
 80042ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80042b2:	fb03 6711 	mls	r7, r3, r1, r6
 80042b6:	5dc7      	ldrb	r7, [r0, r7]
 80042b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042bc:	4637      	mov	r7, r6
 80042be:	42bb      	cmp	r3, r7
 80042c0:	460e      	mov	r6, r1
 80042c2:	d9f4      	bls.n	80042ae <_printf_i+0x116>
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d10b      	bne.n	80042e0 <_printf_i+0x148>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	07de      	lsls	r6, r3, #31
 80042cc:	d508      	bpl.n	80042e0 <_printf_i+0x148>
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	6861      	ldr	r1, [r4, #4]
 80042d2:	4299      	cmp	r1, r3
 80042d4:	bfde      	ittt	le
 80042d6:	2330      	movle	r3, #48	; 0x30
 80042d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042e0:	1b52      	subs	r2, r2, r5
 80042e2:	6122      	str	r2, [r4, #16]
 80042e4:	f8cd a000 	str.w	sl, [sp]
 80042e8:	464b      	mov	r3, r9
 80042ea:	aa03      	add	r2, sp, #12
 80042ec:	4621      	mov	r1, r4
 80042ee:	4640      	mov	r0, r8
 80042f0:	f7ff fee4 	bl	80040bc <_printf_common>
 80042f4:	3001      	adds	r0, #1
 80042f6:	d14a      	bne.n	800438e <_printf_i+0x1f6>
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	b004      	add	sp, #16
 80042fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	f043 0320 	orr.w	r3, r3, #32
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	4833      	ldr	r0, [pc, #204]	; (80043d8 <_printf_i+0x240>)
 800430c:	2778      	movs	r7, #120	; 0x78
 800430e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	6829      	ldr	r1, [r5, #0]
 8004316:	061f      	lsls	r7, r3, #24
 8004318:	f851 6b04 	ldr.w	r6, [r1], #4
 800431c:	d402      	bmi.n	8004324 <_printf_i+0x18c>
 800431e:	065f      	lsls	r7, r3, #25
 8004320:	bf48      	it	mi
 8004322:	b2b6      	uxthmi	r6, r6
 8004324:	07df      	lsls	r7, r3, #31
 8004326:	bf48      	it	mi
 8004328:	f043 0320 	orrmi.w	r3, r3, #32
 800432c:	6029      	str	r1, [r5, #0]
 800432e:	bf48      	it	mi
 8004330:	6023      	strmi	r3, [r4, #0]
 8004332:	b91e      	cbnz	r6, 800433c <_printf_i+0x1a4>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	f023 0320 	bic.w	r3, r3, #32
 800433a:	6023      	str	r3, [r4, #0]
 800433c:	2310      	movs	r3, #16
 800433e:	e7a7      	b.n	8004290 <_printf_i+0xf8>
 8004340:	4824      	ldr	r0, [pc, #144]	; (80043d4 <_printf_i+0x23c>)
 8004342:	e7e4      	b.n	800430e <_printf_i+0x176>
 8004344:	4615      	mov	r5, r2
 8004346:	e7bd      	b.n	80042c4 <_printf_i+0x12c>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	6826      	ldr	r6, [r4, #0]
 800434c:	6961      	ldr	r1, [r4, #20]
 800434e:	1d18      	adds	r0, r3, #4
 8004350:	6028      	str	r0, [r5, #0]
 8004352:	0635      	lsls	r5, r6, #24
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	d501      	bpl.n	800435c <_printf_i+0x1c4>
 8004358:	6019      	str	r1, [r3, #0]
 800435a:	e002      	b.n	8004362 <_printf_i+0x1ca>
 800435c:	0670      	lsls	r0, r6, #25
 800435e:	d5fb      	bpl.n	8004358 <_printf_i+0x1c0>
 8004360:	8019      	strh	r1, [r3, #0]
 8004362:	2300      	movs	r3, #0
 8004364:	6123      	str	r3, [r4, #16]
 8004366:	4615      	mov	r5, r2
 8004368:	e7bc      	b.n	80042e4 <_printf_i+0x14c>
 800436a:	682b      	ldr	r3, [r5, #0]
 800436c:	1d1a      	adds	r2, r3, #4
 800436e:	602a      	str	r2, [r5, #0]
 8004370:	681d      	ldr	r5, [r3, #0]
 8004372:	6862      	ldr	r2, [r4, #4]
 8004374:	2100      	movs	r1, #0
 8004376:	4628      	mov	r0, r5
 8004378:	f7fb ff52 	bl	8000220 <memchr>
 800437c:	b108      	cbz	r0, 8004382 <_printf_i+0x1ea>
 800437e:	1b40      	subs	r0, r0, r5
 8004380:	6060      	str	r0, [r4, #4]
 8004382:	6863      	ldr	r3, [r4, #4]
 8004384:	6123      	str	r3, [r4, #16]
 8004386:	2300      	movs	r3, #0
 8004388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800438c:	e7aa      	b.n	80042e4 <_printf_i+0x14c>
 800438e:	6923      	ldr	r3, [r4, #16]
 8004390:	462a      	mov	r2, r5
 8004392:	4649      	mov	r1, r9
 8004394:	4640      	mov	r0, r8
 8004396:	47d0      	blx	sl
 8004398:	3001      	adds	r0, #1
 800439a:	d0ad      	beq.n	80042f8 <_printf_i+0x160>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	079b      	lsls	r3, r3, #30
 80043a0:	d413      	bmi.n	80043ca <_printf_i+0x232>
 80043a2:	68e0      	ldr	r0, [r4, #12]
 80043a4:	9b03      	ldr	r3, [sp, #12]
 80043a6:	4298      	cmp	r0, r3
 80043a8:	bfb8      	it	lt
 80043aa:	4618      	movlt	r0, r3
 80043ac:	e7a6      	b.n	80042fc <_printf_i+0x164>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4632      	mov	r2, r6
 80043b2:	4649      	mov	r1, r9
 80043b4:	4640      	mov	r0, r8
 80043b6:	47d0      	blx	sl
 80043b8:	3001      	adds	r0, #1
 80043ba:	d09d      	beq.n	80042f8 <_printf_i+0x160>
 80043bc:	3501      	adds	r5, #1
 80043be:	68e3      	ldr	r3, [r4, #12]
 80043c0:	9903      	ldr	r1, [sp, #12]
 80043c2:	1a5b      	subs	r3, r3, r1
 80043c4:	42ab      	cmp	r3, r5
 80043c6:	dcf2      	bgt.n	80043ae <_printf_i+0x216>
 80043c8:	e7eb      	b.n	80043a2 <_printf_i+0x20a>
 80043ca:	2500      	movs	r5, #0
 80043cc:	f104 0619 	add.w	r6, r4, #25
 80043d0:	e7f5      	b.n	80043be <_printf_i+0x226>
 80043d2:	bf00      	nop
 80043d4:	0800453d 	.word	0x0800453d
 80043d8:	0800454e 	.word	0x0800454e

080043dc <memmove>:
 80043dc:	4288      	cmp	r0, r1
 80043de:	b510      	push	{r4, lr}
 80043e0:	eb01 0402 	add.w	r4, r1, r2
 80043e4:	d902      	bls.n	80043ec <memmove+0x10>
 80043e6:	4284      	cmp	r4, r0
 80043e8:	4623      	mov	r3, r4
 80043ea:	d807      	bhi.n	80043fc <memmove+0x20>
 80043ec:	1e43      	subs	r3, r0, #1
 80043ee:	42a1      	cmp	r1, r4
 80043f0:	d008      	beq.n	8004404 <memmove+0x28>
 80043f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043fa:	e7f8      	b.n	80043ee <memmove+0x12>
 80043fc:	4402      	add	r2, r0
 80043fe:	4601      	mov	r1, r0
 8004400:	428a      	cmp	r2, r1
 8004402:	d100      	bne.n	8004406 <memmove+0x2a>
 8004404:	bd10      	pop	{r4, pc}
 8004406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800440a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800440e:	e7f7      	b.n	8004400 <memmove+0x24>

08004410 <_sbrk_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4d06      	ldr	r5, [pc, #24]	; (800442c <_sbrk_r+0x1c>)
 8004414:	2300      	movs	r3, #0
 8004416:	4604      	mov	r4, r0
 8004418:	4608      	mov	r0, r1
 800441a:	602b      	str	r3, [r5, #0]
 800441c:	f7fc fbae 	bl	8000b7c <_sbrk>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d102      	bne.n	800442a <_sbrk_r+0x1a>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	b103      	cbz	r3, 800442a <_sbrk_r+0x1a>
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	bd38      	pop	{r3, r4, r5, pc}
 800442c:	200002b4 	.word	0x200002b4

08004430 <memcpy>:
 8004430:	440a      	add	r2, r1
 8004432:	4291      	cmp	r1, r2
 8004434:	f100 33ff 	add.w	r3, r0, #4294967295
 8004438:	d100      	bne.n	800443c <memcpy+0xc>
 800443a:	4770      	bx	lr
 800443c:	b510      	push	{r4, lr}
 800443e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004446:	4291      	cmp	r1, r2
 8004448:	d1f9      	bne.n	800443e <memcpy+0xe>
 800444a:	bd10      	pop	{r4, pc}

0800444c <_realloc_r>:
 800444c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004450:	4680      	mov	r8, r0
 8004452:	4614      	mov	r4, r2
 8004454:	460e      	mov	r6, r1
 8004456:	b921      	cbnz	r1, 8004462 <_realloc_r+0x16>
 8004458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800445c:	4611      	mov	r1, r2
 800445e:	f7ff bc49 	b.w	8003cf4 <_malloc_r>
 8004462:	b92a      	cbnz	r2, 8004470 <_realloc_r+0x24>
 8004464:	f7ff fbda 	bl	8003c1c <_free_r>
 8004468:	4625      	mov	r5, r4
 800446a:	4628      	mov	r0, r5
 800446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004470:	f000 f81b 	bl	80044aa <_malloc_usable_size_r>
 8004474:	4284      	cmp	r4, r0
 8004476:	4607      	mov	r7, r0
 8004478:	d802      	bhi.n	8004480 <_realloc_r+0x34>
 800447a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800447e:	d812      	bhi.n	80044a6 <_realloc_r+0x5a>
 8004480:	4621      	mov	r1, r4
 8004482:	4640      	mov	r0, r8
 8004484:	f7ff fc36 	bl	8003cf4 <_malloc_r>
 8004488:	4605      	mov	r5, r0
 800448a:	2800      	cmp	r0, #0
 800448c:	d0ed      	beq.n	800446a <_realloc_r+0x1e>
 800448e:	42bc      	cmp	r4, r7
 8004490:	4622      	mov	r2, r4
 8004492:	4631      	mov	r1, r6
 8004494:	bf28      	it	cs
 8004496:	463a      	movcs	r2, r7
 8004498:	f7ff ffca 	bl	8004430 <memcpy>
 800449c:	4631      	mov	r1, r6
 800449e:	4640      	mov	r0, r8
 80044a0:	f7ff fbbc 	bl	8003c1c <_free_r>
 80044a4:	e7e1      	b.n	800446a <_realloc_r+0x1e>
 80044a6:	4635      	mov	r5, r6
 80044a8:	e7df      	b.n	800446a <_realloc_r+0x1e>

080044aa <_malloc_usable_size_r>:
 80044aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ae:	1f18      	subs	r0, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bfbc      	itt	lt
 80044b4:	580b      	ldrlt	r3, [r1, r0]
 80044b6:	18c0      	addlt	r0, r0, r3
 80044b8:	4770      	bx	lr
	...

080044bc <_init>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr

080044c8 <_fini>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr
