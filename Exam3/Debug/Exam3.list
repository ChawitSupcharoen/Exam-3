
Exam3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006498  08006498  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006498  08006498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a0  080064a0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a0  080064a0  000164a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064a4  080064a4  000164a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080064a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000060  08006508  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006508  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b76  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271d  00000000  00000000  00033c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00036368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8e  00000000  00000000  000373b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027590  00000000  00000000  0003803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000137d2  00000000  00000000  0005f5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001025a5  00000000  00000000  00072da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a04  00000000  00000000  00175348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00179d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080063b4 	.word	0x080063b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080063b4 	.word	0x080063b4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fc7f 	bl	8000ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f80f 	bl	80005e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f958 	bl	800087c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005cc:	f000 f8ce 	bl	800076c <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005d0:	f000 f916 	bl	8000800 <MX_SPI3_Init>
  MX_ADC1_Init();
 80005d4:	f000 f852 	bl	800067c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  SPITxRx_Setup();
 80005d8:	f000 f9e0 	bl	800099c <SPITxRx_Setup>

  reload();
 80005dc:	f000 fa46 	bl	8000a6c <reload>
  shoot();
 80005e0:	f000 fa66 	bl	8000ab0 <shoot>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x28>

080005e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b094      	sub	sp, #80	; 0x50
 80005ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ec:	f107 0318 	add.w	r3, r7, #24
 80005f0:	2238      	movs	r2, #56	; 0x38
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f005 fa59 	bl	8005aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000608:	2000      	movs	r0, #0
 800060a:	f002 fda3 	bl	8003154 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2340      	movs	r3, #64	; 0x40
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000624:	2304      	movs	r3, #4
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000628:	2355      	movs	r3, #85	; 0x55
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0318 	add.w	r3, r7, #24
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fe3d 	bl	80032bc <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000648:	f000 fa6c 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2303      	movs	r3, #3
 8000652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2104      	movs	r1, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f003 f93b 	bl	80038e0 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000670:	f000 fa58 	bl	8000b24 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	; 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08c      	sub	sp, #48	; 0x30
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2220      	movs	r2, #32
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f005 fa09 	bl	8005aac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800069a:	4b32      	ldr	r3, [pc, #200]	; (8000764 <MX_ADC1_Init+0xe8>)
 800069c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006c4:	2204      	movs	r2, #4
 80006c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_ADC1_Init+0xe8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	4817      	ldr	r0, [pc, #92]	; (8000764 <MX_ADC1_Init+0xe8>)
 8000706:	f000 fee9 	bl	80014dc <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000710:	f000 fa08 	bl	8000b24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071c:	4619      	mov	r1, r3
 800071e:	4811      	ldr	r0, [pc, #68]	; (8000764 <MX_ADC1_Init+0xe8>)
 8000720:	f002 f8dc 	bl	80028dc <HAL_ADCEx_MultiModeConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800072a:	f000 f9fb 	bl	8000b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_ADC1_Init+0xec>)
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000732:	2306      	movs	r3, #6
 8000734:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073a:	237f      	movs	r3, #127	; 0x7f
 800073c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073e:	2304      	movs	r3, #4
 8000740:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_ADC1_Init+0xe8>)
 800074c:	f001 faae 	bl	8001cac <HAL_ADC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000756:	f000 f9e5 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	3730      	adds	r7, #48	; 0x30
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000007c 	.word	0x2000007c
 8000768:	04300002 	.word	0x04300002

0800076c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 8000772:	4a22      	ldr	r2, [pc, #136]	; (80007fc <MX_LPUART1_UART_Init+0x90>)
 8000774:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 8000778:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800077c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 80007b0:	f004 f998 	bl	8004ae4 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f9b3 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 80007c2:	f005 f889 	bl	80058d8 <HAL_UARTEx_SetTxFifoThreshold>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007cc:	f000 f9aa 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 80007d4:	f005 f8be 	bl	8005954 <HAL_UARTEx_SetRxFifoThreshold>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007de:	f000 f9a1 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_LPUART1_UART_Init+0x8c>)
 80007e4:	f005 f83f 	bl	8005866 <HAL_UARTEx_DisableFifoMode>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007ee:	f000 f999 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000e8 	.word	0x200000e8
 80007fc:	40008000 	.word	0x40008000

08000800 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_SPI3_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_SPI3_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_SPI3_Init+0x74>)
 800080c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000810:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI3_Init+0x74>)
 800081a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800081e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_SPI3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI3_Init+0x74>)
 800082e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000832:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI3_Init+0x74>)
 8000836:	2238      	movs	r2, #56	; 0x38
 8000838:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI3_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI3_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_SPI3_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI3_Init+0x74>)
 800084e:	2207      	movs	r2, #7
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_SPI3_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI3_Init+0x74>)
 800085a:	2208      	movs	r2, #8
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_SPI3_Init+0x74>)
 8000860:	f003 fca8 	bl	80041b4 <HAL_SPI_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f95b 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000017c 	.word	0x2000017c
 8000878:	40003c00 	.word	0x40003c00

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <MX_GPIO_Init+0x114>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a3e      	ldr	r2, [pc, #248]	; (8000990 <MX_GPIO_Init+0x114>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b3c      	ldr	r3, [pc, #240]	; (8000990 <MX_GPIO_Init+0x114>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008aa:	4b39      	ldr	r3, [pc, #228]	; (8000990 <MX_GPIO_Init+0x114>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a38      	ldr	r2, [pc, #224]	; (8000990 <MX_GPIO_Init+0x114>)
 80008b0:	f043 0320 	orr.w	r3, r3, #32
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b36      	ldr	r3, [pc, #216]	; (8000990 <MX_GPIO_Init+0x114>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0320 	and.w	r3, r3, #32
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <MX_GPIO_Init+0x114>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a32      	ldr	r2, [pc, #200]	; (8000990 <MX_GPIO_Init+0x114>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <MX_GPIO_Init+0x114>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <MX_GPIO_Init+0x114>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a2c      	ldr	r2, [pc, #176]	; (8000990 <MX_GPIO_Init+0x114>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <MX_GPIO_Init+0x114>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_GPIO_Init+0x114>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a26      	ldr	r2, [pc, #152]	; (8000990 <MX_GPIO_Init+0x114>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <MX_GPIO_Init+0x114>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2120      	movs	r1, #32
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f002 fbe3 	bl	80030dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2104      	movs	r1, #4
 800091a:	481e      	ldr	r0, [pc, #120]	; (8000994 <MX_GPIO_Init+0x118>)
 800091c:	f002 fbde 	bl	80030dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4818      	ldr	r0, [pc, #96]	; (8000998 <MX_GPIO_Init+0x11c>)
 8000938:	f002 fa4e 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800093c:	2320      	movs	r3, #32
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f002 fa3f 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800095a:	2304      	movs	r3, #4
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <MX_GPIO_Init+0x118>)
 8000972:	f002 fa31 	bl	8002dd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2028      	movs	r0, #40	; 0x28
 800097c:	f002 f991 	bl	8002ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000980:	2028      	movs	r0, #40	; 0x28
 8000982:	f002 f9a8 	bl	8002cd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	48000c00 	.word	0x48000c00
 8000998:	48000800 	.word	0x48000800

0800099c <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */
void SPITxRx_Setup(){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	uint8_t buffer[4];

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2104      	movs	r1, #4
 80009a6:	4814      	ldr	r0, [pc, #80]	; (80009f8 <SPITxRx_Setup+0x5c>)
 80009a8:	f002 fb98 	bl	80030dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f000 faf9 	bl	8000fa4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2104      	movs	r1, #4
 80009b6:	4810      	ldr	r0, [pc, #64]	; (80009f8 <SPITxRx_Setup+0x5c>)
 80009b8:	f002 fb90 	bl	80030dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009bc:	2001      	movs	r0, #1
 80009be:	f000 faf1 	bl	8000fa4 <HAL_Delay>

	HAL_Delay(200);
 80009c2:	20c8      	movs	r0, #200	; 0xc8
 80009c4:	f000 faee 	bl	8000fa4 <HAL_Delay>
	buffer[0] = 0b01000000;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0x00;
 80009cc:	2300      	movs	r3, #0
 80009ce:	717b      	strb	r3, [r7, #5]
	buffer[2] = 0x00;
 80009d0:	2300      	movs	r3, #0
 80009d2:	71bb      	strb	r3, [r7, #6]
	buffer[3] = 0x00;
 80009d4:	2300      	movs	r3, #0
 80009d6:	71fb      	strb	r3, [r7, #7]
	buffer[4] = 0x00;
 80009d8:	2300      	movs	r3, #0
 80009da:	723b      	strb	r3, [r7, #8]
	HAL_SPI_Transmit(&hspi3, buffer, 4, 100);
 80009dc:	1d39      	adds	r1, r7, #4
 80009de:	2364      	movs	r3, #100	; 0x64
 80009e0:	2204      	movs	r2, #4
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <SPITxRx_Setup+0x60>)
 80009e4:	f003 fc91 	bl	800430a <HAL_SPI_Transmit>
	HAL_Delay(200);
 80009e8:	20c8      	movs	r0, #200	; 0xc8
 80009ea:	f000 fadb 	bl	8000fa4 <HAL_Delay>
//	buffer[2] = 0xFF;
//	buffer[3] = 0x00;
//	buffer[4] = 0x00;
//	HAL_SPI_Transmit(&hspi3, buffer, 4, 100);
//	HAL_Delay(200);
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	48000c00 	.word	0x48000c00
 80009fc:	2000017c 	.word	0x2000017c

08000a00 <Read_Val>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi3, buffer, 5, 100);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
}

uint8_t Read_Val(){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b09a      	sub	sp, #104	; 0x68
 8000a04:	af00      	add	r7, sp, #0

	uint8_t RxBuff = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	while(1){
		HAL_UART_Receive(&hlpuart1, &RxBuff, 1, 60000);
 8000a0c:	f107 0167 	add.w	r1, r7, #103	; 0x67
 8000a10:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000a14:	2201      	movs	r2, #1
 8000a16:	4813      	ldr	r0, [pc, #76]	; (8000a64 <Read_Val+0x64>)
 8000a18:	f004 f942 	bl	8004ca0 <HAL_UART_Receive>
		if (RxBuff == '1'){
 8000a1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a20:	2b31      	cmp	r3, #49	; 0x31
 8000a22:	d101      	bne.n	8000a28 <Read_Val+0x28>
			return 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e019      	b.n	8000a5c <Read_Val+0x5c>
		}
		else if (RxBuff == '2'){
 8000a28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a2c:	2b32      	cmp	r3, #50	; 0x32
 8000a2e:	d101      	bne.n	8000a34 <Read_Val+0x34>
			return 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	e013      	b.n	8000a5c <Read_Val+0x5c>
		}
		uint8_t TXBuffer[100] = "";
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2260      	movs	r2, #96	; 0x60
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 f834 	bl	8005aac <memset>
		sprintf((char*)TXBuffer, "Invalid input. Try again.\r\n");
 8000a44:	463b      	mov	r3, r7
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <Read_Val+0x68>)
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f005 f80f 	bl	8005a6c <siprintf>
		HAL_UART_Transmit(&hlpuart1, TXBuffer, 27, 100);
 8000a4e:	4639      	mov	r1, r7
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	221b      	movs	r2, #27
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <Read_Val+0x64>)
 8000a56:	f004 f895 	bl	8004b84 <HAL_UART_Transmit>
	while(1){
 8000a5a:	e7d7      	b.n	8000a0c <Read_Val+0xc>
	}
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3768      	adds	r7, #104	; 0x68
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000e8 	.word	0x200000e8
 8000a68:	080063cc 	.word	0x080063cc

08000a6c <reload>:

void reload(){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <reload+0x38>)
 8000a72:	f000 feef 	bl	8001854 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000a76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a7a:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <reload+0x38>)
 8000a7c:	f001 f802 	bl	8001a84 <HAL_ADC_PollForConversion>
	magazine = HAL_ADC_GetValue(&hadc1) % 64;
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <reload+0x38>)
 8000a82:	f001 f905 	bl	8001c90 <HAL_ADC_GetValue>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <reload+0x3c>)
 8000a92:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <reload+0x38>)
 8000a96:	f000 ffc1 	bl	8001a1c <HAL_ADC_Stop>

	magcap = 6;
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <reload+0x40>)
 8000a9c:	2206      	movs	r2, #6
 8000a9e:	701a      	strb	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000007c 	.word	0x2000007c
 8000aa8:	200001e0 	.word	0x200001e0
 8000aac:	200001e1 	.word	0x200001e1

08000ab0 <shoot>:


void shoot(){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b09a      	sub	sp, #104	; 0x68
 8000ab4:	af00      	add	r7, sp, #0

	uint8_t TXBuffer[100] = {};
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	2260      	movs	r2, #96	; 0x60
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 fff2 	bl	8005aac <memset>
//	TXBuffer[6] = playerstat + 0x30;
//	TXBuffer[15] = '\n';
	sprintf((char*)TXBuffer, "Player%u's turn, choose your target.\r\n", playerstat);
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <shoot+0x64>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4911      	ldr	r1, [pc, #68]	; (8000b18 <shoot+0x68>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 ffca 	bl	8005a6c <siprintf>
	HAL_UART_Transmit(&hlpuart1, TXBuffer, 37, 100);
 8000ad8:	1d39      	adds	r1, r7, #4
 8000ada:	2364      	movs	r3, #100	; 0x64
 8000adc:	2225      	movs	r2, #37	; 0x25
 8000ade:	480f      	ldr	r0, [pc, #60]	; (8000b1c <shoot+0x6c>)
 8000ae0:	f004 f850 	bl	8004b84 <HAL_UART_Transmit>

    // Get target from user
    playerstat = Read_Val();
 8000ae4:	f7ff ff8c 	bl	8000a00 <Read_Val>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <shoot+0x64>)
 8000aee:	701a      	strb	r2, [r3, #0]

    sprintf((char*)TXBuffer, "Aim at player%u.\r\n", playerstat);
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <shoot+0x64>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4909      	ldr	r1, [pc, #36]	; (8000b20 <shoot+0x70>)
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 ffb6 	bl	8005a6c <siprintf>
    HAL_UART_Transmit(&hlpuart1, TXBuffer, 17, 100);
 8000b00:	1d39      	adds	r1, r7, #4
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2211      	movs	r2, #17
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <shoot+0x6c>)
 8000b08:	f004 f83c 	bl	8004b84 <HAL_UART_Transmit>





}
 8000b0c:	bf00      	nop
 8000b0e:	3768      	adds	r7, #104	; 0x68
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	080063e8 	.word	0x080063e8
 8000b1c:	200000e8 	.word	0x200000e8
 8000b20:	08006410 	.word	0x08006410

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_MspInit+0x44>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_MspInit+0x44>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6613      	str	r3, [r2, #96]	; 0x60
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_MspInit+0x44>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_MspInit+0x44>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_MspInit+0x44>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_MspInit+0x44>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b66:	f002 fb99 	bl	800329c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b09e      	sub	sp, #120	; 0x78
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	2254      	movs	r2, #84	; 0x54
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 ff87 	bl	8005aac <memset>
  if(hadc->Instance==ADC1)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ba6:	d134      	bne.n	8000c12 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bb2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 f8ad 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000bc4:	f7ff ffae 	bl	8000b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_ADC_MspInit+0xa4>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <HAL_ADC_MspInit+0xa4>)
 8000bce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_ADC_MspInit+0xa4>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_ADC_MspInit+0xa4>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <HAL_ADC_MspInit+0xa4>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_ADC_MspInit+0xa4>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f002 f8e3 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3778      	adds	r7, #120	; 0x78
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09e      	sub	sp, #120	; 0x78
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2254      	movs	r2, #84	; 0x54
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f004 ff33 	bl	8005aac <memset>
  if(huart->Instance==LPUART1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a1f      	ldr	r2, [pc, #124]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d136      	bne.n	8000cbe <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c50:	2320      	movs	r3, #32
 8000c52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 f85b 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c68:	f7ff ff5c 	bl	8000b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c70:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c88:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000cac:	230c      	movs	r3, #12
 8000cae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f002 f88d 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3778      	adds	r7, #120	; 0x78
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40008000 	.word	0x40008000
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d130      	bne.n	8000d54 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	4a1a      	ldr	r2, [pc, #104]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d22:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d34:	2306      	movs	r3, #6
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <HAL_SPI_MspInit+0x94>)
 8000d40:	f002 f84a 	bl	8002dd8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2033      	movs	r0, #51	; 0x33
 8000d4a:	f001 ffaa 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000d4e:	2033      	movs	r0, #51	; 0x33
 8000d50:	f001 ffc1 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40003c00 	.word	0x40003c00
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000800 	.word	0x48000800

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f8d8 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dc4:	f002 f9a2 	bl	800310c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <SPI3_IRQHandler+0x10>)
 8000dd2:	f003 fc0f 	bl	80045f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000017c 	.word	0x2000017c

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f004 fe54 	bl	8005abc <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200001e4 	.word	0x200001e4
 8000e48:	20000338 	.word	0x20000338

08000e4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <LoopForever+0xe>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	; (8000ebc <LoopForever+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f004 fe13 	bl	8005ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea2:	f7ff fb8b 	bl	80005bc <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   r0, =_estack
 8000ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000eb4:	080064a8 	.word	0x080064a8
  ldr r2, =_sbss
 8000eb8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ebc:	20000334 	.word	0x20000334

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>

08000ec2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f001 fedd 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f80e 	bl	8000ef4 <HAL_InitTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	e001      	b.n	8000ee8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee4:	f7ff fe24 	bl	8000b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]

}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_InitTick+0x68>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d022      	beq.n	8000f4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_InitTick+0x6c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_InitTick+0x68>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fee8 	bl	8002cf2 <HAL_SYSTICK_Config>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10f      	bne.n	8000f48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	d809      	bhi.n	8000f42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	f04f 30ff 	mov.w	r0, #4294967295
 8000f36:	f001 feb4 	bl	8002ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_InitTick+0x70>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	e007      	b.n	8000f52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e004      	b.n	8000f52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e001      	b.n	8000f52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000000c 	.word	0x2000000c
 8000f60:	20000004 	.word	0x20000004
 8000f64:	20000008 	.word	0x20000008

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x1c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x20>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <HAL_IncTick+0x1c>)
 8000f78:	6013      	str	r3, [r2, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	200001e8 	.word	0x200001e8
 8000f88:	2000000c 	.word	0x2000000c

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	200001e8 	.word	0x200001e8

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d004      	beq.n	8000fc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_Delay+0x40>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc8:	bf00      	nop
 8000fca:	f7ff ffdf 	bl	8000f8c <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d8f7      	bhi.n	8000fca <HAL_Delay+0x26>
  {
  }
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000000c 	.word	0x2000000c

08000fe8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	609a      	str	r2, [r3, #8]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	609a      	str	r2, [r3, #8]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3360      	adds	r3, #96	; 0x60
 8001062:	461a      	mov	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <LL_ADC_SetOffset+0x44>)
 8001072:	4013      	ands	r3, r2
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	4313      	orrs	r3, r2
 8001080:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001088:	bf00      	nop
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	03fff000 	.word	0x03fff000

08001098 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3360      	adds	r3, #96	; 0x60
 80010a6:	461a      	mov	r2, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3360      	adds	r3, #96	; 0x60
 80010d4:	461a      	mov	r2, r3
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	431a      	orrs	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010ee:	bf00      	nop
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b087      	sub	sp, #28
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3360      	adds	r3, #96	; 0x60
 800110a:	461a      	mov	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	431a      	orrs	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001124:	bf00      	nop
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3360      	adds	r3, #96	; 0x60
 8001140:	461a      	mov	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	431a      	orrs	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800115a:	bf00      	nop
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	615a      	str	r2, [r3, #20]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3330      	adds	r3, #48	; 0x30
 80011c2:	461a      	mov	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	4413      	add	r3, r2
 80011d0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	211f      	movs	r1, #31
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	401a      	ands	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	0e9b      	lsrs	r3, r3, #26
 80011ea:	f003 011f 	and.w	r1, r3, #31
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	431a      	orrs	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011fe:	bf00      	nop
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800120a:	b480      	push	{r7}
 800120c:	b087      	sub	sp, #28
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3314      	adds	r3, #20
 800121a:	461a      	mov	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	0e5b      	lsrs	r3, r3, #25
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	0d1b      	lsrs	r3, r3, #20
 8001232:	f003 031f 	and.w	r3, r3, #31
 8001236:	2107      	movs	r1, #7
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	401a      	ands	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	0d1b      	lsrs	r3, r3, #20
 8001244:	f003 031f 	and.w	r3, r3, #31
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	431a      	orrs	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0318 	and.w	r3, r3, #24
 8001282:	4908      	ldr	r1, [pc, #32]	; (80012a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001284:	40d9      	lsrs	r1, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	400b      	ands	r3, r1
 800128a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800128e:	431a      	orrs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	0007ffff 	.word	0x0007ffff

080012a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 031f 	and.w	r3, r3, #31
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80012f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6093      	str	r3, [r2, #8]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001318:	d101      	bne.n	800131e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800133c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001340:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001368:	d101      	bne.n	800136e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800138c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b8:	f043 0202 	orr.w	r2, r3, #2
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <LL_ADC_IsEnabled+0x18>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <LL_ADC_IsEnabled+0x1a>
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b02      	cmp	r3, #2
 8001404:	d101      	bne.n	800140a <LL_ADC_IsDisableOngoing+0x18>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <LL_ADC_IsDisableOngoing+0x1a>
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800142c:	f043 0204 	orr.w	r2, r3, #4
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001454:	f043 0210 	orr.w	r2, r3, #16
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b04      	cmp	r3, #4
 800147a:	d101      	bne.n	8001480 <LL_ADC_REG_IsConversionOngoing+0x18>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800149e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a2:	f043 0220 	orr.w	r2, r3, #32
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d101      	bne.n	80014ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1a9      	b.n	800184a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d109      	bne.n	8001518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fb37 	bl	8000b78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fef1 	bl	8001304 <LL_ADC_IsDeepPowerDownEnabled>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fed7 	bl	80012e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff0c 	bl	8001354 <LL_ADC_IsInternalRegulatorEnabled>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d115      	bne.n	800156e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fef0 	bl	800132c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800154c:	4b9c      	ldr	r3, [pc, #624]	; (80017c0 <HAL_ADC_Init+0x2e4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	4a9c      	ldr	r2, [pc, #624]	; (80017c4 <HAL_ADC_Init+0x2e8>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	3301      	adds	r3, #1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001560:	e002      	b.n	8001568 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3b01      	subs	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f9      	bne.n	8001562 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff feee 	bl	8001354 <LL_ADC_IsInternalRegulatorEnabled>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10d      	bne.n	800159a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	f043 0210 	orr.w	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff62 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 80015a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 8142 	bne.w	8001838 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f040 813e 	bne.w	8001838 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015c4:	f043 0202 	orr.w	r2, r3, #2
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fefb 	bl	80013cc <LL_ADC_IsEnabled>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d141      	bne.n	8001660 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e4:	d004      	beq.n	80015f0 <HAL_ADC_Init+0x114>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a77      	ldr	r2, [pc, #476]	; (80017c8 <HAL_ADC_Init+0x2ec>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d10f      	bne.n	8001610 <HAL_ADC_Init+0x134>
 80015f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015f4:	f7ff feea 	bl	80013cc <LL_ADC_IsEnabled>
 80015f8:	4604      	mov	r4, r0
 80015fa:	4873      	ldr	r0, [pc, #460]	; (80017c8 <HAL_ADC_Init+0x2ec>)
 80015fc:	f7ff fee6 	bl	80013cc <LL_ADC_IsEnabled>
 8001600:	4603      	mov	r3, r0
 8001602:	4323      	orrs	r3, r4
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	e012      	b.n	8001636 <HAL_ADC_Init+0x15a>
 8001610:	486e      	ldr	r0, [pc, #440]	; (80017cc <HAL_ADC_Init+0x2f0>)
 8001612:	f7ff fedb 	bl	80013cc <LL_ADC_IsEnabled>
 8001616:	4604      	mov	r4, r0
 8001618:	486d      	ldr	r0, [pc, #436]	; (80017d0 <HAL_ADC_Init+0x2f4>)
 800161a:	f7ff fed7 	bl	80013cc <LL_ADC_IsEnabled>
 800161e:	4603      	mov	r3, r0
 8001620:	431c      	orrs	r4, r3
 8001622:	486c      	ldr	r0, [pc, #432]	; (80017d4 <HAL_ADC_Init+0x2f8>)
 8001624:	f7ff fed2 	bl	80013cc <LL_ADC_IsEnabled>
 8001628:	4603      	mov	r3, r0
 800162a:	4323      	orrs	r3, r4
 800162c:	2b00      	cmp	r3, #0
 800162e:	bf0c      	ite	eq
 8001630:	2301      	moveq	r3, #1
 8001632:	2300      	movne	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d012      	beq.n	8001660 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001642:	d004      	beq.n	800164e <HAL_ADC_Init+0x172>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a5f      	ldr	r2, [pc, #380]	; (80017c8 <HAL_ADC_Init+0x2ec>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_ADC_Init+0x176>
 800164e:	4a62      	ldr	r2, [pc, #392]	; (80017d8 <HAL_ADC_Init+0x2fc>)
 8001650:	e000      	b.n	8001654 <HAL_ADC_Init+0x178>
 8001652:	4a62      	ldr	r2, [pc, #392]	; (80017dc <HAL_ADC_Init+0x300>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f7ff fcc4 	bl	8000fe8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7f5b      	ldrb	r3, [r3, #29]
 8001664:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800166a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001670:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001676:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800167e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800168a:	2b01      	cmp	r3, #1
 800168c:	d106      	bne.n	800169c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	3b01      	subs	r3, #1
 8001694:	045b      	lsls	r3, r3, #17
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d009      	beq.n	80016b8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <HAL_ADC_Init+0x304>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	69b9      	ldr	r1, [r7, #24]
 80016c8:	430b      	orrs	r3, r1
 80016ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fee5 	bl	80014b6 <LL_ADC_INJ_IsConversionOngoing>
 80016ec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d17f      	bne.n	80017f4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d17c      	bne.n	80017f4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016fe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001706:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001716:	f023 0302 	bic.w	r3, r3, #2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	430b      	orrs	r3, r1
 8001722:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d017      	beq.n	800175c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800173a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001744:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6911      	ldr	r1, [r2, #16]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	430b      	orrs	r3, r1
 8001756:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800175a:	e013      	b.n	8001784 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800176a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800177c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001780:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800178a:	2b01      	cmp	r3, #1
 800178c:	d12a      	bne.n	80017e4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001798:	f023 0304 	bic.w	r3, r3, #4
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017a4:	4311      	orrs	r1, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017aa:	4311      	orrs	r1, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017b0:	430a      	orrs	r2, r1
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	611a      	str	r2, [r3, #16]
 80017be:	e019      	b.n	80017f4 <HAL_ADC_Init+0x318>
 80017c0:	20000004 	.word	0x20000004
 80017c4:	053e2d63 	.word	0x053e2d63
 80017c8:	50000100 	.word	0x50000100
 80017cc:	50000400 	.word	0x50000400
 80017d0:	50000500 	.word	0x50000500
 80017d4:	50000600 	.word	0x50000600
 80017d8:	50000300 	.word	0x50000300
 80017dc:	50000700 	.word	0x50000700
 80017e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d10c      	bne.n	8001816 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f023 010f 	bic.w	r1, r3, #15
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	1e5a      	subs	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
 8001814:	e007      	b.n	8001826 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 020f 	bic.w	r2, r2, #15
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	65da      	str	r2, [r3, #92]	; 0x5c
 8001836:	e007      	b.n	8001848 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	f043 0210 	orr.w	r2, r3, #16
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001848:	7ffb      	ldrb	r3, [r7, #31]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop

08001854 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001864:	d004      	beq.n	8001870 <HAL_ADC_Start+0x1c>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a67      	ldr	r2, [pc, #412]	; (8001a08 <HAL_ADC_Start+0x1b4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_ADC_Start+0x20>
 8001870:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <HAL_ADC_Start+0x1b8>)
 8001872:	e000      	b.n	8001876 <HAL_ADC_Start+0x22>
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <HAL_ADC_Start+0x1bc>)
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fd16 	bl	80012a8 <LL_ADC_GetMultimode>
 800187c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fdf0 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 80b4 	bne.w	80019f8 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_ADC_Start+0x4a>
 800189a:	2302      	movs	r3, #2
 800189c:	e0af      	b.n	80019fe <HAL_ADC_Start+0x1aa>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fefc 	bl	80026a4 <ADC_Enable>
 80018ac:	4603      	mov	r3, r0
 80018ae:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 809b 	bne.w	80019ee <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a4d      	ldr	r2, [pc, #308]	; (8001a08 <HAL_ADC_Start+0x1b4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d009      	beq.n	80018ea <HAL_ADC_Start+0x96>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a4e      	ldr	r2, [pc, #312]	; (8001a14 <HAL_ADC_Start+0x1c0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d002      	beq.n	80018e6 <HAL_ADC_Start+0x92>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	e003      	b.n	80018ee <HAL_ADC_Start+0x9a>
 80018e6:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <HAL_ADC_Start+0x1c4>)
 80018e8:	e001      	b.n	80018ee <HAL_ADC_Start+0x9a>
 80018ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d002      	beq.n	80018fc <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001914:	d106      	bne.n	8001924 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	f023 0206 	bic.w	r2, r3, #6
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	661a      	str	r2, [r3, #96]	; 0x60
 8001922:	e002      	b.n	800192a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	221c      	movs	r2, #28
 8001930:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a32      	ldr	r2, [pc, #200]	; (8001a08 <HAL_ADC_Start+0x1b4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d009      	beq.n	8001958 <HAL_ADC_Start+0x104>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a32      	ldr	r2, [pc, #200]	; (8001a14 <HAL_ADC_Start+0x1c0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d002      	beq.n	8001954 <HAL_ADC_Start+0x100>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	e003      	b.n	800195c <HAL_ADC_Start+0x108>
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_ADC_Start+0x1c4>)
 8001956:	e001      	b.n	800195c <HAL_ADC_Start+0x108>
 8001958:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	4293      	cmp	r3, r2
 8001962:	d008      	beq.n	8001976 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b05      	cmp	r3, #5
 800196e:	d002      	beq.n	8001976 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2b09      	cmp	r3, #9
 8001974:	d114      	bne.n	80019a0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800198c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fd3d 	bl	8001418 <LL_ADC_REG_StartConversion>
 800199e:	e02d      	b.n	80019fc <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <HAL_ADC_Start+0x1b4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <HAL_ADC_Start+0x176>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a16      	ldr	r2, [pc, #88]	; (8001a14 <HAL_ADC_Start+0x1c0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d002      	beq.n	80019c6 <HAL_ADC_Start+0x172>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	e003      	b.n	80019ce <HAL_ADC_Start+0x17a>
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_ADC_Start+0x1c4>)
 80019c8:	e001      	b.n	80019ce <HAL_ADC_Start+0x17a>
 80019ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019ce:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00f      	beq.n	80019fc <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ec:	e006      	b.n	80019fc <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80019f6:	e001      	b.n	80019fc <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
 80019fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	50000100 	.word	0x50000100
 8001a0c:	50000300 	.word	0x50000300
 8001a10:	50000700 	.word	0x50000700
 8001a14:	50000500 	.word	0x50000500
 8001a18:	50000400 	.word	0x50000400

08001a1c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_Stop+0x16>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e023      	b.n	8001a7a <HAL_ADC_Stop+0x5e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 fd75 	bl	800252c <ADC_ConversionStop>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d111      	bne.n	8001a70 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 febf 	bl	80027d0 <ADC_Disable>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a96:	d004      	beq.n	8001aa2 <HAL_ADC_PollForConversion+0x1e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a77      	ldr	r2, [pc, #476]	; (8001c7c <HAL_ADC_PollForConversion+0x1f8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_PollForConversion+0x22>
 8001aa2:	4b77      	ldr	r3, [pc, #476]	; (8001c80 <HAL_ADC_PollForConversion+0x1fc>)
 8001aa4:	e000      	b.n	8001aa8 <HAL_ADC_PollForConversion+0x24>
 8001aa6:	4b77      	ldr	r3, [pc, #476]	; (8001c84 <HAL_ADC_PollForConversion+0x200>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fbfd 	bl	80012a8 <LL_ADC_GetMultimode>
 8001aae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d102      	bne.n	8001abe <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	e037      	b.n	8001b2e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d002      	beq.n	8001ad0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d111      	bne.n	8001af4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	f043 0220 	orr.w	r2, r3, #32
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0c1      	b.n	8001c72 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001aee:	2304      	movs	r3, #4
 8001af0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001af2:	e01c      	b.n	8001b2e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001afc:	d004      	beq.n	8001b08 <HAL_ADC_PollForConversion+0x84>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a5e      	ldr	r2, [pc, #376]	; (8001c7c <HAL_ADC_PollForConversion+0x1f8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x88>
 8001b08:	4b5d      	ldr	r3, [pc, #372]	; (8001c80 <HAL_ADC_PollForConversion+0x1fc>)
 8001b0a:	e000      	b.n	8001b0e <HAL_ADC_PollForConversion+0x8a>
 8001b0c:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <HAL_ADC_PollForConversion+0x200>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fbd8 	bl	80012c4 <LL_ADC_GetMultiDMATransfer>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1e:	f043 0220 	orr.w	r2, r3, #32
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0a3      	b.n	8001c72 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b2e:	f7ff fa2d 	bl	8000f8c <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b34:	e021      	b.n	8001b7a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d01d      	beq.n	8001b7a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b3e:	f7ff fa25 	bl	8000f8c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d302      	bcc.n	8001b54 <HAL_ADC_PollForConversion+0xd0>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d112      	bne.n	8001b7a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	f043 0204 	orr.w	r2, r3, #4
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e07b      	b.n	8001c72 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0d6      	beq.n	8001b36 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff faf7 	bl	800118c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01c      	beq.n	8001bde <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7f5b      	ldrb	r3, [r3, #29]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d118      	bne.n	8001bde <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d111      	bne.n	8001bde <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <HAL_ADC_PollForConversion+0x1f8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d009      	beq.n	8001bfc <HAL_ADC_PollForConversion+0x178>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <HAL_ADC_PollForConversion+0x204>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d002      	beq.n	8001bf8 <HAL_ADC_PollForConversion+0x174>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	e003      	b.n	8001c00 <HAL_ADC_PollForConversion+0x17c>
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_ADC_PollForConversion+0x208>)
 8001bfa:	e001      	b.n	8001c00 <HAL_ADC_PollForConversion+0x17c>
 8001bfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d008      	beq.n	8001c1a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d002      	beq.n	8001c1a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	d104      	bne.n	8001c24 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	e014      	b.n	8001c4e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <HAL_ADC_PollForConversion+0x1f8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d009      	beq.n	8001c42 <HAL_ADC_PollForConversion+0x1be>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <HAL_ADC_PollForConversion+0x204>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d002      	beq.n	8001c3e <HAL_ADC_PollForConversion+0x1ba>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	e003      	b.n	8001c46 <HAL_ADC_PollForConversion+0x1c2>
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_ADC_PollForConversion+0x208>)
 8001c40:	e001      	b.n	8001c46 <HAL_ADC_PollForConversion+0x1c2>
 8001c42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c46:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d104      	bne.n	8001c5e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2208      	movs	r2, #8
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e008      	b.n	8001c70 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d103      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	220c      	movs	r2, #12
 8001c6e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	50000100 	.word	0x50000100
 8001c80:	50000300 	.word	0x50000300
 8001c84:	50000700 	.word	0x50000700
 8001c88:	50000500 	.word	0x50000500
 8001c8c:	50000400 	.word	0x50000400

08001c90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b0b6      	sub	sp, #216	; 0xd8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d102      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x24>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	f000 bc13 	b.w	80024f6 <HAL_ADC_ConfigChannel+0x84a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fbc3 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 83f3 	bne.w	80024d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f7ff fa5b 	bl	80011b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fbb1 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 8001d06:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fbd1 	bl	80014b6 <LL_ADC_INJ_IsConversionOngoing>
 8001d14:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f040 81d9 	bne.w	80020d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 81d4 	bne.w	80020d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d34:	d10f      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7ff fa62 	bl	800120a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fa09 	bl	8001166 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d54:	e00e      	b.n	8001d74 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f7ff fa51 	bl	800120a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f9f9 	bl	8001166 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	08db      	lsrs	r3, r3, #3
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d022      	beq.n	8001ddc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6919      	ldr	r1, [r3, #16]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001da6:	f7ff f953 	bl	8001050 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6919      	ldr	r1, [r3, #16]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	461a      	mov	r2, r3
 8001db8:	f7ff f99f 	bl	80010fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x126>
 8001dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dd0:	e000      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x128>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f7ff f9ab 	bl	8001130 <LL_ADC_SetOffsetSaturation>
 8001dda:	e17b      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f958 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10a      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x15c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff f94d 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	0e9b      	lsrs	r3, r3, #26
 8001e02:	f003 021f 	and.w	r2, r3, #31
 8001e06:	e01e      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x19a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff f942 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001e36:	2320      	movs	r3, #32
 8001e38:	e004      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001e3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x1b2>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0e9b      	lsrs	r3, r3, #26
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	e018      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x1e4>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001e82:	2320      	movs	r3, #32
 8001e84:	e004      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001e86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d106      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff f911 	bl	80010c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff f8f5 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10a      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x222>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f8ea 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	0e9b      	lsrs	r3, r3, #26
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	e01e      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x260>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f8df 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001eec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e004      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001f00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x278>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0e9b      	lsrs	r3, r3, #26
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	e018      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x2aa>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001f48:	2320      	movs	r3, #32
 8001f4a:	e004      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d106      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2101      	movs	r1, #1
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f8ae 	bl	80010c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f892 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10a      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x2e8>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2102      	movs	r1, #2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f887 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	0e9b      	lsrs	r3, r3, #26
 8001f8e:	f003 021f 	and.w	r2, r3, #31
 8001f92:	e01e      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x326>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2102      	movs	r1, #2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f87c 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	e004      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x33e>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0e9b      	lsrs	r3, r3, #26
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	e016      	b.n	8002018 <HAL_ADC_ConfigChannel+0x36c>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ffe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002002:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e004      	b.n	8002018 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800200e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002018:	429a      	cmp	r2, r3
 800201a:	d106      	bne.n	800202a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	2102      	movs	r1, #2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f84d 	bl	80010c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2103      	movs	r1, #3
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff f831 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10a      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x3aa>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2103      	movs	r1, #3
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f826 	bl	8001098 <LL_ADC_GetOffsetChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	0e9b      	lsrs	r3, r3, #26
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	e017      	b.n	8002086 <HAL_ADC_ConfigChannel+0x3da>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2103      	movs	r1, #3
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff f81b 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800206e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002070:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002078:	2320      	movs	r3, #32
 800207a:	e003      	b.n	8002084 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800207c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <HAL_ADC_ConfigChannel+0x3f2>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	0e9b      	lsrs	r3, r3, #26
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	e011      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x416>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80020b6:	2320      	movs	r3, #32
 80020b8:	e003      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80020ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d106      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	2103      	movs	r1, #3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fff8 	bl	80010c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f977 	bl	80013cc <LL_ADC_IsEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f040 813d 	bne.w	8002360 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	461a      	mov	r2, r3
 80020f4:	f7ff f8b4 	bl	8001260 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4aa2      	ldr	r2, [pc, #648]	; (8002388 <HAL_ADC_ConfigChannel+0x6dc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	f040 812e 	bne.w	8002360 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10b      	bne.n	800212c <HAL_ADC_ConfigChannel+0x480>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0e9b      	lsrs	r3, r3, #26
 800211a:	3301      	adds	r3, #1
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2b09      	cmp	r3, #9
 8002122:	bf94      	ite	ls
 8002124:	2301      	movls	r3, #1
 8002126:	2300      	movhi	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e019      	b.n	8002160 <HAL_ADC_ConfigChannel+0x4b4>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800213a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800213c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800213e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002144:	2320      	movs	r3, #32
 8002146:	e003      	b.n	8002150 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	3301      	adds	r3, #1
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2b09      	cmp	r3, #9
 8002158:	bf94      	ite	ls
 800215a:	2301      	movls	r3, #1
 800215c:	2300      	movhi	r3, #0
 800215e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002160:	2b00      	cmp	r3, #0
 8002162:	d079      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x4d4>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0e9b      	lsrs	r3, r3, #26
 8002176:	3301      	adds	r3, #1
 8002178:	069b      	lsls	r3, r3, #26
 800217a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800217e:	e015      	b.n	80021ac <HAL_ADC_ConfigChannel+0x500>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800218e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002190:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002198:	2320      	movs	r3, #32
 800219a:	e003      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800219c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	069b      	lsls	r3, r3, #26
 80021a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x520>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0e9b      	lsrs	r3, r3, #26
 80021be:	3301      	adds	r3, #1
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	e017      	b.n	80021fc <HAL_ADC_ConfigChannel+0x550>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80021e4:	2320      	movs	r3, #32
 80021e6:	e003      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80021e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	ea42 0103 	orr.w	r1, r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10a      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x576>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	0e9b      	lsrs	r3, r3, #26
 8002212:	3301      	adds	r3, #1
 8002214:	f003 021f 	and.w	r2, r3, #31
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	051b      	lsls	r3, r3, #20
 8002220:	e018      	b.n	8002254 <HAL_ADC_ConfigChannel+0x5a8>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002232:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800223a:	2320      	movs	r3, #32
 800223c:	e003      	b.n	8002246 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800223e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	3301      	adds	r3, #1
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002254:	430b      	orrs	r3, r1
 8002256:	e07e      	b.n	8002356 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x5c8>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	3301      	adds	r3, #1
 800226c:	069b      	lsls	r3, r3, #26
 800226e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002272:	e015      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x5f4>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800228c:	2320      	movs	r3, #32
 800228e:	e003      	b.n	8002298 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3301      	adds	r3, #1
 800229a:	069b      	lsls	r3, r3, #26
 800229c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d109      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x614>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	3301      	adds	r3, #1
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	e017      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x644>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	61fb      	str	r3, [r7, #28]
  return result;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e003      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	ea42 0103 	orr.w	r1, r2, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10d      	bne.n	800231c <HAL_ADC_ConfigChannel+0x670>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0e9b      	lsrs	r3, r3, #26
 8002306:	3301      	adds	r3, #1
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	3b1e      	subs	r3, #30
 8002314:	051b      	lsls	r3, r3, #20
 8002316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800231a:	e01b      	b.n	8002354 <HAL_ADC_ConfigChannel+0x6a8>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	613b      	str	r3, [r7, #16]
  return result;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002334:	2320      	movs	r3, #32
 8002336:	e003      	b.n	8002340 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3301      	adds	r3, #1
 8002342:	f003 021f 	and.w	r2, r3, #31
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	3b1e      	subs	r3, #30
 800234e:	051b      	lsls	r3, r3, #20
 8002350:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002354:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe ff55 	bl	800120a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_ADC_ConfigChannel+0x6e0>)
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80be 	beq.w	80024ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002376:	d004      	beq.n	8002382 <HAL_ADC_ConfigChannel+0x6d6>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_ADC_ConfigChannel+0x6e4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10a      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x6ec>
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <HAL_ADC_ConfigChannel+0x6e8>)
 8002384:	e009      	b.n	800239a <HAL_ADC_ConfigChannel+0x6ee>
 8002386:	bf00      	nop
 8002388:	407f0000 	.word	0x407f0000
 800238c:	80080000 	.word	0x80080000
 8002390:	50000100 	.word	0x50000100
 8002394:	50000300 	.word	0x50000300
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <HAL_ADC_ConfigChannel+0x854>)
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fe4a 	bl	8001034 <LL_ADC_GetCommonPathInternalCh>
 80023a0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a56      	ldr	r2, [pc, #344]	; (8002504 <HAL_ADC_ConfigChannel+0x858>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d004      	beq.n	80023b8 <HAL_ADC_ConfigChannel+0x70c>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a55      	ldr	r2, [pc, #340]	; (8002508 <HAL_ADC_ConfigChannel+0x85c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d13a      	bne.n	800242e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d134      	bne.n	800242e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023cc:	d005      	beq.n	80023da <HAL_ADC_ConfigChannel+0x72e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a4e      	ldr	r2, [pc, #312]	; (800250c <HAL_ADC_ConfigChannel+0x860>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	f040 8085 	bne.w	80024e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_ConfigChannel+0x742>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a49      	ldr	r2, [pc, #292]	; (8002510 <HAL_ADC_ConfigChannel+0x864>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x746>
 80023ee:	4a49      	ldr	r2, [pc, #292]	; (8002514 <HAL_ADC_ConfigChannel+0x868>)
 80023f0:	e000      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x748>
 80023f2:	4a43      	ldr	r2, [pc, #268]	; (8002500 <HAL_ADC_ConfigChannel+0x854>)
 80023f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f7fe fe05 	bl	800100e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002404:	4b44      	ldr	r3, [pc, #272]	; (8002518 <HAL_ADC_ConfigChannel+0x86c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	4a44      	ldr	r2, [pc, #272]	; (800251c <HAL_ADC_ConfigChannel+0x870>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	4613      	mov	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800241e:	e002      	b.n	8002426 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3b01      	subs	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f9      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800242c:	e05a      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a3b      	ldr	r2, [pc, #236]	; (8002520 <HAL_ADC_ConfigChannel+0x874>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d125      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800243c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11f      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a31      	ldr	r2, [pc, #196]	; (8002510 <HAL_ADC_ConfigChannel+0x864>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d104      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x7ac>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a34      	ldr	r2, [pc, #208]	; (8002524 <HAL_ADC_ConfigChannel+0x878>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d047      	beq.n	80024e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002460:	d004      	beq.n	800246c <HAL_ADC_ConfigChannel+0x7c0>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <HAL_ADC_ConfigChannel+0x864>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x7c4>
 800246c:	4a29      	ldr	r2, [pc, #164]	; (8002514 <HAL_ADC_ConfigChannel+0x868>)
 800246e:	e000      	b.n	8002472 <HAL_ADC_ConfigChannel+0x7c6>
 8002470:	4a23      	ldr	r2, [pc, #140]	; (8002500 <HAL_ADC_ConfigChannel+0x854>)
 8002472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f7fe fdc6 	bl	800100e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002482:	e031      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <HAL_ADC_ConfigChannel+0x87c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d12d      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800248e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d127      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <HAL_ADC_ConfigChannel+0x864>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d022      	beq.n	80024ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ac:	d004      	beq.n	80024b8 <HAL_ADC_ConfigChannel+0x80c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_ADC_ConfigChannel+0x864>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x810>
 80024b8:	4a16      	ldr	r2, [pc, #88]	; (8002514 <HAL_ADC_ConfigChannel+0x868>)
 80024ba:	e000      	b.n	80024be <HAL_ADC_ConfigChannel+0x812>
 80024bc:	4a10      	ldr	r2, [pc, #64]	; (8002500 <HAL_ADC_ConfigChannel+0x854>)
 80024be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f7fe fda0 	bl	800100e <LL_ADC_SetCommonPathInternalCh>
 80024ce:	e00c      	b.n	80024ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80024e2:	e002      	b.n	80024ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e4:	bf00      	nop
 80024e6:	e000      	b.n	80024ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80024f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	37d8      	adds	r7, #216	; 0xd8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	50000700 	.word	0x50000700
 8002504:	c3210000 	.word	0xc3210000
 8002508:	90c00010 	.word	0x90c00010
 800250c:	50000600 	.word	0x50000600
 8002510:	50000100 	.word	0x50000100
 8002514:	50000300 	.word	0x50000300
 8002518:	20000004 	.word	0x20000004
 800251c:	053e2d63 	.word	0x053e2d63
 8002520:	c7520000 	.word	0xc7520000
 8002524:	50000500 	.word	0x50000500
 8002528:	cb840000 	.word	0xcb840000

0800252c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe ff90 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 8002548:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe ffb1 	bl	80014b6 <LL_ADC_INJ_IsConversionOngoing>
 8002554:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8098 	beq.w	8002694 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d02a      	beq.n	80025c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7f5b      	ldrb	r3, [r3, #29]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d126      	bne.n	80025c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7f1b      	ldrb	r3, [r3, #28]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d122      	bne.n	80025c8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002582:	2301      	movs	r3, #1
 8002584:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002586:	e014      	b.n	80025b2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	4a45      	ldr	r2, [pc, #276]	; (80026a0 <ADC_ConversionStop+0x174>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d90d      	bls.n	80025ac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	f043 0210 	orr.w	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e074      	b.n	8002696 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	3301      	adds	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d1e3      	bne.n	8002588 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d014      	beq.n	80025f8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe ff48 	bl	8001468 <LL_ADC_REG_IsConversionOngoing>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00c      	beq.n	80025f8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe ff05 	bl	80013f2 <LL_ADC_IsDisableOngoing>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d104      	bne.n	80025f8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe ff24 	bl	8001440 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d014      	beq.n	8002628 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe ff57 	bl	80014b6 <LL_ADC_INJ_IsConversionOngoing>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00c      	beq.n	8002628 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe feed 	bl	80013f2 <LL_ADC_IsDisableOngoing>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe ff33 	bl	800148e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d005      	beq.n	800263a <ADC_ConversionStop+0x10e>
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d105      	bne.n	8002640 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002634:	230c      	movs	r3, #12
 8002636:	617b      	str	r3, [r7, #20]
        break;
 8002638:	e005      	b.n	8002646 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800263a:	2308      	movs	r3, #8
 800263c:	617b      	str	r3, [r7, #20]
        break;
 800263e:	e002      	b.n	8002646 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002640:	2304      	movs	r3, #4
 8002642:	617b      	str	r3, [r7, #20]
        break;
 8002644:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002646:	f7fe fca1 	bl	8000f8c <HAL_GetTick>
 800264a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800264c:	e01b      	b.n	8002686 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800264e:	f7fe fc9d 	bl	8000f8c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b05      	cmp	r3, #5
 800265a:	d914      	bls.n	8002686 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e007      	b.n	8002696 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1dc      	bne.n	800264e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	a33fffff 	.word	0xa33fffff

080026a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fe89 	bl	80013cc <LL_ADC_IsEnabled>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d176      	bne.n	80027ae <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <ADC_Enable+0x114>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	f043 0210 	orr.w	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e062      	b.n	80027b0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fe44 	bl	800137c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026fc:	d004      	beq.n	8002708 <ADC_Enable+0x64>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2e      	ldr	r2, [pc, #184]	; (80027bc <ADC_Enable+0x118>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <ADC_Enable+0x68>
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <ADC_Enable+0x11c>)
 800270a:	e000      	b.n	800270e <ADC_Enable+0x6a>
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <ADC_Enable+0x120>)
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fc90 	bl	8001034 <LL_ADC_GetCommonPathInternalCh>
 8002714:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800271a:	2b00      	cmp	r3, #0
 800271c:	d013      	beq.n	8002746 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <ADC_Enable+0x124>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	4a29      	ldr	r2, [pc, #164]	; (80027cc <ADC_Enable+0x128>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	099b      	lsrs	r3, r3, #6
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002738:	e002      	b.n	8002740 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3b01      	subs	r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f9      	bne.n	800273a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002746:	f7fe fc21 	bl	8000f8c <HAL_GetTick>
 800274a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800274c:	e028      	b.n	80027a0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fe3a 	bl	80013cc <LL_ADC_IsEnabled>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d104      	bne.n	8002768 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fe0a 	bl	800137c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002768:	f7fe fc10 	bl	8000f8c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d914      	bls.n	80027a0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d00d      	beq.n	80027a0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	f043 0210 	orr.w	r2, r3, #16
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002794:	f043 0201 	orr.w	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e007      	b.n	80027b0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d1cf      	bne.n	800274e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	8000003f 	.word	0x8000003f
 80027bc:	50000100 	.word	0x50000100
 80027c0:	50000300 	.word	0x50000300
 80027c4:	50000700 	.word	0x50000700
 80027c8:	20000004 	.word	0x20000004
 80027cc:	053e2d63 	.word	0x053e2d63

080027d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fe08 	bl	80013f2 <LL_ADC_IsDisableOngoing>
 80027e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fdef 	bl	80013cc <LL_ADC_IsEnabled>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d047      	beq.n	8002884 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d144      	bne.n	8002884 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 030d 	and.w	r3, r3, #13
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10c      	bne.n	8002822 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fdc9 	bl	80013a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2203      	movs	r2, #3
 8002818:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800281a:	f7fe fbb7 	bl	8000f8c <HAL_GetTick>
 800281e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002820:	e029      	b.n	8002876 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e023      	b.n	8002886 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800283e:	f7fe fba5 	bl	8000f8c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d914      	bls.n	8002876 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00d      	beq.n	8002876 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	f043 0210 	orr.w	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1dc      	bne.n	800283e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <LL_ADC_IsEnabled>:
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <LL_ADC_IsEnabled+0x18>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_ADC_IsEnabled+0x1a>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_REG_IsConversionOngoing>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d101      	bne.n	80028cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b0a1      	sub	sp, #132	; 0x84
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0e7      	b.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002902:	2300      	movs	r3, #0
 8002904:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002906:	2300      	movs	r3, #0
 8002908:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002912:	d102      	bne.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002914:	4b6f      	ldr	r3, [pc, #444]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	e009      	b.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a6e      	ldr	r2, [pc, #440]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d102      	bne.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002924:	4b6d      	ldr	r3, [pc, #436]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	e001      	b.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10b      	bne.n	800294c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0be      	b.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ffb0 	bl	80028b4 <LL_ADC_REG_IsConversionOngoing>
 8002954:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ffaa 	bl	80028b4 <LL_ADC_REG_IsConversionOngoing>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 80a0 	bne.w	8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 809c 	bne.w	8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002978:	d004      	beq.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a55      	ldr	r2, [pc, #340]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d101      	bne.n	8002988 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002984:	4b56      	ldr	r3, [pc, #344]	; (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002986:	e000      	b.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002988:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800298a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d04b      	beq.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029a6:	035b      	lsls	r3, r3, #13
 80029a8:	430b      	orrs	r3, r1
 80029aa:	431a      	orrs	r2, r3
 80029ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b8:	d004      	beq.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a45      	ldr	r2, [pc, #276]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10f      	bne.n	80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80029c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029c8:	f7ff ff61 	bl	800288e <LL_ADC_IsEnabled>
 80029cc:	4604      	mov	r4, r0
 80029ce:	4841      	ldr	r0, [pc, #260]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029d0:	f7ff ff5d 	bl	800288e <LL_ADC_IsEnabled>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4323      	orrs	r3, r4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e012      	b.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80029e4:	483c      	ldr	r0, [pc, #240]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029e6:	f7ff ff52 	bl	800288e <LL_ADC_IsEnabled>
 80029ea:	4604      	mov	r4, r0
 80029ec:	483b      	ldr	r0, [pc, #236]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029ee:	f7ff ff4e 	bl	800288e <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	431c      	orrs	r4, r3
 80029f6:	483c      	ldr	r0, [pc, #240]	; (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029f8:	f7ff ff49 	bl	800288e <LL_ADC_IsEnabled>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4323      	orrs	r3, r4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d056      	beq.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a16:	f023 030f 	bic.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	6811      	ldr	r1, [r2, #0]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	6892      	ldr	r2, [r2, #8]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a28:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a2a:	e047      	b.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a36:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a40:	d004      	beq.n	8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a23      	ldr	r2, [pc, #140]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d10f      	bne.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a50:	f7ff ff1d 	bl	800288e <LL_ADC_IsEnabled>
 8002a54:	4604      	mov	r4, r0
 8002a56:	481f      	ldr	r0, [pc, #124]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a58:	f7ff ff19 	bl	800288e <LL_ADC_IsEnabled>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4323      	orrs	r3, r4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e012      	b.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002a6c:	481a      	ldr	r0, [pc, #104]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a6e:	f7ff ff0e 	bl	800288e <LL_ADC_IsEnabled>
 8002a72:	4604      	mov	r4, r0
 8002a74:	4819      	ldr	r0, [pc, #100]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a76:	f7ff ff0a 	bl	800288e <LL_ADC_IsEnabled>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	431c      	orrs	r4, r3
 8002a7e:	481a      	ldr	r0, [pc, #104]	; (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a80:	f7ff ff05 	bl	800288e <LL_ADC_IsEnabled>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4323      	orrs	r3, r4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d012      	beq.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a9e:	f023 030f 	bic.w	r3, r3, #15
 8002aa2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002aa4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002aa6:	e009      	b.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002aba:	e000      	b.n	8002abe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002abc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ac6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3784      	adds	r7, #132	; 0x84
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd90      	pop	{r4, r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	50000100 	.word	0x50000100
 8002ad8:	50000400 	.word	0x50000400
 8002adc:	50000500 	.word	0x50000500
 8002ae0:	50000300 	.word	0x50000300
 8002ae4:	50000700 	.word	0x50000700
 8002ae8:	50000600 	.word	0x50000600

08002aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db0b      	blt.n	8002b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <__NVIC_EnableIRQ+0x38>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2001      	movs	r0, #1
 8002b72:	fa00 f202 	lsl.w	r2, r0, r2
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000e100 	.word	0xe000e100

08002b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	db0a      	blt.n	8002bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	490c      	ldr	r1, [pc, #48]	; (8002bd8 <__NVIC_SetPriority+0x4c>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	0112      	lsls	r2, r2, #4
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4908      	ldr	r1, [pc, #32]	; (8002bdc <__NVIC_SetPriority+0x50>)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3b04      	subs	r3, #4
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	440b      	add	r3, r1
 8002bca:	761a      	strb	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e100 	.word	0xe000e100
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f1c3 0307 	rsb	r3, r3, #7
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	bf28      	it	cs
 8002bfe:	2304      	movcs	r3, #4
 8002c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d902      	bls.n	8002c10 <NVIC_EncodePriority+0x30>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3b03      	subs	r3, #3
 8002c0e:	e000      	b.n	8002c12 <NVIC_EncodePriority+0x32>
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43d9      	mvns	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	4313      	orrs	r3, r2
         );
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c58:	d301      	bcc.n	8002c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <SysTick_Config+0x40>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c66:	210f      	movs	r1, #15
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f7ff ff8e 	bl	8002b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <SysTick_Config+0x40>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <SysTick_Config+0x40>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff29 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb0:	f7ff ff40 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff90 	bl	8002be0 <NVIC_EncodePriority>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff5f 	bl	8002b8c <__NVIC_SetPriority>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff33 	bl	8002b50 <__NVIC_EnableIRQ>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ffa4 	bl	8002c48 <SysTick_Config>
 8002d00:	4603      	mov	r3, r0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d00d      	beq.n	8002d3e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2204      	movs	r2, #4
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e047      	b.n	8002dce <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 020e 	bic.w	r2, r2, #14
 8002d4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f003 021f 	and.w	r2, r3, #31
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d80:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d8a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00c      	beq.n	8002dae <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002da2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002dac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
    }
  }
  return status;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002de6:	e15a      	b.n	800309e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2101      	movs	r1, #1
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 814c 	beq.w	8003098 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d005      	beq.n	8002e18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d130      	bne.n	8002e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e4e:	2201      	movs	r2, #1
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	f003 0201 	and.w	r2, r3, #1
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d017      	beq.n	8002eb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	2203      	movs	r2, #3
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d123      	bne.n	8002f0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	08da      	lsrs	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3208      	adds	r2, #8
 8002eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	220f      	movs	r2, #15
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	08da      	lsrs	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3208      	adds	r2, #8
 8002f04:	6939      	ldr	r1, [r7, #16]
 8002f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0203 	and.w	r2, r3, #3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80a6 	beq.w	8003098 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4c:	4b5b      	ldr	r3, [pc, #364]	; (80030bc <HAL_GPIO_Init+0x2e4>)
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f50:	4a5a      	ldr	r2, [pc, #360]	; (80030bc <HAL_GPIO_Init+0x2e4>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6613      	str	r3, [r2, #96]	; 0x60
 8002f58:	4b58      	ldr	r3, [pc, #352]	; (80030bc <HAL_GPIO_Init+0x2e4>)
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f64:	4a56      	ldr	r2, [pc, #344]	; (80030c0 <HAL_GPIO_Init+0x2e8>)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f8e:	d01f      	beq.n	8002fd0 <HAL_GPIO_Init+0x1f8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a4c      	ldr	r2, [pc, #304]	; (80030c4 <HAL_GPIO_Init+0x2ec>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d019      	beq.n	8002fcc <HAL_GPIO_Init+0x1f4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a4b      	ldr	r2, [pc, #300]	; (80030c8 <HAL_GPIO_Init+0x2f0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <HAL_GPIO_Init+0x1f0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a4a      	ldr	r2, [pc, #296]	; (80030cc <HAL_GPIO_Init+0x2f4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_GPIO_Init+0x1ec>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a49      	ldr	r2, [pc, #292]	; (80030d0 <HAL_GPIO_Init+0x2f8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d007      	beq.n	8002fc0 <HAL_GPIO_Init+0x1e8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a48      	ldr	r2, [pc, #288]	; (80030d4 <HAL_GPIO_Init+0x2fc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d101      	bne.n	8002fbc <HAL_GPIO_Init+0x1e4>
 8002fb8:	2305      	movs	r3, #5
 8002fba:	e00a      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fbc:	2306      	movs	r3, #6
 8002fbe:	e008      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	e006      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e004      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e002      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	f002 0203 	and.w	r2, r2, #3
 8002fd8:	0092      	lsls	r2, r2, #2
 8002fda:	4093      	lsls	r3, r2
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe2:	4937      	ldr	r1, [pc, #220]	; (80030c0 <HAL_GPIO_Init+0x2e8>)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	3302      	adds	r3, #2
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ff0:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003014:	4a30      	ldr	r2, [pc, #192]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_GPIO_Init+0x300>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800303e:	4a26      	ldr	r2, [pc, #152]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	43db      	mvns	r3, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003068:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <HAL_GPIO_Init+0x300>)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003092:	4a11      	ldr	r2, [pc, #68]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3301      	adds	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f47f ae9d 	bne.w	8002de8 <HAL_GPIO_Init+0x10>
  }
}
 80030ae:	bf00      	nop
 80030b0:	bf00      	nop
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40010000 	.word	0x40010000
 80030c4:	48000400 	.word	0x48000400
 80030c8:	48000800 	.word	0x48000800
 80030cc:	48000c00 	.word	0x48000c00
 80030d0:	48001000 	.word	0x48001000
 80030d4:	48001400 	.word	0x48001400
 80030d8:	40010400 	.word	0x40010400

080030dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
 80030e8:	4613      	mov	r3, r2
 80030ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ec:	787b      	ldrb	r3, [r7, #1]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f806 	bl	800313c <HAL_GPIO_EXTI_Callback>
  }
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40010400 	.word	0x40010400

0800313c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d141      	bne.n	80031e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003162:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316e:	d131      	bne.n	80031d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003170:	4b47      	ldr	r3, [pc, #284]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003176:	4a46      	ldr	r2, [pc, #280]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800317c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003180:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003188:	4a41      	ldr	r2, [pc, #260]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800318e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003190:	4b40      	ldr	r3, [pc, #256]	; (8003294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2232      	movs	r2, #50	; 0x32
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	4a3f      	ldr	r2, [pc, #252]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	3301      	adds	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031a6:	e002      	b.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ae:	4b38      	ldr	r3, [pc, #224]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ba:	d102      	bne.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f2      	bne.n	80031a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031c2:	4b33      	ldr	r3, [pc, #204]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d158      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e057      	b.n	8003284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d4:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031da:	4a2d      	ldr	r2, [pc, #180]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031e4:	e04d      	b.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ec:	d141      	bne.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ee:	4b28      	ldr	r3, [pc, #160]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fa:	d131      	bne.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003202:	4a23      	ldr	r2, [pc, #140]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003208:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800320c:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003214:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800321a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2232      	movs	r2, #50	; 0x32
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	0c9b      	lsrs	r3, r3, #18
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003232:	e002      	b.n	800323a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3b01      	subs	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003246:	d102      	bne.n	800324e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f2      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325a:	d112      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e011      	b.n	8003284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003270:	e007      	b.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003272:	4b07      	ldr	r3, [pc, #28]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800327a:	4a05      	ldr	r2, [pc, #20]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003280:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40007000 	.word	0x40007000
 8003294:	20000004 	.word	0x20000004
 8003298:	431bde83 	.word	0x431bde83

0800329c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032aa:	6093      	str	r3, [r2, #8]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40007000 	.word	0x40007000

080032bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e2fe      	b.n	80038cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d075      	beq.n	80033c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032da:	4b97      	ldr	r3, [pc, #604]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e4:	4b94      	ldr	r3, [pc, #592]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b0c      	cmp	r3, #12
 80032f2:	d102      	bne.n	80032fa <HAL_RCC_OscConfig+0x3e>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d002      	beq.n	8003300 <HAL_RCC_OscConfig+0x44>
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d10b      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	4b8d      	ldr	r3, [pc, #564]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05b      	beq.n	80033c4 <HAL_RCC_OscConfig+0x108>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d157      	bne.n	80033c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e2d9      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x74>
 8003322:	4b85      	ldr	r3, [pc, #532]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a84      	ldr	r2, [pc, #528]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x98>
 800333a:	4b7f      	ldr	r3, [pc, #508]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a7e      	ldr	r2, [pc, #504]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b7c      	ldr	r3, [pc, #496]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7b      	ldr	r2, [pc, #492]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003354:	4b78      	ldr	r3, [pc, #480]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a77      	ldr	r2, [pc, #476]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b75      	ldr	r3, [pc, #468]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a74      	ldr	r2, [pc, #464]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fd fe0a 	bl	8000f8c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337c:	f7fd fe06 	bl	8000f8c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e29e      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338e:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0xc0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fd fdf6 	bl	8000f8c <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fd fdf2 	bl	8000f8c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e28a      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b6:	4b60      	ldr	r3, [pc, #384]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0xe8>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d075      	beq.n	80034be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d2:	4b59      	ldr	r3, [pc, #356]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033dc:	4b56      	ldr	r3, [pc, #344]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d102      	bne.n	80033f2 <HAL_RCC_OscConfig+0x136>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_OscConfig+0x13c>
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d11f      	bne.n	8003438 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f8:	4b4f      	ldr	r3, [pc, #316]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_OscConfig+0x154>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e25d      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b49      	ldr	r3, [pc, #292]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	4946      	ldr	r1, [pc, #280]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003424:	4b45      	ldr	r3, [pc, #276]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd fd63 	bl	8000ef4 <HAL_InitTick>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d043      	beq.n	80034bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e249      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d023      	beq.n	8003488 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003440:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a3c      	ldr	r2, [pc, #240]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fd fd9e 	bl	8000f8c <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003454:	f7fd fd9a 	bl	8000f8c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e232      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003466:	4b34      	ldr	r3, [pc, #208]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b31      	ldr	r3, [pc, #196]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	061b      	lsls	r3, r3, #24
 8003480:	492d      	ldr	r1, [pc, #180]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003482:	4313      	orrs	r3, r2
 8003484:	604b      	str	r3, [r1, #4]
 8003486:	e01a      	b.n	80034be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2a      	ldr	r2, [pc, #168]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 800348e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fd fd7a 	bl	8000f8c <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349c:	f7fd fd76 	bl	8000f8c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e20e      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ae:	4b22      	ldr	r3, [pc, #136]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x1e0>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d041      	beq.n	800354e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01c      	beq.n	800350c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d8:	4a17      	ldr	r2, [pc, #92]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fd fd53 	bl	8000f8c <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ea:	f7fd fd4f 	bl	8000f8c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e1e7      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034fc:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ef      	beq.n	80034ea <HAL_RCC_OscConfig+0x22e>
 800350a:	e020      	b.n	800354e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 800350e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fd fd36 	bl	8000f8c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003522:	e00d      	b.n	8003540 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003524:	f7fd fd32 	bl	8000f8c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d906      	bls.n	8003540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e1ca      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003540:	4b8c      	ldr	r3, [pc, #560]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1ea      	bne.n	8003524 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80a6 	beq.w	80036a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003560:	4b84      	ldr	r3, [pc, #528]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_OscConfig+0x2b4>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x2b6>
 8003570:	2300      	movs	r3, #0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	4b7f      	ldr	r3, [pc, #508]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	4a7e      	ldr	r2, [pc, #504]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6593      	str	r3, [r2, #88]	; 0x58
 8003582:	4b7c      	ldr	r3, [pc, #496]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003592:	4b79      	ldr	r3, [pc, #484]	; (8003778 <HAL_RCC_OscConfig+0x4bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d118      	bne.n	80035d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359e:	4b76      	ldr	r3, [pc, #472]	; (8003778 <HAL_RCC_OscConfig+0x4bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a75      	ldr	r2, [pc, #468]	; (8003778 <HAL_RCC_OscConfig+0x4bc>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fd fcef 	bl	8000f8c <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fd fceb 	bl	8000f8c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e183      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c4:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <HAL_RCC_OscConfig+0x4bc>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d108      	bne.n	80035ea <HAL_RCC_OscConfig+0x32e>
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	4a65      	ldr	r2, [pc, #404]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e8:	e024      	b.n	8003634 <HAL_RCC_OscConfig+0x378>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d110      	bne.n	8003614 <HAL_RCC_OscConfig+0x358>
 80035f2:	4b60      	ldr	r3, [pc, #384]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	4a5e      	ldr	r2, [pc, #376]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003602:	4b5c      	ldr	r3, [pc, #368]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	4a5a      	ldr	r2, [pc, #360]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003612:	e00f      	b.n	8003634 <HAL_RCC_OscConfig+0x378>
 8003614:	4b57      	ldr	r3, [pc, #348]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	4a56      	ldr	r2, [pc, #344]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003624:	4b53      	ldr	r3, [pc, #332]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	4a52      	ldr	r2, [pc, #328]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d016      	beq.n	800366a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fd fca6 	bl	8000f8c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fd fca2 	bl	8000f8c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e138      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365a:	4b46      	ldr	r3, [pc, #280]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ed      	beq.n	8003644 <HAL_RCC_OscConfig+0x388>
 8003668:	e015      	b.n	8003696 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7fd fc8f 	bl	8000f8c <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fd fc8b 	bl	8000f8c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e121      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003688:	4b3a      	ldr	r3, [pc, #232]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1ed      	bne.n	8003672 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003696:	7ffb      	ldrb	r3, [r7, #31]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d105      	bne.n	80036a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369c:	4b35      	ldr	r3, [pc, #212]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	4a34      	ldr	r2, [pc, #208]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d03c      	beq.n	800372e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036bc:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c2:	4a2c      	ldr	r2, [pc, #176]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fd fc5e 	bl	8000f8c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036d4:	f7fd fc5a 	bl	8000f8c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e0f2      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036e6:	4b23      	ldr	r3, [pc, #140]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ef      	beq.n	80036d4 <HAL_RCC_OscConfig+0x418>
 80036f4:	e01b      	b.n	800372e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036f6:	4b1f      	ldr	r3, [pc, #124]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fd fc41 	bl	8000f8c <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800370e:	f7fd fc3d 	bl	8000f8c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0d5      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003720:	4b14      	ldr	r3, [pc, #80]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ef      	bne.n	800370e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80c9 	beq.w	80038ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b0c      	cmp	r3, #12
 8003742:	f000 8083 	beq.w	800384c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d15e      	bne.n	800380c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a08      	ldr	r2, [pc, #32]	; (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003754:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fd fc17 	bl	8000f8c <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003760:	e00c      	b.n	800377c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd fc13 	bl	8000f8c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d905      	bls.n	800377c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0ab      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377c:	4b55      	ldr	r3, [pc, #340]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ec      	bne.n	8003762 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003788:	4b52      	ldr	r3, [pc, #328]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	4b52      	ldr	r3, [pc, #328]	; (80038d8 <HAL_RCC_OscConfig+0x61c>)
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6a11      	ldr	r1, [r2, #32]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003798:	3a01      	subs	r2, #1
 800379a:	0112      	lsls	r2, r2, #4
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037a2:	0212      	lsls	r2, r2, #8
 80037a4:	4311      	orrs	r1, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037aa:	0852      	lsrs	r2, r2, #1
 80037ac:	3a01      	subs	r2, #1
 80037ae:	0552      	lsls	r2, r2, #21
 80037b0:	4311      	orrs	r1, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037b6:	0852      	lsrs	r2, r2, #1
 80037b8:	3a01      	subs	r2, #1
 80037ba:	0652      	lsls	r2, r2, #25
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037c2:	06d2      	lsls	r2, r2, #27
 80037c4:	430a      	orrs	r2, r1
 80037c6:	4943      	ldr	r1, [pc, #268]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037cc:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a40      	ldr	r2, [pc, #256]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 80037d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d8:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a3d      	ldr	r2, [pc, #244]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fd fbd2 	bl	8000f8c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd fbce 	bl	8000f8c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e066      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fe:	4b35      	ldr	r3, [pc, #212]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x530>
 800380a:	e05e      	b.n	80038ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380c:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a30      	ldr	r2, [pc, #192]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 8003812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fd fbb8 	bl	8000f8c <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fd fbb4 	bl	8000f8c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e04c      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003832:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800383e:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	4924      	ldr	r1, [pc, #144]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <HAL_RCC_OscConfig+0x620>)
 8003846:	4013      	ands	r3, r2
 8003848:	60cb      	str	r3, [r1, #12]
 800384a:	e03e      	b.n	80038ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e039      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003858:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <HAL_RCC_OscConfig+0x618>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0203 	and.w	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	429a      	cmp	r2, r3
 800386a:	d12c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	3b01      	subs	r3, #1
 8003878:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d123      	bne.n	80038c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d11b      	bne.n	80038c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d113      	bne.n	80038c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	3b01      	subs	r3, #1
 80038ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038bc:	085b      	lsrs	r3, r3, #1
 80038be:	3b01      	subs	r3, #1
 80038c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000
 80038d8:	019f800c 	.word	0x019f800c
 80038dc:	feeefffc 	.word	0xfeeefffc

080038e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e11e      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b91      	ldr	r3, [pc, #580]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d910      	bls.n	8003928 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b8e      	ldr	r3, [pc, #568]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 020f 	bic.w	r2, r3, #15
 800390e:	498c      	ldr	r1, [pc, #560]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b8a      	ldr	r3, [pc, #552]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e106      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d073      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d129      	bne.n	8003990 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393c:	4b81      	ldr	r3, [pc, #516]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0f4      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800394c:	f000 f99e 	bl	8003c8c <RCC_GetSysClockFreqFromPLLSource>
 8003950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4a7c      	ldr	r2, [pc, #496]	; (8003b48 <HAL_RCC_ClockConfig+0x268>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d93f      	bls.n	80039da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800395a:	4b7a      	ldr	r3, [pc, #488]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800396e:	2b00      	cmp	r3, #0
 8003970:	d033      	beq.n	80039da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003976:	2b00      	cmp	r3, #0
 8003978:	d12f      	bne.n	80039da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800397a:	4b72      	ldr	r3, [pc, #456]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003982:	4a70      	ldr	r2, [pc, #448]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003988:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e024      	b.n	80039da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003998:	4b6a      	ldr	r3, [pc, #424]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0c6      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a8:	4b66      	ldr	r3, [pc, #408]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0be      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80039b8:	f000 f8ce 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4a61      	ldr	r2, [pc, #388]	; (8003b48 <HAL_RCC_ClockConfig+0x268>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d909      	bls.n	80039da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039c6:	4b5f      	ldr	r3, [pc, #380]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ce:	4a5d      	ldr	r2, [pc, #372]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 80039d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039da:	4b5a      	ldr	r3, [pc, #360]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f023 0203 	bic.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4957      	ldr	r1, [pc, #348]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ec:	f7fd face 	bl	8000f8c <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f4:	f7fd faca 	bl	8000f8c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e095      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	4b4e      	ldr	r3, [pc, #312]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 020c 	and.w	r2, r3, #12
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d1eb      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d023      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a42      	ldr	r2, [pc, #264]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a4c:	4b3d      	ldr	r3, [pc, #244]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a54:	4a3b      	ldr	r2, [pc, #236]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b39      	ldr	r3, [pc, #228]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4936      	ldr	r1, [pc, #216]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b80      	cmp	r3, #128	; 0x80
 8003a74:	d105      	bne.n	8003a82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a76:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	4a32      	ldr	r2, [pc, #200]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a82:	4b2f      	ldr	r3, [pc, #188]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d21d      	bcs.n	8003acc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a90:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 020f 	bic.w	r2, r3, #15
 8003a98:	4929      	ldr	r1, [pc, #164]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003aa0:	f7fd fa74 	bl	8000f8c <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fd fa70 	bl	8000f8c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e03b      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1ed      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad8:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4917      	ldr	r1, [pc, #92]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	490f      	ldr	r1, [pc, #60]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b0a:	f000 f825 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	490c      	ldr	r1, [pc, #48]	; (8003b4c <HAL_RCC_ClockConfig+0x26c>)
 8003b1c:	5ccb      	ldrb	r3, [r1, r3]
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <HAL_RCC_ClockConfig+0x270>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <HAL_RCC_ClockConfig+0x274>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd f9e0 	bl	8000ef4 <HAL_InitTick>
 8003b34:	4603      	mov	r3, r0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40022000 	.word	0x40022000
 8003b44:	40021000 	.word	0x40021000
 8003b48:	04c4b400 	.word	0x04c4b400
 8003b4c:	08006424 	.word	0x08006424
 8003b50:	20000004 	.word	0x20000004
 8003b54:	20000008 	.word	0x20000008

08003b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d102      	bne.n	8003b70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b6a:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	e047      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b70:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d102      	bne.n	8003b82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b7c:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	e03e      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b82:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d136      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b98:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d10c      	bne.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bac:	4a1a      	ldr	r2, [pc, #104]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb6:	68d2      	ldr	r2, [r2, #12]
 8003bb8:	0a12      	lsrs	r2, r2, #8
 8003bba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	617b      	str	r3, [r7, #20]
      break;
 8003bc4:	e00c      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bc6:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bce:	4a10      	ldr	r2, [pc, #64]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	0a12      	lsrs	r2, r2, #8
 8003bd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	617b      	str	r3, [r7, #20]
      break;
 8003bde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	0e5b      	lsrs	r3, r3, #25
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	3301      	adds	r3, #1
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e001      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c00:	693b      	ldr	r3, [r7, #16]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	00f42400 	.word	0x00f42400
 8003c18:	016e3600 	.word	0x016e3600

08003c1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000004 	.word	0x20000004

08003c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c38:	f7ff fff0 	bl	8003c1c <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4904      	ldr	r1, [pc, #16]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	08006434 	.word	0x08006434

08003c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c64:	f7ff ffda 	bl	8003c1c <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0adb      	lsrs	r3, r3, #11
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4904      	ldr	r1, [pc, #16]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	08006434 	.word	0x08006434

08003c8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d10c      	bne.n	8003cca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cb0:	4a17      	ldr	r2, [pc, #92]	; (8003d10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cba:	68d2      	ldr	r2, [r2, #12]
 8003cbc:	0a12      	lsrs	r2, r2, #8
 8003cbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]
    break;
 8003cc8:	e00c      	b.n	8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cca:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	4a0e      	ldr	r2, [pc, #56]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cd4:	68d2      	ldr	r2, [r2, #12]
 8003cd6:	0a12      	lsrs	r2, r2, #8
 8003cd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cdc:	fb02 f303 	mul.w	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
    break;
 8003ce2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0e5b      	lsrs	r3, r3, #25
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cfe:	687b      	ldr	r3, [r7, #4]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	016e3600 	.word	0x016e3600
 8003d14:	00f42400 	.word	0x00f42400

08003d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d20:	2300      	movs	r3, #0
 8003d22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d24:	2300      	movs	r3, #0
 8003d26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8098 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3a:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	4b40      	ldr	r3, [pc, #256]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	4a3f      	ldr	r2, [pc, #252]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6593      	str	r3, [r2, #88]	; 0x58
 8003d52:	4b3d      	ldr	r3, [pc, #244]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d62:	4b3a      	ldr	r3, [pc, #232]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a39      	ldr	r2, [pc, #228]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d6e:	f7fd f90d 	bl	8000f8c <HAL_GetTick>
 8003d72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d74:	e009      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fd f909 	bl	8000f8c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d902      	bls.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	74fb      	strb	r3, [r7, #19]
        break;
 8003d88:	e005      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0ef      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d159      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01e      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d019      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003db8:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc4:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd4:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de4:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d016      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df6:	f7fd f8c9 	bl	8000f8c <HAL_GetTick>
 8003dfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfc:	e00b      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fd f8c5 	bl	8000f8c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d902      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	74fb      	strb	r3, [r7, #19]
            break;
 8003e14:	e006      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ec      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e38:	4903      	ldr	r1, [pc, #12]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e40:	e008      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e42:	7cfb      	ldrb	r3, [r7, #19]
 8003e44:	74bb      	strb	r3, [r7, #18]
 8003e46:	e005      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e54:	7c7b      	ldrb	r3, [r7, #17]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5a:	4ba7      	ldr	r3, [pc, #668]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	4aa6      	ldr	r2, [pc, #664]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e72:	4ba1      	ldr	r3, [pc, #644]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f023 0203 	bic.w	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	499d      	ldr	r1, [pc, #628]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e94:	4b98      	ldr	r3, [pc, #608]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	f023 020c 	bic.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4995      	ldr	r1, [pc, #596]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eb6:	4b90      	ldr	r3, [pc, #576]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	498c      	ldr	r1, [pc, #560]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ed8:	4b87      	ldr	r3, [pc, #540]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	4984      	ldr	r1, [pc, #528]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003efa:	4b7f      	ldr	r3, [pc, #508]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	497b      	ldr	r1, [pc, #492]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1c:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	4973      	ldr	r1, [pc, #460]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f3e:	4b6e      	ldr	r3, [pc, #440]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	496a      	ldr	r1, [pc, #424]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f60:	4b65      	ldr	r3, [pc, #404]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	4962      	ldr	r1, [pc, #392]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f82:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	4959      	ldr	r1, [pc, #356]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fa4:	4b54      	ldr	r3, [pc, #336]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	4951      	ldr	r1, [pc, #324]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc6:	4b4c      	ldr	r3, [pc, #304]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4948      	ldr	r1, [pc, #288]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d015      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fe8:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	4940      	ldr	r1, [pc, #256]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004006:	d105      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004008:	4b3b      	ldr	r3, [pc, #236]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a3a      	ldr	r2, [pc, #232]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004012:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004020:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	4932      	ldr	r1, [pc, #200]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800403e:	d105      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004040:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a2c      	ldr	r2, [pc, #176]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800404a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	4924      	ldr	r1, [pc, #144]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004076:	d105      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004078:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004082:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d015      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	4916      	ldr	r1, [pc, #88]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ae:	d105      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d019      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	4908      	ldr	r1, [pc, #32]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e6:	d109      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4a02      	ldr	r2, [pc, #8]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040f2:	60d3      	str	r3, [r2, #12]
 80040f4:	e002      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004108:	4b29      	ldr	r3, [pc, #164]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	4926      	ldr	r1, [pc, #152]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004126:	d105      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004128:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a20      	ldr	r2, [pc, #128]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800412e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004132:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	4918      	ldr	r1, [pc, #96]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d105      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004160:	4b13      	ldr	r3, [pc, #76]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d015      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800417a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800417e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	490a      	ldr	r1, [pc, #40]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004196:	d105      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800419e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000

080041b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e09d      	b.n	8004302 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d6:	d009      	beq.n	80041ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	61da      	str	r2, [r3, #28]
 80041de:	e005      	b.n	80041ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fc fd62 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004222:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800422c:	d902      	bls.n	8004234 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	e002      	b.n	800423a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004238:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004242:	d007      	beq.n	8004254 <HAL_SPI_Init+0xa0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800424c:	d002      	beq.n	8004254 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	ea42 0103 	orr.w	r1, r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	0c1b      	lsrs	r3, r3, #16
 80042b0:	f003 0204 	and.w	r2, r3, #4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80042d0:	ea42 0103 	orr.w	r1, r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b088      	sub	sp, #32
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	603b      	str	r3, [r7, #0]
 8004316:	4613      	mov	r3, r2
 8004318:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_SPI_Transmit+0x22>
 8004328:	2302      	movs	r3, #2
 800432a:	e15f      	b.n	80045ec <HAL_SPI_Transmit+0x2e2>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004334:	f7fc fe2a 	bl	8000f8c <HAL_GetTick>
 8004338:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b01      	cmp	r3, #1
 8004348:	d002      	beq.n	8004350 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800434a:	2302      	movs	r3, #2
 800434c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800434e:	e148      	b.n	80045e2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_SPI_Transmit+0x52>
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004360:	e13f      	b.n	80045e2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2203      	movs	r2, #3
 8004366:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	88fa      	ldrh	r2, [r7, #6]
 800437a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ac:	d10f      	bne.n	80043ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d007      	beq.n	80043ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043f4:	d94f      	bls.n	8004496 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_SPI_Transmit+0xfa>
 80043fe:	8afb      	ldrh	r3, [r7, #22]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d142      	bne.n	800448a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	881a      	ldrh	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	1c9a      	adds	r2, r3, #2
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004428:	e02f      	b.n	800448a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d112      	bne.n	800445e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	881a      	ldrh	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	1c9a      	adds	r2, r3, #2
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800445c:	e015      	b.n	800448a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800445e:	f7fc fd95 	bl	8000f8c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d803      	bhi.n	8004476 <HAL_SPI_Transmit+0x16c>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d102      	bne.n	800447c <HAL_SPI_Transmit+0x172>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d106      	bne.n	800448a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004488:	e0ab      	b.n	80045e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ca      	bne.n	800442a <HAL_SPI_Transmit+0x120>
 8004494:	e080      	b.n	8004598 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Transmit+0x19a>
 800449e:	8afb      	ldrh	r3, [r7, #22]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d174      	bne.n	800458e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d912      	bls.n	80044d4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	881a      	ldrh	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	1c9a      	adds	r2, r3, #2
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b02      	subs	r3, #2
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044d2:	e05c      	b.n	800458e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	7812      	ldrb	r2, [r2, #0]
 80044e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80044fa:	e048      	b.n	800458e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b02      	cmp	r3, #2
 8004508:	d12b      	bne.n	8004562 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d912      	bls.n	800453a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	881a      	ldrh	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	1c9a      	adds	r2, r3, #2
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b02      	subs	r3, #2
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004538:	e029      	b.n	800458e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004560:	e015      	b.n	800458e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004562:	f7fc fd13 	bl	8000f8c <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d803      	bhi.n	800457a <HAL_SPI_Transmit+0x270>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d102      	bne.n	8004580 <HAL_SPI_Transmit+0x276>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800458c:	e029      	b.n	80045e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1b1      	bne.n	80044fc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	6839      	ldr	r1, [r7, #0]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fa5b 	bl	8004a58 <SPI_EndRxTxTransaction>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	77fb      	strb	r3, [r7, #31]
 80045d8:	e003      	b.n	80045e2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10e      	bne.n	8004634 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
    return;
 8004632:	e0ce      	b.n	80047d2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <HAL_SPI_IRQHandler+0x5e>
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	4798      	blx	r3
    return;
 8004650:	e0bf      	b.n	80047d2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <HAL_SPI_IRQHandler+0x7e>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d105      	bne.n	8004672 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80b0 	beq.w	80047d2 <HAL_SPI_IRQHandler+0x1de>
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80aa 	beq.w	80047d2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d023      	beq.n	80046d0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b03      	cmp	r3, #3
 8004692:	d011      	beq.n	80046b8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004698:	f043 0204 	orr.w	r2, r3, #4
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	e00b      	b.n	80046d0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046b8:	2300      	movs	r3, #0
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]
        return;
 80046ce:	e080      	b.n	80047d2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d014      	beq.n	8004704 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046de:	f043 0201 	orr.w	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	f043 0208 	orr.w	r2, r3, #8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472c:	2b00      	cmp	r3, #0
 800472e:	d04f      	beq.n	80047d0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800473e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <HAL_SPI_IRQHandler+0x168>
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d034      	beq.n	80047c6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0203 	bic.w	r2, r2, #3
 800476a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	2b00      	cmp	r3, #0
 8004772:	d011      	beq.n	8004798 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <HAL_SPI_IRQHandler+0x1e4>)
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004780:	4618      	mov	r0, r3
 8004782:	f7fe fac2 	bl	8002d0a <HAL_DMA_Abort_IT>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479c:	2b00      	cmp	r3, #0
 800479e:	d016      	beq.n	80047ce <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <HAL_SPI_IRQHandler+0x1e4>)
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe faac 	bl	8002d0a <HAL_DMA_Abort_IT>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80047c4:	e003      	b.n	80047ce <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f808 	bl	80047dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80047cc:	e000      	b.n	80047d0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80047ce:	bf00      	nop
    return;
 80047d0:	bf00      	nop
  }
}
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	080047f1 	.word	0x080047f1

080047dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff ffe5 	bl	80047dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800482c:	f7fc fbae 	bl	8000f8c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	4413      	add	r3, r2
 800483a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800483c:	f7fc fba6 	bl	8000f8c <HAL_GetTick>
 8004840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004842:	4b39      	ldr	r3, [pc, #228]	; (8004928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	015b      	lsls	r3, r3, #5
 8004848:	0d1b      	lsrs	r3, r3, #20
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	fb02 f303 	mul.w	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004852:	e054      	b.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	d050      	beq.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800485c:	f7fc fb96 	bl	8000f8c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	429a      	cmp	r2, r3
 800486a:	d902      	bls.n	8004872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d13d      	bne.n	80048ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488a:	d111      	bne.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004894:	d004      	beq.n	80048a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489e:	d107      	bne.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b8:	d10f      	bne.n	80048da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e017      	b.n	800491e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4013      	ands	r3, r2
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	429a      	cmp	r2, r3
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	429a      	cmp	r2, r3
 800491a:	d19b      	bne.n	8004854 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000004 	.word	0x20000004

0800492c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800493e:	f7fc fb25 	bl	8000f8c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	4413      	add	r3, r2
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800494e:	f7fc fb1d 	bl	8000f8c <HAL_GetTick>
 8004952:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800495c:	4b3d      	ldr	r3, [pc, #244]	; (8004a54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00da      	lsls	r2, r3, #3
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	0d1b      	lsrs	r3, r3, #20
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004974:	e060      	b.n	8004a38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800497c:	d107      	bne.n	800498e <SPI_WaitFifoStateUntilTimeout+0x62>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d104      	bne.n	800498e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800498c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d050      	beq.n	8004a38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004996:	f7fc faf9 	bl	8000f8c <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d902      	bls.n	80049ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d13d      	bne.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c4:	d111      	bne.n	80049ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ce:	d004      	beq.n	80049da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d8:	d107      	bne.n	80049ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f2:	d10f      	bne.n	8004a14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e010      	b.n	8004a4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4013      	ands	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d196      	bne.n	8004976 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3728      	adds	r7, #40	; 0x28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000004 	.word	0x20000004

08004a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff ff5b 	bl	800492c <SPI_WaitFifoStateUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e027      	b.n	8004adc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2200      	movs	r2, #0
 8004a94:	2180      	movs	r1, #128	; 0x80
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff fec0 	bl	800481c <SPI_WaitFlagStateUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa6:	f043 0220 	orr.w	r2, r3, #32
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e014      	b.n	8004adc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff ff34 	bl	800492c <SPI_WaitFifoStateUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e000      	b.n	8004adc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e042      	b.n	8004b7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7fc f889 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2224      	movs	r2, #36	; 0x24
 8004b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fc7a 	bl	8005428 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f97b 	bl	8004e30 <UART_SetConfig>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e01b      	b.n	8004b7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fcf9 	bl	800556c <UART_CheckIdleState>
 8004b7a:	4603      	mov	r3, r0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	4613      	mov	r3, r2
 8004b92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d17b      	bne.n	8004c96 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_UART_Transmit+0x26>
 8004ba4:	88fb      	ldrh	r3, [r7, #6]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e074      	b.n	8004c98 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2221      	movs	r2, #33	; 0x21
 8004bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bbe:	f7fc f9e5 	bl	8000f8c <HAL_GetTick>
 8004bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	88fa      	ldrh	r2, [r7, #6]
 8004bd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d108      	bne.n	8004bf0 <HAL_UART_Transmit+0x6c>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	e003      	b.n	8004bf8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bf8:	e030      	b.n	8004c5c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fd5b 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e03d      	b.n	8004c98 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	3302      	adds	r3, #2
 8004c36:	61bb      	str	r3, [r7, #24]
 8004c38:	e007      	b.n	8004c4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3301      	adds	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1c8      	bne.n	8004bfa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2140      	movs	r1, #64	; 0x40
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fd24 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e006      	b.n	8004c98 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e000      	b.n	8004c98 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	f040 80b5 	bne.w	8004e26 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_UART_Receive+0x28>
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0ad      	b.n	8004e28 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2222      	movs	r2, #34	; 0x22
 8004cd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce2:	f7fc f953 	bl	8000f8c <HAL_GetTick>
 8004ce6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	88fa      	ldrh	r2, [r7, #6]
 8004cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d00:	d10e      	bne.n	8004d20 <HAL_UART_Receive+0x80>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d105      	bne.n	8004d16 <HAL_UART_Receive+0x76>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d14:	e02d      	b.n	8004d72 <HAL_UART_Receive+0xd2>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	22ff      	movs	r2, #255	; 0xff
 8004d1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d1e:	e028      	b.n	8004d72 <HAL_UART_Receive+0xd2>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10d      	bne.n	8004d44 <HAL_UART_Receive+0xa4>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <HAL_UART_Receive+0x9a>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	22ff      	movs	r2, #255	; 0xff
 8004d34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d38:	e01b      	b.n	8004d72 <HAL_UART_Receive+0xd2>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	227f      	movs	r2, #127	; 0x7f
 8004d3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d42:	e016      	b.n	8004d72 <HAL_UART_Receive+0xd2>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d4c:	d10d      	bne.n	8004d6a <HAL_UART_Receive+0xca>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d104      	bne.n	8004d60 <HAL_UART_Receive+0xc0>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	227f      	movs	r2, #127	; 0x7f
 8004d5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d5e:	e008      	b.n	8004d72 <HAL_UART_Receive+0xd2>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	223f      	movs	r2, #63	; 0x3f
 8004d64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d68:	e003      	b.n	8004d72 <HAL_UART_Receive+0xd2>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d78:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d82:	d108      	bne.n	8004d96 <HAL_UART_Receive+0xf6>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d104      	bne.n	8004d96 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	e003      	b.n	8004d9e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004d9e:	e036      	b.n	8004e0e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2200      	movs	r2, #0
 8004da8:	2120      	movs	r1, #32
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fc88 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e032      	b.n	8004e28 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10c      	bne.n	8004de2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	8a7b      	ldrh	r3, [r7, #18]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	3302      	adds	r3, #2
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	e00c      	b.n	8004dfc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	8a7b      	ldrh	r3, [r7, #18]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	4013      	ands	r3, r2
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1c2      	bne.n	8004da0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e000      	b.n	8004e28 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004e26:	2302      	movs	r3, #2
  }
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e34:	b08c      	sub	sp, #48	; 0x30
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4baa      	ldr	r3, [pc, #680]	; (8005108 <UART_SetConfig+0x2d8>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a9f      	ldr	r2, [pc, #636]	; (800510c <UART_SetConfig+0x2dc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ea6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	f023 010f 	bic.w	r1, r3, #15
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a90      	ldr	r2, [pc, #576]	; (8005110 <UART_SetConfig+0x2e0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d125      	bne.n	8004f20 <UART_SetConfig+0xf0>
 8004ed4:	4b8f      	ldr	r3, [pc, #572]	; (8005114 <UART_SetConfig+0x2e4>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d81a      	bhi.n	8004f18 <UART_SetConfig+0xe8>
 8004ee2:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <UART_SetConfig+0xb8>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004ef9 	.word	0x08004ef9
 8004eec:	08004f09 	.word	0x08004f09
 8004ef0:	08004f01 	.word	0x08004f01
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efe:	e116      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f00:	2302      	movs	r3, #2
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f06:	e112      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f0e:	e10e      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f16:	e10a      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f1e:	e106      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a7c      	ldr	r2, [pc, #496]	; (8005118 <UART_SetConfig+0x2e8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d138      	bne.n	8004f9c <UART_SetConfig+0x16c>
 8004f2a:	4b7a      	ldr	r3, [pc, #488]	; (8005114 <UART_SetConfig+0x2e4>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	d82d      	bhi.n	8004f94 <UART_SetConfig+0x164>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0x110>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08004f95 	.word	0x08004f95
 8004f48:	08004f95 	.word	0x08004f95
 8004f4c:	08004f95 	.word	0x08004f95
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08004f95 	.word	0x08004f95
 8004f58:	08004f95 	.word	0x08004f95
 8004f5c:	08004f95 	.word	0x08004f95
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	08004f95 	.word	0x08004f95
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f8d 	.word	0x08004f8d
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f7a:	e0d8      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f82:	e0d4      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f84:	2304      	movs	r3, #4
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8a:	e0d0      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f92:	e0cc      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f94:	2310      	movs	r3, #16
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9a:	e0c8      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a5e      	ldr	r2, [pc, #376]	; (800511c <UART_SetConfig+0x2ec>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d125      	bne.n	8004ff2 <UART_SetConfig+0x1c2>
 8004fa6:	4b5b      	ldr	r3, [pc, #364]	; (8005114 <UART_SetConfig+0x2e4>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fb0:	2b30      	cmp	r3, #48	; 0x30
 8004fb2:	d016      	beq.n	8004fe2 <UART_SetConfig+0x1b2>
 8004fb4:	2b30      	cmp	r3, #48	; 0x30
 8004fb6:	d818      	bhi.n	8004fea <UART_SetConfig+0x1ba>
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d00a      	beq.n	8004fd2 <UART_SetConfig+0x1a2>
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d814      	bhi.n	8004fea <UART_SetConfig+0x1ba>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <UART_SetConfig+0x19a>
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d008      	beq.n	8004fda <UART_SetConfig+0x1aa>
 8004fc8:	e00f      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd0:	e0ad      	b.n	800512e <UART_SetConfig+0x2fe>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd8:	e0a9      	b.n	800512e <UART_SetConfig+0x2fe>
 8004fda:	2304      	movs	r3, #4
 8004fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fe0:	e0a5      	b.n	800512e <UART_SetConfig+0x2fe>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fe8:	e0a1      	b.n	800512e <UART_SetConfig+0x2fe>
 8004fea:	2310      	movs	r3, #16
 8004fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ff0:	e09d      	b.n	800512e <UART_SetConfig+0x2fe>
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a4a      	ldr	r2, [pc, #296]	; (8005120 <UART_SetConfig+0x2f0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d125      	bne.n	8005048 <UART_SetConfig+0x218>
 8004ffc:	4b45      	ldr	r3, [pc, #276]	; (8005114 <UART_SetConfig+0x2e4>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005006:	2bc0      	cmp	r3, #192	; 0xc0
 8005008:	d016      	beq.n	8005038 <UART_SetConfig+0x208>
 800500a:	2bc0      	cmp	r3, #192	; 0xc0
 800500c:	d818      	bhi.n	8005040 <UART_SetConfig+0x210>
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	d00a      	beq.n	8005028 <UART_SetConfig+0x1f8>
 8005012:	2b80      	cmp	r3, #128	; 0x80
 8005014:	d814      	bhi.n	8005040 <UART_SetConfig+0x210>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <UART_SetConfig+0x1f0>
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	d008      	beq.n	8005030 <UART_SetConfig+0x200>
 800501e:	e00f      	b.n	8005040 <UART_SetConfig+0x210>
 8005020:	2300      	movs	r3, #0
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005026:	e082      	b.n	800512e <UART_SetConfig+0x2fe>
 8005028:	2302      	movs	r3, #2
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800502e:	e07e      	b.n	800512e <UART_SetConfig+0x2fe>
 8005030:	2304      	movs	r3, #4
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005036:	e07a      	b.n	800512e <UART_SetConfig+0x2fe>
 8005038:	2308      	movs	r3, #8
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800503e:	e076      	b.n	800512e <UART_SetConfig+0x2fe>
 8005040:	2310      	movs	r3, #16
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005046:	e072      	b.n	800512e <UART_SetConfig+0x2fe>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a35      	ldr	r2, [pc, #212]	; (8005124 <UART_SetConfig+0x2f4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d12a      	bne.n	80050a8 <UART_SetConfig+0x278>
 8005052:	4b30      	ldr	r3, [pc, #192]	; (8005114 <UART_SetConfig+0x2e4>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005060:	d01a      	beq.n	8005098 <UART_SetConfig+0x268>
 8005062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005066:	d81b      	bhi.n	80050a0 <UART_SetConfig+0x270>
 8005068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800506c:	d00c      	beq.n	8005088 <UART_SetConfig+0x258>
 800506e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005072:	d815      	bhi.n	80050a0 <UART_SetConfig+0x270>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <UART_SetConfig+0x250>
 8005078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507c:	d008      	beq.n	8005090 <UART_SetConfig+0x260>
 800507e:	e00f      	b.n	80050a0 <UART_SetConfig+0x270>
 8005080:	2300      	movs	r3, #0
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005086:	e052      	b.n	800512e <UART_SetConfig+0x2fe>
 8005088:	2302      	movs	r3, #2
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800508e:	e04e      	b.n	800512e <UART_SetConfig+0x2fe>
 8005090:	2304      	movs	r3, #4
 8005092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005096:	e04a      	b.n	800512e <UART_SetConfig+0x2fe>
 8005098:	2308      	movs	r3, #8
 800509a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800509e:	e046      	b.n	800512e <UART_SetConfig+0x2fe>
 80050a0:	2310      	movs	r3, #16
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050a6:	e042      	b.n	800512e <UART_SetConfig+0x2fe>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a17      	ldr	r2, [pc, #92]	; (800510c <UART_SetConfig+0x2dc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d13a      	bne.n	8005128 <UART_SetConfig+0x2f8>
 80050b2:	4b18      	ldr	r3, [pc, #96]	; (8005114 <UART_SetConfig+0x2e4>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050c0:	d01a      	beq.n	80050f8 <UART_SetConfig+0x2c8>
 80050c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050c6:	d81b      	bhi.n	8005100 <UART_SetConfig+0x2d0>
 80050c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050cc:	d00c      	beq.n	80050e8 <UART_SetConfig+0x2b8>
 80050ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d2:	d815      	bhi.n	8005100 <UART_SetConfig+0x2d0>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <UART_SetConfig+0x2b0>
 80050d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050dc:	d008      	beq.n	80050f0 <UART_SetConfig+0x2c0>
 80050de:	e00f      	b.n	8005100 <UART_SetConfig+0x2d0>
 80050e0:	2300      	movs	r3, #0
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e6:	e022      	b.n	800512e <UART_SetConfig+0x2fe>
 80050e8:	2302      	movs	r3, #2
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ee:	e01e      	b.n	800512e <UART_SetConfig+0x2fe>
 80050f0:	2304      	movs	r3, #4
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f6:	e01a      	b.n	800512e <UART_SetConfig+0x2fe>
 80050f8:	2308      	movs	r3, #8
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fe:	e016      	b.n	800512e <UART_SetConfig+0x2fe>
 8005100:	2310      	movs	r3, #16
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005106:	e012      	b.n	800512e <UART_SetConfig+0x2fe>
 8005108:	cfff69f3 	.word	0xcfff69f3
 800510c:	40008000 	.word	0x40008000
 8005110:	40013800 	.word	0x40013800
 8005114:	40021000 	.word	0x40021000
 8005118:	40004400 	.word	0x40004400
 800511c:	40004800 	.word	0x40004800
 8005120:	40004c00 	.word	0x40004c00
 8005124:	40005000 	.word	0x40005000
 8005128:	2310      	movs	r3, #16
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4aae      	ldr	r2, [pc, #696]	; (80053ec <UART_SetConfig+0x5bc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	f040 8097 	bne.w	8005268 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800513a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800513e:	2b08      	cmp	r3, #8
 8005140:	d823      	bhi.n	800518a <UART_SetConfig+0x35a>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0x318>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	0800516d 	.word	0x0800516d
 800514c:	0800518b 	.word	0x0800518b
 8005150:	08005175 	.word	0x08005175
 8005154:	0800518b 	.word	0x0800518b
 8005158:	0800517b 	.word	0x0800517b
 800515c:	0800518b 	.word	0x0800518b
 8005160:	0800518b 	.word	0x0800518b
 8005164:	0800518b 	.word	0x0800518b
 8005168:	08005183 	.word	0x08005183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800516c:	f7fe fd62 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 8005170:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005172:	e010      	b.n	8005196 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005174:	4b9e      	ldr	r3, [pc, #632]	; (80053f0 <UART_SetConfig+0x5c0>)
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005178:	e00d      	b.n	8005196 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517a:	f7fe fced 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 800517e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005180:	e009      	b.n	8005196 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005188:	e005      	b.n	8005196 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005194:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8130 	beq.w	80053fe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	4a94      	ldr	r2, [pc, #592]	; (80053f4 <UART_SetConfig+0x5c4>)
 80051a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4413      	add	r3, r2
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d305      	bcc.n	80051ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d903      	bls.n	80051d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051d4:	e113      	b.n	80053fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	2200      	movs	r2, #0
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	60fa      	str	r2, [r7, #12]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	4a84      	ldr	r2, [pc, #528]	; (80053f4 <UART_SetConfig+0x5c4>)
 80051e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2200      	movs	r2, #0
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051f8:	f7fb f862 	bl	80002c0 <__aeabi_uldivmod>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	020b      	lsls	r3, r1, #8
 800520e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005212:	0202      	lsls	r2, r0, #8
 8005214:	6979      	ldr	r1, [r7, #20]
 8005216:	6849      	ldr	r1, [r1, #4]
 8005218:	0849      	lsrs	r1, r1, #1
 800521a:	2000      	movs	r0, #0
 800521c:	460c      	mov	r4, r1
 800521e:	4605      	mov	r5, r0
 8005220:	eb12 0804 	adds.w	r8, r2, r4
 8005224:	eb43 0905 	adc.w	r9, r3, r5
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	469a      	mov	sl, r3
 8005230:	4693      	mov	fp, r2
 8005232:	4652      	mov	r2, sl
 8005234:	465b      	mov	r3, fp
 8005236:	4640      	mov	r0, r8
 8005238:	4649      	mov	r1, r9
 800523a:	f7fb f841 	bl	80002c0 <__aeabi_uldivmod>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4613      	mov	r3, r2
 8005244:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800524c:	d308      	bcc.n	8005260 <UART_SetConfig+0x430>
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005254:	d204      	bcs.n	8005260 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a3a      	ldr	r2, [r7, #32]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	e0ce      	b.n	80053fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005266:	e0ca      	b.n	80053fe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005270:	d166      	bne.n	8005340 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005272:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005276:	2b08      	cmp	r3, #8
 8005278:	d827      	bhi.n	80052ca <UART_SetConfig+0x49a>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0x450>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052ad 	.word	0x080052ad
 8005288:	080052b5 	.word	0x080052b5
 800528c:	080052cb 	.word	0x080052cb
 8005290:	080052bb 	.word	0x080052bb
 8005294:	080052cb 	.word	0x080052cb
 8005298:	080052cb 	.word	0x080052cb
 800529c:	080052cb 	.word	0x080052cb
 80052a0:	080052c3 	.word	0x080052c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a4:	f7fe fcc6 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 80052a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052aa:	e014      	b.n	80052d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ac:	f7fe fcd8 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 80052b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052b2:	e010      	b.n	80052d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b4:	4b4e      	ldr	r3, [pc, #312]	; (80053f0 <UART_SetConfig+0x5c0>)
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052b8:	e00d      	b.n	80052d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ba:	f7fe fc4d 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 80052be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052c0:	e009      	b.n	80052d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052c8:	e005      	b.n	80052d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8090 	beq.w	80053fe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	4a44      	ldr	r2, [pc, #272]	; (80053f4 <UART_SetConfig+0x5c4>)
 80052e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e8:	461a      	mov	r2, r3
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80052f0:	005a      	lsls	r2, r3, #1
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	441a      	add	r2, r3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d916      	bls.n	8005338 <UART_SetConfig+0x508>
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005310:	d212      	bcs.n	8005338 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f023 030f 	bic.w	r3, r3, #15
 800531a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	b29b      	uxth	r3, r3
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	b29a      	uxth	r2, r3
 8005328:	8bfb      	ldrh	r3, [r7, #30]
 800532a:	4313      	orrs	r3, r2
 800532c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	8bfa      	ldrh	r2, [r7, #30]
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	e062      	b.n	80053fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800533e:	e05e      	b.n	80053fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005340:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005344:	2b08      	cmp	r3, #8
 8005346:	d828      	bhi.n	800539a <UART_SetConfig+0x56a>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0x520>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005375 	.word	0x08005375
 8005354:	0800537d 	.word	0x0800537d
 8005358:	08005385 	.word	0x08005385
 800535c:	0800539b 	.word	0x0800539b
 8005360:	0800538b 	.word	0x0800538b
 8005364:	0800539b 	.word	0x0800539b
 8005368:	0800539b 	.word	0x0800539b
 800536c:	0800539b 	.word	0x0800539b
 8005370:	08005393 	.word	0x08005393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005374:	f7fe fc5e 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 8005378:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800537a:	e014      	b.n	80053a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800537c:	f7fe fc70 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 8005380:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005382:	e010      	b.n	80053a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005384:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <UART_SetConfig+0x5c0>)
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005388:	e00d      	b.n	80053a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800538a:	f7fe fbe5 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 800538e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005390:	e009      	b.n	80053a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005398:	e005      	b.n	80053a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053a4:	bf00      	nop
    }

    if (pclk != 0U)
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d028      	beq.n	80053fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	4a10      	ldr	r2, [pc, #64]	; (80053f4 <UART_SetConfig+0x5c4>)
 80053b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b6:	461a      	mov	r2, r3
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	441a      	add	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	d910      	bls.n	80053f8 <UART_SetConfig+0x5c8>
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053dc:	d20c      	bcs.n	80053f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	e009      	b.n	80053fe <UART_SetConfig+0x5ce>
 80053ea:	bf00      	nop
 80053ec:	40008000 	.word	0x40008000
 80053f0:	00f42400 	.word	0x00f42400
 80053f4:	0800643c 	.word	0x0800643c
      }
      else
      {
        ret = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2201      	movs	r2, #1
 8005402:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2201      	movs	r2, #1
 800540a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2200      	movs	r2, #0
 8005418:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800541a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800541e:	4618      	mov	r0, r3
 8005420:	3730      	adds	r7, #48	; 0x30
 8005422:	46bd      	mov	sp, r7
 8005424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01a      	beq.n	800553e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005526:	d10a      	bne.n	800553e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b098      	sub	sp, #96	; 0x60
 8005570:	af02      	add	r7, sp, #8
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800557c:	f7fb fd06 	bl	8000f8c <HAL_GetTick>
 8005580:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d12f      	bne.n	80055f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005598:	2200      	movs	r2, #0
 800559a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f88e 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d022      	beq.n	80055f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055be:	653b      	str	r3, [r7, #80]	; 0x50
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c8:	647b      	str	r3, [r7, #68]	; 0x44
 80055ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e6      	bne.n	80055aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e063      	b.n	80056b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d149      	bne.n	8005692 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005606:	2200      	movs	r2, #0
 8005608:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f857 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d03c      	beq.n	8005692 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	623b      	str	r3, [r7, #32]
   return(result);
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800562c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005636:	633b      	str	r3, [r7, #48]	; 0x30
 8005638:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800563c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e6      	bne.n	8005618 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	60fb      	str	r3, [r7, #12]
   return(result);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	64bb      	str	r3, [r7, #72]	; 0x48
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3308      	adds	r3, #8
 8005668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800566a:	61fa      	str	r2, [r7, #28]
 800566c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	69b9      	ldr	r1, [r7, #24]
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	617b      	str	r3, [r7, #20]
   return(result);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e5      	bne.n	800564a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e012      	b.n	80056b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3758      	adds	r7, #88	; 0x58
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d0:	e04f      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d04b      	beq.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056da:	f7fb fc57 	bl	8000f8c <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d302      	bcc.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e04e      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d037      	beq.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b80      	cmp	r3, #128	; 0x80
 8005706:	d034      	beq.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d031      	beq.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b08      	cmp	r3, #8
 800571a:	d110      	bne.n	800573e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2208      	movs	r2, #8
 8005722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f838 	bl	800579a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2208      	movs	r2, #8
 800572e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e029      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574c:	d111      	bne.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f81e 	bl	800579a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e00f      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	bf0c      	ite	eq
 8005782:	2301      	moveq	r3, #1
 8005784:	2300      	movne	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	429a      	cmp	r2, r3
 800578e:	d0a0      	beq.n	80056d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800579a:	b480      	push	{r7}
 800579c:	b095      	sub	sp, #84	; 0x54
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c0:	643b      	str	r3, [r7, #64]	; 0x40
 80057c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e6      	bne.n	80057a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3308      	adds	r3, #8
 80057da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3308      	adds	r3, #8
 80057f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e3      	bne.n	80057d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d118      	bne.n	8005846 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	60bb      	str	r3, [r7, #8]
   return(result);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f023 0310 	bic.w	r3, r3, #16
 8005828:	647b      	str	r3, [r7, #68]	; 0x44
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6979      	ldr	r1, [r7, #20]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	613b      	str	r3, [r7, #16]
   return(result);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e6      	bne.n	8005814 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	675a      	str	r2, [r3, #116]	; 0x74
}
 800585a:	bf00      	nop
 800585c:	3754      	adds	r7, #84	; 0x54
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_UARTEx_DisableFifoMode+0x16>
 8005878:	2302      	movs	r3, #2
 800587a:	e027      	b.n	80058cc <HAL_UARTEx_DisableFifoMode+0x66>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e02d      	b.n	800594c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2224      	movs	r2, #36	; 0x24
 80058fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f84f 	bl	80059d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005968:	2302      	movs	r3, #2
 800596a:	e02d      	b.n	80059c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	; 0x24
 8005978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f811 	bl	80059d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d108      	bne.n	80059f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059f0:	e031      	b.n	8005a56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059f2:	2308      	movs	r3, #8
 80059f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059f6:	2308      	movs	r3, #8
 80059f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	0e5b      	lsrs	r3, r3, #25
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	0f5b      	lsrs	r3, r3, #29
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	7b3a      	ldrb	r2, [r7, #12]
 8005a1e:	4911      	ldr	r1, [pc, #68]	; (8005a64 <UARTEx_SetNbDataToProcess+0x94>)
 8005a20:	5c8a      	ldrb	r2, [r1, r2]
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a26:	7b3a      	ldrb	r2, [r7, #12]
 8005a28:	490f      	ldr	r1, [pc, #60]	; (8005a68 <UARTEx_SetNbDataToProcess+0x98>)
 8005a2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	7b7a      	ldrb	r2, [r7, #13]
 8005a3c:	4909      	ldr	r1, [pc, #36]	; (8005a64 <UARTEx_SetNbDataToProcess+0x94>)
 8005a3e:	5c8a      	ldrb	r2, [r1, r2]
 8005a40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a44:	7b7a      	ldrb	r2, [r7, #13]
 8005a46:	4908      	ldr	r1, [pc, #32]	; (8005a68 <UARTEx_SetNbDataToProcess+0x98>)
 8005a48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	08006454 	.word	0x08006454
 8005a68:	0800645c 	.word	0x0800645c

08005a6c <siprintf>:
 8005a6c:	b40e      	push	{r1, r2, r3}
 8005a6e:	b500      	push	{lr}
 8005a70:	b09c      	sub	sp, #112	; 0x70
 8005a72:	ab1d      	add	r3, sp, #116	; 0x74
 8005a74:	9002      	str	r0, [sp, #8]
 8005a76:	9006      	str	r0, [sp, #24]
 8005a78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a7c:	4809      	ldr	r0, [pc, #36]	; (8005aa4 <siprintf+0x38>)
 8005a7e:	9107      	str	r1, [sp, #28]
 8005a80:	9104      	str	r1, [sp, #16]
 8005a82:	4909      	ldr	r1, [pc, #36]	; (8005aa8 <siprintf+0x3c>)
 8005a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a88:	9105      	str	r1, [sp, #20]
 8005a8a:	6800      	ldr	r0, [r0, #0]
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	a902      	add	r1, sp, #8
 8005a90:	f000 f992 	bl	8005db8 <_svfiprintf_r>
 8005a94:	9b02      	ldr	r3, [sp, #8]
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	b01c      	add	sp, #112	; 0x70
 8005a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa0:	b003      	add	sp, #12
 8005aa2:	4770      	bx	lr
 8005aa4:	2000005c 	.word	0x2000005c
 8005aa8:	ffff0208 	.word	0xffff0208

08005aac <memset>:
 8005aac:	4402      	add	r2, r0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d100      	bne.n	8005ab6 <memset+0xa>
 8005ab4:	4770      	bx	lr
 8005ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aba:	e7f9      	b.n	8005ab0 <memset+0x4>

08005abc <__errno>:
 8005abc:	4b01      	ldr	r3, [pc, #4]	; (8005ac4 <__errno+0x8>)
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	2000005c 	.word	0x2000005c

08005ac8 <__libc_init_array>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4d0d      	ldr	r5, [pc, #52]	; (8005b00 <__libc_init_array+0x38>)
 8005acc:	4c0d      	ldr	r4, [pc, #52]	; (8005b04 <__libc_init_array+0x3c>)
 8005ace:	1b64      	subs	r4, r4, r5
 8005ad0:	10a4      	asrs	r4, r4, #2
 8005ad2:	2600      	movs	r6, #0
 8005ad4:	42a6      	cmp	r6, r4
 8005ad6:	d109      	bne.n	8005aec <__libc_init_array+0x24>
 8005ad8:	4d0b      	ldr	r5, [pc, #44]	; (8005b08 <__libc_init_array+0x40>)
 8005ada:	4c0c      	ldr	r4, [pc, #48]	; (8005b0c <__libc_init_array+0x44>)
 8005adc:	f000 fc6a 	bl	80063b4 <_init>
 8005ae0:	1b64      	subs	r4, r4, r5
 8005ae2:	10a4      	asrs	r4, r4, #2
 8005ae4:	2600      	movs	r6, #0
 8005ae6:	42a6      	cmp	r6, r4
 8005ae8:	d105      	bne.n	8005af6 <__libc_init_array+0x2e>
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af0:	4798      	blx	r3
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7ee      	b.n	8005ad4 <__libc_init_array+0xc>
 8005af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afa:	4798      	blx	r3
 8005afc:	3601      	adds	r6, #1
 8005afe:	e7f2      	b.n	8005ae6 <__libc_init_array+0x1e>
 8005b00:	080064a0 	.word	0x080064a0
 8005b04:	080064a0 	.word	0x080064a0
 8005b08:	080064a0 	.word	0x080064a0
 8005b0c:	080064a4 	.word	0x080064a4

08005b10 <__retarget_lock_acquire_recursive>:
 8005b10:	4770      	bx	lr

08005b12 <__retarget_lock_release_recursive>:
 8005b12:	4770      	bx	lr

08005b14 <_free_r>:
 8005b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b16:	2900      	cmp	r1, #0
 8005b18:	d044      	beq.n	8005ba4 <_free_r+0x90>
 8005b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b1e:	9001      	str	r0, [sp, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f1a1 0404 	sub.w	r4, r1, #4
 8005b26:	bfb8      	it	lt
 8005b28:	18e4      	addlt	r4, r4, r3
 8005b2a:	f000 f8df 	bl	8005cec <__malloc_lock>
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <_free_r+0x94>)
 8005b30:	9801      	ldr	r0, [sp, #4]
 8005b32:	6813      	ldr	r3, [r2, #0]
 8005b34:	b933      	cbnz	r3, 8005b44 <_free_r+0x30>
 8005b36:	6063      	str	r3, [r4, #4]
 8005b38:	6014      	str	r4, [r2, #0]
 8005b3a:	b003      	add	sp, #12
 8005b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b40:	f000 b8da 	b.w	8005cf8 <__malloc_unlock>
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	d908      	bls.n	8005b5a <_free_r+0x46>
 8005b48:	6825      	ldr	r5, [r4, #0]
 8005b4a:	1961      	adds	r1, r4, r5
 8005b4c:	428b      	cmp	r3, r1
 8005b4e:	bf01      	itttt	eq
 8005b50:	6819      	ldreq	r1, [r3, #0]
 8005b52:	685b      	ldreq	r3, [r3, #4]
 8005b54:	1949      	addeq	r1, r1, r5
 8005b56:	6021      	streq	r1, [r4, #0]
 8005b58:	e7ed      	b.n	8005b36 <_free_r+0x22>
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	b10b      	cbz	r3, 8005b64 <_free_r+0x50>
 8005b60:	42a3      	cmp	r3, r4
 8005b62:	d9fa      	bls.n	8005b5a <_free_r+0x46>
 8005b64:	6811      	ldr	r1, [r2, #0]
 8005b66:	1855      	adds	r5, r2, r1
 8005b68:	42a5      	cmp	r5, r4
 8005b6a:	d10b      	bne.n	8005b84 <_free_r+0x70>
 8005b6c:	6824      	ldr	r4, [r4, #0]
 8005b6e:	4421      	add	r1, r4
 8005b70:	1854      	adds	r4, r2, r1
 8005b72:	42a3      	cmp	r3, r4
 8005b74:	6011      	str	r1, [r2, #0]
 8005b76:	d1e0      	bne.n	8005b3a <_free_r+0x26>
 8005b78:	681c      	ldr	r4, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	6053      	str	r3, [r2, #4]
 8005b7e:	440c      	add	r4, r1
 8005b80:	6014      	str	r4, [r2, #0]
 8005b82:	e7da      	b.n	8005b3a <_free_r+0x26>
 8005b84:	d902      	bls.n	8005b8c <_free_r+0x78>
 8005b86:	230c      	movs	r3, #12
 8005b88:	6003      	str	r3, [r0, #0]
 8005b8a:	e7d6      	b.n	8005b3a <_free_r+0x26>
 8005b8c:	6825      	ldr	r5, [r4, #0]
 8005b8e:	1961      	adds	r1, r4, r5
 8005b90:	428b      	cmp	r3, r1
 8005b92:	bf04      	itt	eq
 8005b94:	6819      	ldreq	r1, [r3, #0]
 8005b96:	685b      	ldreq	r3, [r3, #4]
 8005b98:	6063      	str	r3, [r4, #4]
 8005b9a:	bf04      	itt	eq
 8005b9c:	1949      	addeq	r1, r1, r5
 8005b9e:	6021      	streq	r1, [r4, #0]
 8005ba0:	6054      	str	r4, [r2, #4]
 8005ba2:	e7ca      	b.n	8005b3a <_free_r+0x26>
 8005ba4:	b003      	add	sp, #12
 8005ba6:	bd30      	pop	{r4, r5, pc}
 8005ba8:	2000032c 	.word	0x2000032c

08005bac <sbrk_aligned>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	4e0e      	ldr	r6, [pc, #56]	; (8005be8 <sbrk_aligned+0x3c>)
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	6831      	ldr	r1, [r6, #0]
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	b911      	cbnz	r1, 8005bbe <sbrk_aligned+0x12>
 8005bb8:	f000 fba6 	bl	8006308 <_sbrk_r>
 8005bbc:	6030      	str	r0, [r6, #0]
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f000 fba1 	bl	8006308 <_sbrk_r>
 8005bc6:	1c43      	adds	r3, r0, #1
 8005bc8:	d00a      	beq.n	8005be0 <sbrk_aligned+0x34>
 8005bca:	1cc4      	adds	r4, r0, #3
 8005bcc:	f024 0403 	bic.w	r4, r4, #3
 8005bd0:	42a0      	cmp	r0, r4
 8005bd2:	d007      	beq.n	8005be4 <sbrk_aligned+0x38>
 8005bd4:	1a21      	subs	r1, r4, r0
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 fb96 	bl	8006308 <_sbrk_r>
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d101      	bne.n	8005be4 <sbrk_aligned+0x38>
 8005be0:	f04f 34ff 	mov.w	r4, #4294967295
 8005be4:	4620      	mov	r0, r4
 8005be6:	bd70      	pop	{r4, r5, r6, pc}
 8005be8:	20000330 	.word	0x20000330

08005bec <_malloc_r>:
 8005bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf0:	1ccd      	adds	r5, r1, #3
 8005bf2:	f025 0503 	bic.w	r5, r5, #3
 8005bf6:	3508      	adds	r5, #8
 8005bf8:	2d0c      	cmp	r5, #12
 8005bfa:	bf38      	it	cc
 8005bfc:	250c      	movcc	r5, #12
 8005bfe:	2d00      	cmp	r5, #0
 8005c00:	4607      	mov	r7, r0
 8005c02:	db01      	blt.n	8005c08 <_malloc_r+0x1c>
 8005c04:	42a9      	cmp	r1, r5
 8005c06:	d905      	bls.n	8005c14 <_malloc_r+0x28>
 8005c08:	230c      	movs	r3, #12
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	2600      	movs	r6, #0
 8005c0e:	4630      	mov	r0, r6
 8005c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ce8 <_malloc_r+0xfc>
 8005c18:	f000 f868 	bl	8005cec <__malloc_lock>
 8005c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c20:	461c      	mov	r4, r3
 8005c22:	bb5c      	cbnz	r4, 8005c7c <_malloc_r+0x90>
 8005c24:	4629      	mov	r1, r5
 8005c26:	4638      	mov	r0, r7
 8005c28:	f7ff ffc0 	bl	8005bac <sbrk_aligned>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	4604      	mov	r4, r0
 8005c30:	d155      	bne.n	8005cde <_malloc_r+0xf2>
 8005c32:	f8d8 4000 	ldr.w	r4, [r8]
 8005c36:	4626      	mov	r6, r4
 8005c38:	2e00      	cmp	r6, #0
 8005c3a:	d145      	bne.n	8005cc8 <_malloc_r+0xdc>
 8005c3c:	2c00      	cmp	r4, #0
 8005c3e:	d048      	beq.n	8005cd2 <_malloc_r+0xe6>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	4631      	mov	r1, r6
 8005c44:	4638      	mov	r0, r7
 8005c46:	eb04 0903 	add.w	r9, r4, r3
 8005c4a:	f000 fb5d 	bl	8006308 <_sbrk_r>
 8005c4e:	4581      	cmp	r9, r0
 8005c50:	d13f      	bne.n	8005cd2 <_malloc_r+0xe6>
 8005c52:	6821      	ldr	r1, [r4, #0]
 8005c54:	1a6d      	subs	r5, r5, r1
 8005c56:	4629      	mov	r1, r5
 8005c58:	4638      	mov	r0, r7
 8005c5a:	f7ff ffa7 	bl	8005bac <sbrk_aligned>
 8005c5e:	3001      	adds	r0, #1
 8005c60:	d037      	beq.n	8005cd2 <_malloc_r+0xe6>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	442b      	add	r3, r5
 8005c66:	6023      	str	r3, [r4, #0]
 8005c68:	f8d8 3000 	ldr.w	r3, [r8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d038      	beq.n	8005ce2 <_malloc_r+0xf6>
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	42a2      	cmp	r2, r4
 8005c74:	d12b      	bne.n	8005cce <_malloc_r+0xe2>
 8005c76:	2200      	movs	r2, #0
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	e00f      	b.n	8005c9c <_malloc_r+0xb0>
 8005c7c:	6822      	ldr	r2, [r4, #0]
 8005c7e:	1b52      	subs	r2, r2, r5
 8005c80:	d41f      	bmi.n	8005cc2 <_malloc_r+0xd6>
 8005c82:	2a0b      	cmp	r2, #11
 8005c84:	d917      	bls.n	8005cb6 <_malloc_r+0xca>
 8005c86:	1961      	adds	r1, r4, r5
 8005c88:	42a3      	cmp	r3, r4
 8005c8a:	6025      	str	r5, [r4, #0]
 8005c8c:	bf18      	it	ne
 8005c8e:	6059      	strne	r1, [r3, #4]
 8005c90:	6863      	ldr	r3, [r4, #4]
 8005c92:	bf08      	it	eq
 8005c94:	f8c8 1000 	streq.w	r1, [r8]
 8005c98:	5162      	str	r2, [r4, r5]
 8005c9a:	604b      	str	r3, [r1, #4]
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	f104 060b 	add.w	r6, r4, #11
 8005ca2:	f000 f829 	bl	8005cf8 <__malloc_unlock>
 8005ca6:	f026 0607 	bic.w	r6, r6, #7
 8005caa:	1d23      	adds	r3, r4, #4
 8005cac:	1af2      	subs	r2, r6, r3
 8005cae:	d0ae      	beq.n	8005c0e <_malloc_r+0x22>
 8005cb0:	1b9b      	subs	r3, r3, r6
 8005cb2:	50a3      	str	r3, [r4, r2]
 8005cb4:	e7ab      	b.n	8005c0e <_malloc_r+0x22>
 8005cb6:	42a3      	cmp	r3, r4
 8005cb8:	6862      	ldr	r2, [r4, #4]
 8005cba:	d1dd      	bne.n	8005c78 <_malloc_r+0x8c>
 8005cbc:	f8c8 2000 	str.w	r2, [r8]
 8005cc0:	e7ec      	b.n	8005c9c <_malloc_r+0xb0>
 8005cc2:	4623      	mov	r3, r4
 8005cc4:	6864      	ldr	r4, [r4, #4]
 8005cc6:	e7ac      	b.n	8005c22 <_malloc_r+0x36>
 8005cc8:	4634      	mov	r4, r6
 8005cca:	6876      	ldr	r6, [r6, #4]
 8005ccc:	e7b4      	b.n	8005c38 <_malloc_r+0x4c>
 8005cce:	4613      	mov	r3, r2
 8005cd0:	e7cc      	b.n	8005c6c <_malloc_r+0x80>
 8005cd2:	230c      	movs	r3, #12
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	f000 f80e 	bl	8005cf8 <__malloc_unlock>
 8005cdc:	e797      	b.n	8005c0e <_malloc_r+0x22>
 8005cde:	6025      	str	r5, [r4, #0]
 8005ce0:	e7dc      	b.n	8005c9c <_malloc_r+0xb0>
 8005ce2:	605b      	str	r3, [r3, #4]
 8005ce4:	deff      	udf	#255	; 0xff
 8005ce6:	bf00      	nop
 8005ce8:	2000032c 	.word	0x2000032c

08005cec <__malloc_lock>:
 8005cec:	4801      	ldr	r0, [pc, #4]	; (8005cf4 <__malloc_lock+0x8>)
 8005cee:	f7ff bf0f 	b.w	8005b10 <__retarget_lock_acquire_recursive>
 8005cf2:	bf00      	nop
 8005cf4:	20000328 	.word	0x20000328

08005cf8 <__malloc_unlock>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	; (8005d00 <__malloc_unlock+0x8>)
 8005cfa:	f7ff bf0a 	b.w	8005b12 <__retarget_lock_release_recursive>
 8005cfe:	bf00      	nop
 8005d00:	20000328 	.word	0x20000328

08005d04 <__ssputs_r>:
 8005d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	688e      	ldr	r6, [r1, #8]
 8005d0a:	461f      	mov	r7, r3
 8005d0c:	42be      	cmp	r6, r7
 8005d0e:	680b      	ldr	r3, [r1, #0]
 8005d10:	4682      	mov	sl, r0
 8005d12:	460c      	mov	r4, r1
 8005d14:	4690      	mov	r8, r2
 8005d16:	d82c      	bhi.n	8005d72 <__ssputs_r+0x6e>
 8005d18:	898a      	ldrh	r2, [r1, #12]
 8005d1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d1e:	d026      	beq.n	8005d6e <__ssputs_r+0x6a>
 8005d20:	6965      	ldr	r5, [r4, #20]
 8005d22:	6909      	ldr	r1, [r1, #16]
 8005d24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d28:	eba3 0901 	sub.w	r9, r3, r1
 8005d2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d30:	1c7b      	adds	r3, r7, #1
 8005d32:	444b      	add	r3, r9
 8005d34:	106d      	asrs	r5, r5, #1
 8005d36:	429d      	cmp	r5, r3
 8005d38:	bf38      	it	cc
 8005d3a:	461d      	movcc	r5, r3
 8005d3c:	0553      	lsls	r3, r2, #21
 8005d3e:	d527      	bpl.n	8005d90 <__ssputs_r+0x8c>
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7ff ff53 	bl	8005bec <_malloc_r>
 8005d46:	4606      	mov	r6, r0
 8005d48:	b360      	cbz	r0, 8005da4 <__ssputs_r+0xa0>
 8005d4a:	6921      	ldr	r1, [r4, #16]
 8005d4c:	464a      	mov	r2, r9
 8005d4e:	f000 faeb 	bl	8006328 <memcpy>
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5c:	81a3      	strh	r3, [r4, #12]
 8005d5e:	6126      	str	r6, [r4, #16]
 8005d60:	6165      	str	r5, [r4, #20]
 8005d62:	444e      	add	r6, r9
 8005d64:	eba5 0509 	sub.w	r5, r5, r9
 8005d68:	6026      	str	r6, [r4, #0]
 8005d6a:	60a5      	str	r5, [r4, #8]
 8005d6c:	463e      	mov	r6, r7
 8005d6e:	42be      	cmp	r6, r7
 8005d70:	d900      	bls.n	8005d74 <__ssputs_r+0x70>
 8005d72:	463e      	mov	r6, r7
 8005d74:	6820      	ldr	r0, [r4, #0]
 8005d76:	4632      	mov	r2, r6
 8005d78:	4641      	mov	r1, r8
 8005d7a:	f000 faab 	bl	80062d4 <memmove>
 8005d7e:	68a3      	ldr	r3, [r4, #8]
 8005d80:	1b9b      	subs	r3, r3, r6
 8005d82:	60a3      	str	r3, [r4, #8]
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	4433      	add	r3, r6
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d90:	462a      	mov	r2, r5
 8005d92:	f000 fad7 	bl	8006344 <_realloc_r>
 8005d96:	4606      	mov	r6, r0
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d1e0      	bne.n	8005d5e <__ssputs_r+0x5a>
 8005d9c:	6921      	ldr	r1, [r4, #16]
 8005d9e:	4650      	mov	r0, sl
 8005da0:	f7ff feb8 	bl	8005b14 <_free_r>
 8005da4:	230c      	movs	r3, #12
 8005da6:	f8ca 3000 	str.w	r3, [sl]
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005db0:	81a3      	strh	r3, [r4, #12]
 8005db2:	f04f 30ff 	mov.w	r0, #4294967295
 8005db6:	e7e9      	b.n	8005d8c <__ssputs_r+0x88>

08005db8 <_svfiprintf_r>:
 8005db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	4698      	mov	r8, r3
 8005dbe:	898b      	ldrh	r3, [r1, #12]
 8005dc0:	061b      	lsls	r3, r3, #24
 8005dc2:	b09d      	sub	sp, #116	; 0x74
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	460d      	mov	r5, r1
 8005dc8:	4614      	mov	r4, r2
 8005dca:	d50e      	bpl.n	8005dea <_svfiprintf_r+0x32>
 8005dcc:	690b      	ldr	r3, [r1, #16]
 8005dce:	b963      	cbnz	r3, 8005dea <_svfiprintf_r+0x32>
 8005dd0:	2140      	movs	r1, #64	; 0x40
 8005dd2:	f7ff ff0b 	bl	8005bec <_malloc_r>
 8005dd6:	6028      	str	r0, [r5, #0]
 8005dd8:	6128      	str	r0, [r5, #16]
 8005dda:	b920      	cbnz	r0, 8005de6 <_svfiprintf_r+0x2e>
 8005ddc:	230c      	movs	r3, #12
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	e0d0      	b.n	8005f88 <_svfiprintf_r+0x1d0>
 8005de6:	2340      	movs	r3, #64	; 0x40
 8005de8:	616b      	str	r3, [r5, #20]
 8005dea:	2300      	movs	r3, #0
 8005dec:	9309      	str	r3, [sp, #36]	; 0x24
 8005dee:	2320      	movs	r3, #32
 8005df0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005df4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005df8:	2330      	movs	r3, #48	; 0x30
 8005dfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005fa0 <_svfiprintf_r+0x1e8>
 8005dfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e02:	f04f 0901 	mov.w	r9, #1
 8005e06:	4623      	mov	r3, r4
 8005e08:	469a      	mov	sl, r3
 8005e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e0e:	b10a      	cbz	r2, 8005e14 <_svfiprintf_r+0x5c>
 8005e10:	2a25      	cmp	r2, #37	; 0x25
 8005e12:	d1f9      	bne.n	8005e08 <_svfiprintf_r+0x50>
 8005e14:	ebba 0b04 	subs.w	fp, sl, r4
 8005e18:	d00b      	beq.n	8005e32 <_svfiprintf_r+0x7a>
 8005e1a:	465b      	mov	r3, fp
 8005e1c:	4622      	mov	r2, r4
 8005e1e:	4629      	mov	r1, r5
 8005e20:	4638      	mov	r0, r7
 8005e22:	f7ff ff6f 	bl	8005d04 <__ssputs_r>
 8005e26:	3001      	adds	r0, #1
 8005e28:	f000 80a9 	beq.w	8005f7e <_svfiprintf_r+0x1c6>
 8005e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e2e:	445a      	add	r2, fp
 8005e30:	9209      	str	r2, [sp, #36]	; 0x24
 8005e32:	f89a 3000 	ldrb.w	r3, [sl]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 80a1 	beq.w	8005f7e <_svfiprintf_r+0x1c6>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e46:	f10a 0a01 	add.w	sl, sl, #1
 8005e4a:	9304      	str	r3, [sp, #16]
 8005e4c:	9307      	str	r3, [sp, #28]
 8005e4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e52:	931a      	str	r3, [sp, #104]	; 0x68
 8005e54:	4654      	mov	r4, sl
 8005e56:	2205      	movs	r2, #5
 8005e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5c:	4850      	ldr	r0, [pc, #320]	; (8005fa0 <_svfiprintf_r+0x1e8>)
 8005e5e:	f7fa f9df 	bl	8000220 <memchr>
 8005e62:	9a04      	ldr	r2, [sp, #16]
 8005e64:	b9d8      	cbnz	r0, 8005e9e <_svfiprintf_r+0xe6>
 8005e66:	06d0      	lsls	r0, r2, #27
 8005e68:	bf44      	itt	mi
 8005e6a:	2320      	movmi	r3, #32
 8005e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e70:	0711      	lsls	r1, r2, #28
 8005e72:	bf44      	itt	mi
 8005e74:	232b      	movmi	r3, #43	; 0x2b
 8005e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e80:	d015      	beq.n	8005eae <_svfiprintf_r+0xf6>
 8005e82:	9a07      	ldr	r2, [sp, #28]
 8005e84:	4654      	mov	r4, sl
 8005e86:	2000      	movs	r0, #0
 8005e88:	f04f 0c0a 	mov.w	ip, #10
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e92:	3b30      	subs	r3, #48	; 0x30
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d94d      	bls.n	8005f34 <_svfiprintf_r+0x17c>
 8005e98:	b1b0      	cbz	r0, 8005ec8 <_svfiprintf_r+0x110>
 8005e9a:	9207      	str	r2, [sp, #28]
 8005e9c:	e014      	b.n	8005ec8 <_svfiprintf_r+0x110>
 8005e9e:	eba0 0308 	sub.w	r3, r0, r8
 8005ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	9304      	str	r3, [sp, #16]
 8005eaa:	46a2      	mov	sl, r4
 8005eac:	e7d2      	b.n	8005e54 <_svfiprintf_r+0x9c>
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	1d19      	adds	r1, r3, #4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	9103      	str	r1, [sp, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	bfbb      	ittet	lt
 8005eba:	425b      	neglt	r3, r3
 8005ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8005ec0:	9307      	strge	r3, [sp, #28]
 8005ec2:	9307      	strlt	r3, [sp, #28]
 8005ec4:	bfb8      	it	lt
 8005ec6:	9204      	strlt	r2, [sp, #16]
 8005ec8:	7823      	ldrb	r3, [r4, #0]
 8005eca:	2b2e      	cmp	r3, #46	; 0x2e
 8005ecc:	d10c      	bne.n	8005ee8 <_svfiprintf_r+0x130>
 8005ece:	7863      	ldrb	r3, [r4, #1]
 8005ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed2:	d134      	bne.n	8005f3e <_svfiprintf_r+0x186>
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	1d1a      	adds	r2, r3, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	9203      	str	r2, [sp, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bfb8      	it	lt
 8005ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ee4:	3402      	adds	r4, #2
 8005ee6:	9305      	str	r3, [sp, #20]
 8005ee8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005fb0 <_svfiprintf_r+0x1f8>
 8005eec:	7821      	ldrb	r1, [r4, #0]
 8005eee:	2203      	movs	r2, #3
 8005ef0:	4650      	mov	r0, sl
 8005ef2:	f7fa f995 	bl	8000220 <memchr>
 8005ef6:	b138      	cbz	r0, 8005f08 <_svfiprintf_r+0x150>
 8005ef8:	9b04      	ldr	r3, [sp, #16]
 8005efa:	eba0 000a 	sub.w	r0, r0, sl
 8005efe:	2240      	movs	r2, #64	; 0x40
 8005f00:	4082      	lsls	r2, r0
 8005f02:	4313      	orrs	r3, r2
 8005f04:	3401      	adds	r4, #1
 8005f06:	9304      	str	r3, [sp, #16]
 8005f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0c:	4825      	ldr	r0, [pc, #148]	; (8005fa4 <_svfiprintf_r+0x1ec>)
 8005f0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f12:	2206      	movs	r2, #6
 8005f14:	f7fa f984 	bl	8000220 <memchr>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d038      	beq.n	8005f8e <_svfiprintf_r+0x1d6>
 8005f1c:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <_svfiprintf_r+0x1f0>)
 8005f1e:	bb1b      	cbnz	r3, 8005f68 <_svfiprintf_r+0x1b0>
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	3307      	adds	r3, #7
 8005f24:	f023 0307 	bic.w	r3, r3, #7
 8005f28:	3308      	adds	r3, #8
 8005f2a:	9303      	str	r3, [sp, #12]
 8005f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2e:	4433      	add	r3, r6
 8005f30:	9309      	str	r3, [sp, #36]	; 0x24
 8005f32:	e768      	b.n	8005e06 <_svfiprintf_r+0x4e>
 8005f34:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f38:	460c      	mov	r4, r1
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	e7a6      	b.n	8005e8c <_svfiprintf_r+0xd4>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	3401      	adds	r4, #1
 8005f42:	9305      	str	r3, [sp, #20]
 8005f44:	4619      	mov	r1, r3
 8005f46:	f04f 0c0a 	mov.w	ip, #10
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f50:	3a30      	subs	r2, #48	; 0x30
 8005f52:	2a09      	cmp	r2, #9
 8005f54:	d903      	bls.n	8005f5e <_svfiprintf_r+0x1a6>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0c6      	beq.n	8005ee8 <_svfiprintf_r+0x130>
 8005f5a:	9105      	str	r1, [sp, #20]
 8005f5c:	e7c4      	b.n	8005ee8 <_svfiprintf_r+0x130>
 8005f5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f62:	4604      	mov	r4, r0
 8005f64:	2301      	movs	r3, #1
 8005f66:	e7f0      	b.n	8005f4a <_svfiprintf_r+0x192>
 8005f68:	ab03      	add	r3, sp, #12
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <_svfiprintf_r+0x1f4>)
 8005f70:	a904      	add	r1, sp, #16
 8005f72:	4638      	mov	r0, r7
 8005f74:	f3af 8000 	nop.w
 8005f78:	1c42      	adds	r2, r0, #1
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	d1d6      	bne.n	8005f2c <_svfiprintf_r+0x174>
 8005f7e:	89ab      	ldrh	r3, [r5, #12]
 8005f80:	065b      	lsls	r3, r3, #25
 8005f82:	f53f af2d 	bmi.w	8005de0 <_svfiprintf_r+0x28>
 8005f86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f88:	b01d      	add	sp, #116	; 0x74
 8005f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8e:	ab03      	add	r3, sp, #12
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	462a      	mov	r2, r5
 8005f94:	4b05      	ldr	r3, [pc, #20]	; (8005fac <_svfiprintf_r+0x1f4>)
 8005f96:	a904      	add	r1, sp, #16
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f000 f879 	bl	8006090 <_printf_i>
 8005f9e:	e7eb      	b.n	8005f78 <_svfiprintf_r+0x1c0>
 8005fa0:	08006464 	.word	0x08006464
 8005fa4:	0800646e 	.word	0x0800646e
 8005fa8:	00000000 	.word	0x00000000
 8005fac:	08005d05 	.word	0x08005d05
 8005fb0:	0800646a 	.word	0x0800646a

08005fb4 <_printf_common>:
 8005fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb8:	4616      	mov	r6, r2
 8005fba:	4699      	mov	r9, r3
 8005fbc:	688a      	ldr	r2, [r1, #8]
 8005fbe:	690b      	ldr	r3, [r1, #16]
 8005fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	bfb8      	it	lt
 8005fc8:	4613      	movlt	r3, r2
 8005fca:	6033      	str	r3, [r6, #0]
 8005fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	b10a      	cbz	r2, 8005fda <_printf_common+0x26>
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	6033      	str	r3, [r6, #0]
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	0699      	lsls	r1, r3, #26
 8005fde:	bf42      	ittt	mi
 8005fe0:	6833      	ldrmi	r3, [r6, #0]
 8005fe2:	3302      	addmi	r3, #2
 8005fe4:	6033      	strmi	r3, [r6, #0]
 8005fe6:	6825      	ldr	r5, [r4, #0]
 8005fe8:	f015 0506 	ands.w	r5, r5, #6
 8005fec:	d106      	bne.n	8005ffc <_printf_common+0x48>
 8005fee:	f104 0a19 	add.w	sl, r4, #25
 8005ff2:	68e3      	ldr	r3, [r4, #12]
 8005ff4:	6832      	ldr	r2, [r6, #0]
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	42ab      	cmp	r3, r5
 8005ffa:	dc26      	bgt.n	800604a <_printf_common+0x96>
 8005ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006000:	1e13      	subs	r3, r2, #0
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	bf18      	it	ne
 8006006:	2301      	movne	r3, #1
 8006008:	0692      	lsls	r2, r2, #26
 800600a:	d42b      	bmi.n	8006064 <_printf_common+0xb0>
 800600c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006010:	4649      	mov	r1, r9
 8006012:	4638      	mov	r0, r7
 8006014:	47c0      	blx	r8
 8006016:	3001      	adds	r0, #1
 8006018:	d01e      	beq.n	8006058 <_printf_common+0xa4>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	6922      	ldr	r2, [r4, #16]
 800601e:	f003 0306 	and.w	r3, r3, #6
 8006022:	2b04      	cmp	r3, #4
 8006024:	bf02      	ittt	eq
 8006026:	68e5      	ldreq	r5, [r4, #12]
 8006028:	6833      	ldreq	r3, [r6, #0]
 800602a:	1aed      	subeq	r5, r5, r3
 800602c:	68a3      	ldr	r3, [r4, #8]
 800602e:	bf0c      	ite	eq
 8006030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006034:	2500      	movne	r5, #0
 8006036:	4293      	cmp	r3, r2
 8006038:	bfc4      	itt	gt
 800603a:	1a9b      	subgt	r3, r3, r2
 800603c:	18ed      	addgt	r5, r5, r3
 800603e:	2600      	movs	r6, #0
 8006040:	341a      	adds	r4, #26
 8006042:	42b5      	cmp	r5, r6
 8006044:	d11a      	bne.n	800607c <_printf_common+0xc8>
 8006046:	2000      	movs	r0, #0
 8006048:	e008      	b.n	800605c <_printf_common+0xa8>
 800604a:	2301      	movs	r3, #1
 800604c:	4652      	mov	r2, sl
 800604e:	4649      	mov	r1, r9
 8006050:	4638      	mov	r0, r7
 8006052:	47c0      	blx	r8
 8006054:	3001      	adds	r0, #1
 8006056:	d103      	bne.n	8006060 <_printf_common+0xac>
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006060:	3501      	adds	r5, #1
 8006062:	e7c6      	b.n	8005ff2 <_printf_common+0x3e>
 8006064:	18e1      	adds	r1, r4, r3
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	2030      	movs	r0, #48	; 0x30
 800606a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800606e:	4422      	add	r2, r4
 8006070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006078:	3302      	adds	r3, #2
 800607a:	e7c7      	b.n	800600c <_printf_common+0x58>
 800607c:	2301      	movs	r3, #1
 800607e:	4622      	mov	r2, r4
 8006080:	4649      	mov	r1, r9
 8006082:	4638      	mov	r0, r7
 8006084:	47c0      	blx	r8
 8006086:	3001      	adds	r0, #1
 8006088:	d0e6      	beq.n	8006058 <_printf_common+0xa4>
 800608a:	3601      	adds	r6, #1
 800608c:	e7d9      	b.n	8006042 <_printf_common+0x8e>
	...

08006090 <_printf_i>:
 8006090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	7e0f      	ldrb	r7, [r1, #24]
 8006096:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006098:	2f78      	cmp	r7, #120	; 0x78
 800609a:	4691      	mov	r9, r2
 800609c:	4680      	mov	r8, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	469a      	mov	sl, r3
 80060a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060a6:	d807      	bhi.n	80060b8 <_printf_i+0x28>
 80060a8:	2f62      	cmp	r7, #98	; 0x62
 80060aa:	d80a      	bhi.n	80060c2 <_printf_i+0x32>
 80060ac:	2f00      	cmp	r7, #0
 80060ae:	f000 80d4 	beq.w	800625a <_printf_i+0x1ca>
 80060b2:	2f58      	cmp	r7, #88	; 0x58
 80060b4:	f000 80c0 	beq.w	8006238 <_printf_i+0x1a8>
 80060b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060c0:	e03a      	b.n	8006138 <_printf_i+0xa8>
 80060c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060c6:	2b15      	cmp	r3, #21
 80060c8:	d8f6      	bhi.n	80060b8 <_printf_i+0x28>
 80060ca:	a101      	add	r1, pc, #4	; (adr r1, 80060d0 <_printf_i+0x40>)
 80060cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d0:	08006129 	.word	0x08006129
 80060d4:	0800613d 	.word	0x0800613d
 80060d8:	080060b9 	.word	0x080060b9
 80060dc:	080060b9 	.word	0x080060b9
 80060e0:	080060b9 	.word	0x080060b9
 80060e4:	080060b9 	.word	0x080060b9
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	080060b9 	.word	0x080060b9
 80060f0:	080060b9 	.word	0x080060b9
 80060f4:	080060b9 	.word	0x080060b9
 80060f8:	080060b9 	.word	0x080060b9
 80060fc:	08006241 	.word	0x08006241
 8006100:	08006169 	.word	0x08006169
 8006104:	080061fb 	.word	0x080061fb
 8006108:	080060b9 	.word	0x080060b9
 800610c:	080060b9 	.word	0x080060b9
 8006110:	08006263 	.word	0x08006263
 8006114:	080060b9 	.word	0x080060b9
 8006118:	08006169 	.word	0x08006169
 800611c:	080060b9 	.word	0x080060b9
 8006120:	080060b9 	.word	0x080060b9
 8006124:	08006203 	.word	0x08006203
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	1d1a      	adds	r2, r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	602a      	str	r2, [r5, #0]
 8006130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006138:	2301      	movs	r3, #1
 800613a:	e09f      	b.n	800627c <_printf_i+0x1ec>
 800613c:	6820      	ldr	r0, [r4, #0]
 800613e:	682b      	ldr	r3, [r5, #0]
 8006140:	0607      	lsls	r7, r0, #24
 8006142:	f103 0104 	add.w	r1, r3, #4
 8006146:	6029      	str	r1, [r5, #0]
 8006148:	d501      	bpl.n	800614e <_printf_i+0xbe>
 800614a:	681e      	ldr	r6, [r3, #0]
 800614c:	e003      	b.n	8006156 <_printf_i+0xc6>
 800614e:	0646      	lsls	r6, r0, #25
 8006150:	d5fb      	bpl.n	800614a <_printf_i+0xba>
 8006152:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006156:	2e00      	cmp	r6, #0
 8006158:	da03      	bge.n	8006162 <_printf_i+0xd2>
 800615a:	232d      	movs	r3, #45	; 0x2d
 800615c:	4276      	negs	r6, r6
 800615e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006162:	485a      	ldr	r0, [pc, #360]	; (80062cc <_printf_i+0x23c>)
 8006164:	230a      	movs	r3, #10
 8006166:	e012      	b.n	800618e <_printf_i+0xfe>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	6820      	ldr	r0, [r4, #0]
 800616c:	1d19      	adds	r1, r3, #4
 800616e:	6029      	str	r1, [r5, #0]
 8006170:	0605      	lsls	r5, r0, #24
 8006172:	d501      	bpl.n	8006178 <_printf_i+0xe8>
 8006174:	681e      	ldr	r6, [r3, #0]
 8006176:	e002      	b.n	800617e <_printf_i+0xee>
 8006178:	0641      	lsls	r1, r0, #25
 800617a:	d5fb      	bpl.n	8006174 <_printf_i+0xe4>
 800617c:	881e      	ldrh	r6, [r3, #0]
 800617e:	4853      	ldr	r0, [pc, #332]	; (80062cc <_printf_i+0x23c>)
 8006180:	2f6f      	cmp	r7, #111	; 0x6f
 8006182:	bf0c      	ite	eq
 8006184:	2308      	moveq	r3, #8
 8006186:	230a      	movne	r3, #10
 8006188:	2100      	movs	r1, #0
 800618a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800618e:	6865      	ldr	r5, [r4, #4]
 8006190:	60a5      	str	r5, [r4, #8]
 8006192:	2d00      	cmp	r5, #0
 8006194:	bfa2      	ittt	ge
 8006196:	6821      	ldrge	r1, [r4, #0]
 8006198:	f021 0104 	bicge.w	r1, r1, #4
 800619c:	6021      	strge	r1, [r4, #0]
 800619e:	b90e      	cbnz	r6, 80061a4 <_printf_i+0x114>
 80061a0:	2d00      	cmp	r5, #0
 80061a2:	d04b      	beq.n	800623c <_printf_i+0x1ac>
 80061a4:	4615      	mov	r5, r2
 80061a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061aa:	fb03 6711 	mls	r7, r3, r1, r6
 80061ae:	5dc7      	ldrb	r7, [r0, r7]
 80061b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061b4:	4637      	mov	r7, r6
 80061b6:	42bb      	cmp	r3, r7
 80061b8:	460e      	mov	r6, r1
 80061ba:	d9f4      	bls.n	80061a6 <_printf_i+0x116>
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d10b      	bne.n	80061d8 <_printf_i+0x148>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	07de      	lsls	r6, r3, #31
 80061c4:	d508      	bpl.n	80061d8 <_printf_i+0x148>
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	6861      	ldr	r1, [r4, #4]
 80061ca:	4299      	cmp	r1, r3
 80061cc:	bfde      	ittt	le
 80061ce:	2330      	movle	r3, #48	; 0x30
 80061d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061d8:	1b52      	subs	r2, r2, r5
 80061da:	6122      	str	r2, [r4, #16]
 80061dc:	f8cd a000 	str.w	sl, [sp]
 80061e0:	464b      	mov	r3, r9
 80061e2:	aa03      	add	r2, sp, #12
 80061e4:	4621      	mov	r1, r4
 80061e6:	4640      	mov	r0, r8
 80061e8:	f7ff fee4 	bl	8005fb4 <_printf_common>
 80061ec:	3001      	adds	r0, #1
 80061ee:	d14a      	bne.n	8006286 <_printf_i+0x1f6>
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	b004      	add	sp, #16
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	f043 0320 	orr.w	r3, r3, #32
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	4833      	ldr	r0, [pc, #204]	; (80062d0 <_printf_i+0x240>)
 8006204:	2778      	movs	r7, #120	; 0x78
 8006206:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	6829      	ldr	r1, [r5, #0]
 800620e:	061f      	lsls	r7, r3, #24
 8006210:	f851 6b04 	ldr.w	r6, [r1], #4
 8006214:	d402      	bmi.n	800621c <_printf_i+0x18c>
 8006216:	065f      	lsls	r7, r3, #25
 8006218:	bf48      	it	mi
 800621a:	b2b6      	uxthmi	r6, r6
 800621c:	07df      	lsls	r7, r3, #31
 800621e:	bf48      	it	mi
 8006220:	f043 0320 	orrmi.w	r3, r3, #32
 8006224:	6029      	str	r1, [r5, #0]
 8006226:	bf48      	it	mi
 8006228:	6023      	strmi	r3, [r4, #0]
 800622a:	b91e      	cbnz	r6, 8006234 <_printf_i+0x1a4>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	f023 0320 	bic.w	r3, r3, #32
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	2310      	movs	r3, #16
 8006236:	e7a7      	b.n	8006188 <_printf_i+0xf8>
 8006238:	4824      	ldr	r0, [pc, #144]	; (80062cc <_printf_i+0x23c>)
 800623a:	e7e4      	b.n	8006206 <_printf_i+0x176>
 800623c:	4615      	mov	r5, r2
 800623e:	e7bd      	b.n	80061bc <_printf_i+0x12c>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	6826      	ldr	r6, [r4, #0]
 8006244:	6961      	ldr	r1, [r4, #20]
 8006246:	1d18      	adds	r0, r3, #4
 8006248:	6028      	str	r0, [r5, #0]
 800624a:	0635      	lsls	r5, r6, #24
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	d501      	bpl.n	8006254 <_printf_i+0x1c4>
 8006250:	6019      	str	r1, [r3, #0]
 8006252:	e002      	b.n	800625a <_printf_i+0x1ca>
 8006254:	0670      	lsls	r0, r6, #25
 8006256:	d5fb      	bpl.n	8006250 <_printf_i+0x1c0>
 8006258:	8019      	strh	r1, [r3, #0]
 800625a:	2300      	movs	r3, #0
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	4615      	mov	r5, r2
 8006260:	e7bc      	b.n	80061dc <_printf_i+0x14c>
 8006262:	682b      	ldr	r3, [r5, #0]
 8006264:	1d1a      	adds	r2, r3, #4
 8006266:	602a      	str	r2, [r5, #0]
 8006268:	681d      	ldr	r5, [r3, #0]
 800626a:	6862      	ldr	r2, [r4, #4]
 800626c:	2100      	movs	r1, #0
 800626e:	4628      	mov	r0, r5
 8006270:	f7f9 ffd6 	bl	8000220 <memchr>
 8006274:	b108      	cbz	r0, 800627a <_printf_i+0x1ea>
 8006276:	1b40      	subs	r0, r0, r5
 8006278:	6060      	str	r0, [r4, #4]
 800627a:	6863      	ldr	r3, [r4, #4]
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	2300      	movs	r3, #0
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006284:	e7aa      	b.n	80061dc <_printf_i+0x14c>
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	462a      	mov	r2, r5
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	47d0      	blx	sl
 8006290:	3001      	adds	r0, #1
 8006292:	d0ad      	beq.n	80061f0 <_printf_i+0x160>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	079b      	lsls	r3, r3, #30
 8006298:	d413      	bmi.n	80062c2 <_printf_i+0x232>
 800629a:	68e0      	ldr	r0, [r4, #12]
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	4298      	cmp	r0, r3
 80062a0:	bfb8      	it	lt
 80062a2:	4618      	movlt	r0, r3
 80062a4:	e7a6      	b.n	80061f4 <_printf_i+0x164>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4632      	mov	r2, r6
 80062aa:	4649      	mov	r1, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	47d0      	blx	sl
 80062b0:	3001      	adds	r0, #1
 80062b2:	d09d      	beq.n	80061f0 <_printf_i+0x160>
 80062b4:	3501      	adds	r5, #1
 80062b6:	68e3      	ldr	r3, [r4, #12]
 80062b8:	9903      	ldr	r1, [sp, #12]
 80062ba:	1a5b      	subs	r3, r3, r1
 80062bc:	42ab      	cmp	r3, r5
 80062be:	dcf2      	bgt.n	80062a6 <_printf_i+0x216>
 80062c0:	e7eb      	b.n	800629a <_printf_i+0x20a>
 80062c2:	2500      	movs	r5, #0
 80062c4:	f104 0619 	add.w	r6, r4, #25
 80062c8:	e7f5      	b.n	80062b6 <_printf_i+0x226>
 80062ca:	bf00      	nop
 80062cc:	08006475 	.word	0x08006475
 80062d0:	08006486 	.word	0x08006486

080062d4 <memmove>:
 80062d4:	4288      	cmp	r0, r1
 80062d6:	b510      	push	{r4, lr}
 80062d8:	eb01 0402 	add.w	r4, r1, r2
 80062dc:	d902      	bls.n	80062e4 <memmove+0x10>
 80062de:	4284      	cmp	r4, r0
 80062e0:	4623      	mov	r3, r4
 80062e2:	d807      	bhi.n	80062f4 <memmove+0x20>
 80062e4:	1e43      	subs	r3, r0, #1
 80062e6:	42a1      	cmp	r1, r4
 80062e8:	d008      	beq.n	80062fc <memmove+0x28>
 80062ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062f2:	e7f8      	b.n	80062e6 <memmove+0x12>
 80062f4:	4402      	add	r2, r0
 80062f6:	4601      	mov	r1, r0
 80062f8:	428a      	cmp	r2, r1
 80062fa:	d100      	bne.n	80062fe <memmove+0x2a>
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006306:	e7f7      	b.n	80062f8 <memmove+0x24>

08006308 <_sbrk_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4d06      	ldr	r5, [pc, #24]	; (8006324 <_sbrk_r+0x1c>)
 800630c:	2300      	movs	r3, #0
 800630e:	4604      	mov	r4, r0
 8006310:	4608      	mov	r0, r1
 8006312:	602b      	str	r3, [r5, #0]
 8006314:	f7fa fd64 	bl	8000de0 <_sbrk>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	d102      	bne.n	8006322 <_sbrk_r+0x1a>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	b103      	cbz	r3, 8006322 <_sbrk_r+0x1a>
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	bd38      	pop	{r3, r4, r5, pc}
 8006324:	20000324 	.word	0x20000324

08006328 <memcpy>:
 8006328:	440a      	add	r2, r1
 800632a:	4291      	cmp	r1, r2
 800632c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006330:	d100      	bne.n	8006334 <memcpy+0xc>
 8006332:	4770      	bx	lr
 8006334:	b510      	push	{r4, lr}
 8006336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800633a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800633e:	4291      	cmp	r1, r2
 8006340:	d1f9      	bne.n	8006336 <memcpy+0xe>
 8006342:	bd10      	pop	{r4, pc}

08006344 <_realloc_r>:
 8006344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006348:	4680      	mov	r8, r0
 800634a:	4614      	mov	r4, r2
 800634c:	460e      	mov	r6, r1
 800634e:	b921      	cbnz	r1, 800635a <_realloc_r+0x16>
 8006350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006354:	4611      	mov	r1, r2
 8006356:	f7ff bc49 	b.w	8005bec <_malloc_r>
 800635a:	b92a      	cbnz	r2, 8006368 <_realloc_r+0x24>
 800635c:	f7ff fbda 	bl	8005b14 <_free_r>
 8006360:	4625      	mov	r5, r4
 8006362:	4628      	mov	r0, r5
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006368:	f000 f81b 	bl	80063a2 <_malloc_usable_size_r>
 800636c:	4284      	cmp	r4, r0
 800636e:	4607      	mov	r7, r0
 8006370:	d802      	bhi.n	8006378 <_realloc_r+0x34>
 8006372:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006376:	d812      	bhi.n	800639e <_realloc_r+0x5a>
 8006378:	4621      	mov	r1, r4
 800637a:	4640      	mov	r0, r8
 800637c:	f7ff fc36 	bl	8005bec <_malloc_r>
 8006380:	4605      	mov	r5, r0
 8006382:	2800      	cmp	r0, #0
 8006384:	d0ed      	beq.n	8006362 <_realloc_r+0x1e>
 8006386:	42bc      	cmp	r4, r7
 8006388:	4622      	mov	r2, r4
 800638a:	4631      	mov	r1, r6
 800638c:	bf28      	it	cs
 800638e:	463a      	movcs	r2, r7
 8006390:	f7ff ffca 	bl	8006328 <memcpy>
 8006394:	4631      	mov	r1, r6
 8006396:	4640      	mov	r0, r8
 8006398:	f7ff fbbc 	bl	8005b14 <_free_r>
 800639c:	e7e1      	b.n	8006362 <_realloc_r+0x1e>
 800639e:	4635      	mov	r5, r6
 80063a0:	e7df      	b.n	8006362 <_realloc_r+0x1e>

080063a2 <_malloc_usable_size_r>:
 80063a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a6:	1f18      	subs	r0, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	bfbc      	itt	lt
 80063ac:	580b      	ldrlt	r3, [r1, r0]
 80063ae:	18c0      	addlt	r0, r0, r3
 80063b0:	4770      	bx	lr
	...

080063b4 <_init>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	bf00      	nop
 80063b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ba:	bc08      	pop	{r3}
 80063bc:	469e      	mov	lr, r3
 80063be:	4770      	bx	lr

080063c0 <_fini>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	bf00      	nop
 80063c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c6:	bc08      	pop	{r3}
 80063c8:	469e      	mov	lr, r3
 80063ca:	4770      	bx	lr
